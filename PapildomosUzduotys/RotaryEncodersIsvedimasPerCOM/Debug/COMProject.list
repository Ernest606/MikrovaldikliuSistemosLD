
COMProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e9c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  0800802c  0800802c  0001802c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008118  08008118  0002014c  2**0
                  CONTENTS
  4 .ARM          00000008  08008118  08008118  00018118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008120  08008120  0002014c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008120  08008120  00018120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008124  08008124  00018124  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000014c  20000000  08008128  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002014c  2**0
                  CONTENTS
 10 .bss          00001d98  2000014c  2000014c  0002014c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001ee4  20001ee4  0002014c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002014c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00012b81  00000000  00000000  000201bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000030cb  00000000  00000000  00032d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000010b8  00000000  00000000  00035e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000cb5  00000000  00000000  00036ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000237e9  00000000  00000000  00037b7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00014f8a  00000000  00000000  0005b366  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ccbcd  00000000  00000000  000702f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004a68  00000000  00000000  0013cec0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  00141928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000014c 	.word	0x2000014c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008014 	.word	0x08008014

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000150 	.word	0x20000150
 80001cc:	08008014 	.word	0x08008014

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b08e      	sub	sp, #56	; 0x38
 8000580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  uint8_t message[50] = {'\0'};
 8000582:	2300      	movs	r3, #0
 8000584:	607b      	str	r3, [r7, #4]
 8000586:	f107 0308 	add.w	r3, r7, #8
 800058a:	222e      	movs	r2, #46	; 0x2e
 800058c:	2100      	movs	r1, #0
 800058e:	4618      	mov	r0, r3
 8000590:	f007 f8bc 	bl	800770c <memset>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000594:	f000 fa9c 	bl	8000ad0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000598:	f000 f846 	bl	8000628 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059c:	f000 f902 	bl	80007a4 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80005a0:	f006 fb74 	bl	8006c8c <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 80005a4:	f000 f8aa 	bl	80006fc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80005a8:	213c      	movs	r1, #60	; 0x3c
 80005aa:	481b      	ldr	r0, [pc, #108]	; (8000618 <main+0x9c>)
 80005ac:	f002 fd52 	bl	8003054 <HAL_TIM_Encoder_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == GPIO_PIN_RESET)
 80005b0:	2102      	movs	r1, #2
 80005b2:	481a      	ldr	r0, [pc, #104]	; (800061c <main+0xa0>)
 80005b4:	f000 fdd0 	bl	8001158 <HAL_GPIO_ReadPin>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d114      	bne.n	80005e8 <main+0x6c>
		{
	    	sprintf(message, "Switch Released, Encoder Ticks = %d\n\r", ((TIM2->CNT)>>2));
 80005be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80005c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005c4:	089a      	lsrs	r2, r3, #2
 80005c6:	1d3b      	adds	r3, r7, #4
 80005c8:	4915      	ldr	r1, [pc, #84]	; (8000620 <main+0xa4>)
 80005ca:	4618      	mov	r0, r3
 80005cc:	f007 f87e 	bl	80076cc <siprintf>
	        CDC_Transmit_FS((uint8_t *) message, strlen(message));
 80005d0:	1d3b      	adds	r3, r7, #4
 80005d2:	4618      	mov	r0, r3
 80005d4:	f7ff fdfc 	bl	80001d0 <strlen>
 80005d8:	4603      	mov	r3, r0
 80005da:	b29a      	uxth	r2, r3
 80005dc:	1d3b      	adds	r3, r7, #4
 80005de:	4611      	mov	r1, r2
 80005e0:	4618      	mov	r0, r3
 80005e2:	f006 fc17 	bl	8006e14 <CDC_Transmit_FS>
 80005e6:	e013      	b.n	8000610 <main+0x94>
	    }
	    else
		{
			sprintf(message, "Switch Pressed,  Encoder Ticks = %d\n\r", ((TIM2->CNT)>>2));
 80005e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80005ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005ee:	089a      	lsrs	r2, r3, #2
 80005f0:	1d3b      	adds	r3, r7, #4
 80005f2:	490c      	ldr	r1, [pc, #48]	; (8000624 <main+0xa8>)
 80005f4:	4618      	mov	r0, r3
 80005f6:	f007 f869 	bl	80076cc <siprintf>
			CDC_Transmit_FS((uint8_t *) message, strlen(message));
 80005fa:	1d3b      	adds	r3, r7, #4
 80005fc:	4618      	mov	r0, r3
 80005fe:	f7ff fde7 	bl	80001d0 <strlen>
 8000602:	4603      	mov	r3, r0
 8000604:	b29a      	uxth	r2, r3
 8000606:	1d3b      	adds	r3, r7, #4
 8000608:	4611      	mov	r1, r2
 800060a:	4618      	mov	r0, r3
 800060c:	f006 fc02 	bl	8006e14 <CDC_Transmit_FS>
		}
	    HAL_Delay(100);
 8000610:	2064      	movs	r0, #100	; 0x64
 8000612:	f000 facf 	bl	8000bb4 <HAL_Delay>
	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == GPIO_PIN_RESET)
 8000616:	e7cb      	b.n	80005b0 <main+0x34>
 8000618:	20000168 	.word	0x20000168
 800061c:	40020000 	.word	0x40020000
 8000620:	0800803c 	.word	0x0800803c
 8000624:	08008064 	.word	0x08008064

08000628 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b094      	sub	sp, #80	; 0x50
 800062c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062e:	f107 0320 	add.w	r3, r7, #32
 8000632:	2230      	movs	r2, #48	; 0x30
 8000634:	2100      	movs	r1, #0
 8000636:	4618      	mov	r0, r3
 8000638:	f007 f868 	bl	800770c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800063c:	f107 030c 	add.w	r3, r7, #12
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	605a      	str	r2, [r3, #4]
 8000646:	609a      	str	r2, [r3, #8]
 8000648:	60da      	str	r2, [r3, #12]
 800064a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800064c:	2300      	movs	r3, #0
 800064e:	60bb      	str	r3, [r7, #8]
 8000650:	4b28      	ldr	r3, [pc, #160]	; (80006f4 <SystemClock_Config+0xcc>)
 8000652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000654:	4a27      	ldr	r2, [pc, #156]	; (80006f4 <SystemClock_Config+0xcc>)
 8000656:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800065a:	6413      	str	r3, [r2, #64]	; 0x40
 800065c:	4b25      	ldr	r3, [pc, #148]	; (80006f4 <SystemClock_Config+0xcc>)
 800065e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000660:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000664:	60bb      	str	r3, [r7, #8]
 8000666:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000668:	2300      	movs	r3, #0
 800066a:	607b      	str	r3, [r7, #4]
 800066c:	4b22      	ldr	r3, [pc, #136]	; (80006f8 <SystemClock_Config+0xd0>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a21      	ldr	r2, [pc, #132]	; (80006f8 <SystemClock_Config+0xd0>)
 8000672:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000676:	6013      	str	r3, [r2, #0]
 8000678:	4b1f      	ldr	r3, [pc, #124]	; (80006f8 <SystemClock_Config+0xd0>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000680:	607b      	str	r3, [r7, #4]
 8000682:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000684:	2301      	movs	r3, #1
 8000686:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000688:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800068c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800068e:	2302      	movs	r3, #2
 8000690:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000692:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000696:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000698:	2304      	movs	r3, #4
 800069a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800069c:	2348      	movs	r3, #72	; 0x48
 800069e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006a0:	2302      	movs	r3, #2
 80006a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80006a4:	2303      	movs	r3, #3
 80006a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a8:	f107 0320 	add.w	r3, r7, #32
 80006ac:	4618      	mov	r0, r3
 80006ae:	f001 ffbb 	bl	8002628 <HAL_RCC_OscConfig>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006b8:	f000 f8be 	bl	8000838 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006bc:	230f      	movs	r3, #15
 80006be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c0:	2302      	movs	r3, #2
 80006c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c4:	2300      	movs	r3, #0
 80006c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006d2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006d4:	f107 030c 	add.w	r3, r7, #12
 80006d8:	2102      	movs	r1, #2
 80006da:	4618      	mov	r0, r3
 80006dc:	f002 fa1c 	bl	8002b18 <HAL_RCC_ClockConfig>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006e6:	f000 f8a7 	bl	8000838 <Error_Handler>
  }
}
 80006ea:	bf00      	nop
 80006ec:	3750      	adds	r7, #80	; 0x50
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	40023800 	.word	0x40023800
 80006f8:	40007000 	.word	0x40007000

080006fc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b08c      	sub	sp, #48	; 0x30
 8000700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000702:	f107 030c 	add.w	r3, r7, #12
 8000706:	2224      	movs	r2, #36	; 0x24
 8000708:	2100      	movs	r1, #0
 800070a:	4618      	mov	r0, r3
 800070c:	f006 fffe 	bl	800770c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000710:	1d3b      	adds	r3, r7, #4
 8000712:	2200      	movs	r2, #0
 8000714:	601a      	str	r2, [r3, #0]
 8000716:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000718:	4b21      	ldr	r3, [pc, #132]	; (80007a0 <MX_TIM2_Init+0xa4>)
 800071a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800071e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000720:	4b1f      	ldr	r3, [pc, #124]	; (80007a0 <MX_TIM2_Init+0xa4>)
 8000722:	2200      	movs	r2, #0
 8000724:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000726:	4b1e      	ldr	r3, [pc, #120]	; (80007a0 <MX_TIM2_Init+0xa4>)
 8000728:	2200      	movs	r2, #0
 800072a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800072c:	4b1c      	ldr	r3, [pc, #112]	; (80007a0 <MX_TIM2_Init+0xa4>)
 800072e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000732:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000734:	4b1a      	ldr	r3, [pc, #104]	; (80007a0 <MX_TIM2_Init+0xa4>)
 8000736:	2200      	movs	r2, #0
 8000738:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800073a:	4b19      	ldr	r3, [pc, #100]	; (80007a0 <MX_TIM2_Init+0xa4>)
 800073c:	2280      	movs	r2, #128	; 0x80
 800073e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000740:	2303      	movs	r3, #3
 8000742:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000744:	2300      	movs	r3, #0
 8000746:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000748:	2301      	movs	r3, #1
 800074a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800074c:	2300      	movs	r3, #0
 800074e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8000750:	230a      	movs	r3, #10
 8000752:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000754:	2300      	movs	r3, #0
 8000756:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000758:	2301      	movs	r3, #1
 800075a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800075c:	2300      	movs	r3, #0
 800075e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8000760:	230a      	movs	r3, #10
 8000762:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000764:	f107 030c 	add.w	r3, r7, #12
 8000768:	4619      	mov	r1, r3
 800076a:	480d      	ldr	r0, [pc, #52]	; (80007a0 <MX_TIM2_Init+0xa4>)
 800076c:	f002 fbcc 	bl	8002f08 <HAL_TIM_Encoder_Init>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000776:	f000 f85f 	bl	8000838 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800077a:	2300      	movs	r3, #0
 800077c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800077e:	2300      	movs	r3, #0
 8000780:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000782:	1d3b      	adds	r3, r7, #4
 8000784:	4619      	mov	r1, r3
 8000786:	4806      	ldr	r0, [pc, #24]	; (80007a0 <MX_TIM2_Init+0xa4>)
 8000788:	f002 fee6 	bl	8003558 <HAL_TIMEx_MasterConfigSynchronization>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000792:	f000 f851 	bl	8000838 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000796:	bf00      	nop
 8000798:	3730      	adds	r7, #48	; 0x30
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	20000168 	.word	0x20000168

080007a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b088      	sub	sp, #32
 80007a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007aa:	f107 030c 	add.w	r3, r7, #12
 80007ae:	2200      	movs	r2, #0
 80007b0:	601a      	str	r2, [r3, #0]
 80007b2:	605a      	str	r2, [r3, #4]
 80007b4:	609a      	str	r2, [r3, #8]
 80007b6:	60da      	str	r2, [r3, #12]
 80007b8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	60bb      	str	r3, [r7, #8]
 80007be:	4b1c      	ldr	r3, [pc, #112]	; (8000830 <MX_GPIO_Init+0x8c>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a1b      	ldr	r2, [pc, #108]	; (8000830 <MX_GPIO_Init+0x8c>)
 80007c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b19      	ldr	r3, [pc, #100]	; (8000830 <MX_GPIO_Init+0x8c>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007d2:	60bb      	str	r3, [r7, #8]
 80007d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	607b      	str	r3, [r7, #4]
 80007da:	4b15      	ldr	r3, [pc, #84]	; (8000830 <MX_GPIO_Init+0x8c>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	4a14      	ldr	r2, [pc, #80]	; (8000830 <MX_GPIO_Init+0x8c>)
 80007e0:	f043 0301 	orr.w	r3, r3, #1
 80007e4:	6313      	str	r3, [r2, #48]	; 0x30
 80007e6:	4b12      	ldr	r3, [pc, #72]	; (8000830 <MX_GPIO_Init+0x8c>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	f003 0301 	and.w	r3, r3, #1
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	603b      	str	r3, [r7, #0]
 80007f6:	4b0e      	ldr	r3, [pc, #56]	; (8000830 <MX_GPIO_Init+0x8c>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4a0d      	ldr	r2, [pc, #52]	; (8000830 <MX_GPIO_Init+0x8c>)
 80007fc:	f043 0302 	orr.w	r3, r3, #2
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
 8000802:	4b0b      	ldr	r3, [pc, #44]	; (8000830 <MX_GPIO_Init+0x8c>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	f003 0302 	and.w	r3, r3, #2
 800080a:	603b      	str	r3, [r7, #0]
 800080c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800080e:	2302      	movs	r3, #2
 8000810:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000812:	2300      	movs	r3, #0
 8000814:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000816:	2300      	movs	r3, #0
 8000818:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800081a:	f107 030c 	add.w	r3, r7, #12
 800081e:	4619      	mov	r1, r3
 8000820:	4804      	ldr	r0, [pc, #16]	; (8000834 <MX_GPIO_Init+0x90>)
 8000822:	f000 fafd 	bl	8000e20 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000826:	bf00      	nop
 8000828:	3720      	adds	r7, #32
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	40023800 	.word	0x40023800
 8000834:	40020000 	.word	0x40020000

08000838 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800083c:	b672      	cpsid	i
}
 800083e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000840:	e7fe      	b.n	8000840 <Error_Handler+0x8>
	...

08000844 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	607b      	str	r3, [r7, #4]
 800084e:	4b10      	ldr	r3, [pc, #64]	; (8000890 <HAL_MspInit+0x4c>)
 8000850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000852:	4a0f      	ldr	r2, [pc, #60]	; (8000890 <HAL_MspInit+0x4c>)
 8000854:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000858:	6453      	str	r3, [r2, #68]	; 0x44
 800085a:	4b0d      	ldr	r3, [pc, #52]	; (8000890 <HAL_MspInit+0x4c>)
 800085c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800085e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	603b      	str	r3, [r7, #0]
 800086a:	4b09      	ldr	r3, [pc, #36]	; (8000890 <HAL_MspInit+0x4c>)
 800086c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800086e:	4a08      	ldr	r2, [pc, #32]	; (8000890 <HAL_MspInit+0x4c>)
 8000870:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000874:	6413      	str	r3, [r2, #64]	; 0x40
 8000876:	4b06      	ldr	r3, [pc, #24]	; (8000890 <HAL_MspInit+0x4c>)
 8000878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800087a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800087e:	603b      	str	r3, [r7, #0]
 8000880:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000882:	2007      	movs	r0, #7
 8000884:	f000 fa8a 	bl	8000d9c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000888:	bf00      	nop
 800088a:	3708      	adds	r7, #8
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	40023800 	.word	0x40023800

08000894 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b08a      	sub	sp, #40	; 0x28
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800089c:	f107 0314 	add.w	r3, r7, #20
 80008a0:	2200      	movs	r2, #0
 80008a2:	601a      	str	r2, [r3, #0]
 80008a4:	605a      	str	r2, [r3, #4]
 80008a6:	609a      	str	r2, [r3, #8]
 80008a8:	60da      	str	r2, [r3, #12]
 80008aa:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80008b4:	d151      	bne.n	800095a <HAL_TIM_Encoder_MspInit+0xc6>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	613b      	str	r3, [r7, #16]
 80008ba:	4b2a      	ldr	r3, [pc, #168]	; (8000964 <HAL_TIM_Encoder_MspInit+0xd0>)
 80008bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008be:	4a29      	ldr	r2, [pc, #164]	; (8000964 <HAL_TIM_Encoder_MspInit+0xd0>)
 80008c0:	f043 0301 	orr.w	r3, r3, #1
 80008c4:	6413      	str	r3, [r2, #64]	; 0x40
 80008c6:	4b27      	ldr	r3, [pc, #156]	; (8000964 <HAL_TIM_Encoder_MspInit+0xd0>)
 80008c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ca:	f003 0301 	and.w	r3, r3, #1
 80008ce:	613b      	str	r3, [r7, #16]
 80008d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	60fb      	str	r3, [r7, #12]
 80008d6:	4b23      	ldr	r3, [pc, #140]	; (8000964 <HAL_TIM_Encoder_MspInit+0xd0>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	4a22      	ldr	r2, [pc, #136]	; (8000964 <HAL_TIM_Encoder_MspInit+0xd0>)
 80008dc:	f043 0301 	orr.w	r3, r3, #1
 80008e0:	6313      	str	r3, [r2, #48]	; 0x30
 80008e2:	4b20      	ldr	r3, [pc, #128]	; (8000964 <HAL_TIM_Encoder_MspInit+0xd0>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	f003 0301 	and.w	r3, r3, #1
 80008ea:	60fb      	str	r3, [r7, #12]
 80008ec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	60bb      	str	r3, [r7, #8]
 80008f2:	4b1c      	ldr	r3, [pc, #112]	; (8000964 <HAL_TIM_Encoder_MspInit+0xd0>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	4a1b      	ldr	r2, [pc, #108]	; (8000964 <HAL_TIM_Encoder_MspInit+0xd0>)
 80008f8:	f043 0302 	orr.w	r3, r3, #2
 80008fc:	6313      	str	r3, [r2, #48]	; 0x30
 80008fe:	4b19      	ldr	r3, [pc, #100]	; (8000964 <HAL_TIM_Encoder_MspInit+0xd0>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	f003 0302 	and.w	r3, r3, #2
 8000906:	60bb      	str	r3, [r7, #8]
 8000908:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800090a:	2320      	movs	r3, #32
 800090c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090e:	2302      	movs	r3, #2
 8000910:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000916:	2300      	movs	r3, #0
 8000918:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800091a:	2301      	movs	r3, #1
 800091c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800091e:	f107 0314 	add.w	r3, r7, #20
 8000922:	4619      	mov	r1, r3
 8000924:	4810      	ldr	r0, [pc, #64]	; (8000968 <HAL_TIM_Encoder_MspInit+0xd4>)
 8000926:	f000 fa7b 	bl	8000e20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800092a:	2308      	movs	r3, #8
 800092c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092e:	2302      	movs	r3, #2
 8000930:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000936:	2300      	movs	r3, #0
 8000938:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800093a:	2301      	movs	r3, #1
 800093c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800093e:	f107 0314 	add.w	r3, r7, #20
 8000942:	4619      	mov	r1, r3
 8000944:	4809      	ldr	r0, [pc, #36]	; (800096c <HAL_TIM_Encoder_MspInit+0xd8>)
 8000946:	f000 fa6b 	bl	8000e20 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800094a:	2200      	movs	r2, #0
 800094c:	2100      	movs	r1, #0
 800094e:	201c      	movs	r0, #28
 8000950:	f000 fa2f 	bl	8000db2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000954:	201c      	movs	r0, #28
 8000956:	f000 fa48 	bl	8000dea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800095a:	bf00      	nop
 800095c:	3728      	adds	r7, #40	; 0x28
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40023800 	.word	0x40023800
 8000968:	40020000 	.word	0x40020000
 800096c:	40020400 	.word	0x40020400

08000970 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000974:	e7fe      	b.n	8000974 <NMI_Handler+0x4>

08000976 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000976:	b480      	push	{r7}
 8000978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800097a:	e7fe      	b.n	800097a <HardFault_Handler+0x4>

0800097c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000980:	e7fe      	b.n	8000980 <MemManage_Handler+0x4>

08000982 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000982:	b480      	push	{r7}
 8000984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000986:	e7fe      	b.n	8000986 <BusFault_Handler+0x4>

08000988 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800098c:	e7fe      	b.n	800098c <UsageFault_Handler+0x4>

0800098e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800098e:	b480      	push	{r7}
 8000990:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000992:	bf00      	nop
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr

0800099c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009a0:	bf00      	nop
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr

080009aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009aa:	b480      	push	{r7}
 80009ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ae:	bf00      	nop
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr

080009b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009bc:	f000 f8da 	bl	8000b74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009c0:	bf00      	nop
 80009c2:	bd80      	pop	{r7, pc}

080009c4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80009c8:	4802      	ldr	r0, [pc, #8]	; (80009d4 <TIM2_IRQHandler+0x10>)
 80009ca:	f002 fbd1 	bl	8003170 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	20000168 	.word	0x20000168

080009d8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80009dc:	4802      	ldr	r0, [pc, #8]	; (80009e8 <OTG_FS_IRQHandler+0x10>)
 80009de:	f000 fd17 	bl	8001410 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80009e2:	bf00      	nop
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	20001698 	.word	0x20001698

080009ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b086      	sub	sp, #24
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009f4:	4a14      	ldr	r2, [pc, #80]	; (8000a48 <_sbrk+0x5c>)
 80009f6:	4b15      	ldr	r3, [pc, #84]	; (8000a4c <_sbrk+0x60>)
 80009f8:	1ad3      	subs	r3, r2, r3
 80009fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009fc:	697b      	ldr	r3, [r7, #20]
 80009fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a00:	4b13      	ldr	r3, [pc, #76]	; (8000a50 <_sbrk+0x64>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d102      	bne.n	8000a0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a08:	4b11      	ldr	r3, [pc, #68]	; (8000a50 <_sbrk+0x64>)
 8000a0a:	4a12      	ldr	r2, [pc, #72]	; (8000a54 <_sbrk+0x68>)
 8000a0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a0e:	4b10      	ldr	r3, [pc, #64]	; (8000a50 <_sbrk+0x64>)
 8000a10:	681a      	ldr	r2, [r3, #0]
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	4413      	add	r3, r2
 8000a16:	693a      	ldr	r2, [r7, #16]
 8000a18:	429a      	cmp	r2, r3
 8000a1a:	d207      	bcs.n	8000a2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a1c:	f006 fe7e 	bl	800771c <__errno>
 8000a20:	4603      	mov	r3, r0
 8000a22:	220c      	movs	r2, #12
 8000a24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a26:	f04f 33ff 	mov.w	r3, #4294967295
 8000a2a:	e009      	b.n	8000a40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a2c:	4b08      	ldr	r3, [pc, #32]	; (8000a50 <_sbrk+0x64>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a32:	4b07      	ldr	r3, [pc, #28]	; (8000a50 <_sbrk+0x64>)
 8000a34:	681a      	ldr	r2, [r3, #0]
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	4413      	add	r3, r2
 8000a3a:	4a05      	ldr	r2, [pc, #20]	; (8000a50 <_sbrk+0x64>)
 8000a3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a3e:	68fb      	ldr	r3, [r7, #12]
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	3718      	adds	r7, #24
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	20020000 	.word	0x20020000
 8000a4c:	00000400 	.word	0x00000400
 8000a50:	200001b0 	.word	0x200001b0
 8000a54:	20001ee8 	.word	0x20001ee8

08000a58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a5c:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <SystemInit+0x20>)
 8000a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a62:	4a05      	ldr	r2, [pc, #20]	; (8000a78 <SystemInit+0x20>)
 8000a64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a6c:	bf00      	nop
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	e000ed00 	.word	0xe000ed00

08000a7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ab4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000a80:	f7ff ffea 	bl	8000a58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a84:	480c      	ldr	r0, [pc, #48]	; (8000ab8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a86:	490d      	ldr	r1, [pc, #52]	; (8000abc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a88:	4a0d      	ldr	r2, [pc, #52]	; (8000ac0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a8c:	e002      	b.n	8000a94 <LoopCopyDataInit>

08000a8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a92:	3304      	adds	r3, #4

08000a94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a98:	d3f9      	bcc.n	8000a8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a9a:	4a0a      	ldr	r2, [pc, #40]	; (8000ac4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a9c:	4c0a      	ldr	r4, [pc, #40]	; (8000ac8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000aa0:	e001      	b.n	8000aa6 <LoopFillZerobss>

08000aa2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aa2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aa4:	3204      	adds	r2, #4

08000aa6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aa6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aa8:	d3fb      	bcc.n	8000aa2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000aaa:	f006 fe3d 	bl	8007728 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000aae:	f7ff fd65 	bl	800057c <main>
  bx  lr    
 8000ab2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ab4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ab8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000abc:	2000014c 	.word	0x2000014c
  ldr r2, =_sidata
 8000ac0:	08008128 	.word	0x08008128
  ldr r2, =_sbss
 8000ac4:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 8000ac8:	20001ee4 	.word	0x20001ee4

08000acc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000acc:	e7fe      	b.n	8000acc <ADC_IRQHandler>
	...

08000ad0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ad4:	4b0e      	ldr	r3, [pc, #56]	; (8000b10 <HAL_Init+0x40>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a0d      	ldr	r2, [pc, #52]	; (8000b10 <HAL_Init+0x40>)
 8000ada:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ade:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ae0:	4b0b      	ldr	r3, [pc, #44]	; (8000b10 <HAL_Init+0x40>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a0a      	ldr	r2, [pc, #40]	; (8000b10 <HAL_Init+0x40>)
 8000ae6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000aea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000aec:	4b08      	ldr	r3, [pc, #32]	; (8000b10 <HAL_Init+0x40>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a07      	ldr	r2, [pc, #28]	; (8000b10 <HAL_Init+0x40>)
 8000af2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000af6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000af8:	2003      	movs	r0, #3
 8000afa:	f000 f94f 	bl	8000d9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000afe:	2000      	movs	r0, #0
 8000b00:	f000 f808 	bl	8000b14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b04:	f7ff fe9e 	bl	8000844 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b08:	2300      	movs	r3, #0
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	40023c00 	.word	0x40023c00

08000b14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b1c:	4b12      	ldr	r3, [pc, #72]	; (8000b68 <HAL_InitTick+0x54>)
 8000b1e:	681a      	ldr	r2, [r3, #0]
 8000b20:	4b12      	ldr	r3, [pc, #72]	; (8000b6c <HAL_InitTick+0x58>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	4619      	mov	r1, r3
 8000b26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b32:	4618      	mov	r0, r3
 8000b34:	f000 f967 	bl	8000e06 <HAL_SYSTICK_Config>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	e00e      	b.n	8000b60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	2b0f      	cmp	r3, #15
 8000b46:	d80a      	bhi.n	8000b5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	6879      	ldr	r1, [r7, #4]
 8000b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b50:	f000 f92f 	bl	8000db2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b54:	4a06      	ldr	r2, [pc, #24]	; (8000b70 <HAL_InitTick+0x5c>)
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	e000      	b.n	8000b60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b5e:	2301      	movs	r3, #1
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	3708      	adds	r7, #8
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	20000000 	.word	0x20000000
 8000b6c:	20000008 	.word	0x20000008
 8000b70:	20000004 	.word	0x20000004

08000b74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b78:	4b06      	ldr	r3, [pc, #24]	; (8000b94 <HAL_IncTick+0x20>)
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	461a      	mov	r2, r3
 8000b7e:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <HAL_IncTick+0x24>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4413      	add	r3, r2
 8000b84:	4a04      	ldr	r2, [pc, #16]	; (8000b98 <HAL_IncTick+0x24>)
 8000b86:	6013      	str	r3, [r2, #0]
}
 8000b88:	bf00      	nop
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	20000008 	.word	0x20000008
 8000b98:	200001b4 	.word	0x200001b4

08000b9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000ba0:	4b03      	ldr	r3, [pc, #12]	; (8000bb0 <HAL_GetTick+0x14>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	200001b4 	.word	0x200001b4

08000bb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b084      	sub	sp, #16
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bbc:	f7ff ffee 	bl	8000b9c <HAL_GetTick>
 8000bc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bcc:	d005      	beq.n	8000bda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bce:	4b0a      	ldr	r3, [pc, #40]	; (8000bf8 <HAL_Delay+0x44>)
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	461a      	mov	r2, r3
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	4413      	add	r3, r2
 8000bd8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000bda:	bf00      	nop
 8000bdc:	f7ff ffde 	bl	8000b9c <HAL_GetTick>
 8000be0:	4602      	mov	r2, r0
 8000be2:	68bb      	ldr	r3, [r7, #8]
 8000be4:	1ad3      	subs	r3, r2, r3
 8000be6:	68fa      	ldr	r2, [r7, #12]
 8000be8:	429a      	cmp	r2, r3
 8000bea:	d8f7      	bhi.n	8000bdc <HAL_Delay+0x28>
  {
  }
}
 8000bec:	bf00      	nop
 8000bee:	bf00      	nop
 8000bf0:	3710      	adds	r7, #16
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	20000008 	.word	0x20000008

08000bfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b085      	sub	sp, #20
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	f003 0307 	and.w	r3, r3, #7
 8000c0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c0c:	4b0c      	ldr	r3, [pc, #48]	; (8000c40 <__NVIC_SetPriorityGrouping+0x44>)
 8000c0e:	68db      	ldr	r3, [r3, #12]
 8000c10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c12:	68ba      	ldr	r2, [r7, #8]
 8000c14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c18:	4013      	ands	r3, r2
 8000c1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c2e:	4a04      	ldr	r2, [pc, #16]	; (8000c40 <__NVIC_SetPriorityGrouping+0x44>)
 8000c30:	68bb      	ldr	r3, [r7, #8]
 8000c32:	60d3      	str	r3, [r2, #12]
}
 8000c34:	bf00      	nop
 8000c36:	3714      	adds	r7, #20
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr
 8000c40:	e000ed00 	.word	0xe000ed00

08000c44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c48:	4b04      	ldr	r3, [pc, #16]	; (8000c5c <__NVIC_GetPriorityGrouping+0x18>)
 8000c4a:	68db      	ldr	r3, [r3, #12]
 8000c4c:	0a1b      	lsrs	r3, r3, #8
 8000c4e:	f003 0307 	and.w	r3, r3, #7
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr
 8000c5c:	e000ed00 	.word	0xe000ed00

08000c60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	4603      	mov	r3, r0
 8000c68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	db0b      	blt.n	8000c8a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c72:	79fb      	ldrb	r3, [r7, #7]
 8000c74:	f003 021f 	and.w	r2, r3, #31
 8000c78:	4907      	ldr	r1, [pc, #28]	; (8000c98 <__NVIC_EnableIRQ+0x38>)
 8000c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7e:	095b      	lsrs	r3, r3, #5
 8000c80:	2001      	movs	r0, #1
 8000c82:	fa00 f202 	lsl.w	r2, r0, r2
 8000c86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c8a:	bf00      	nop
 8000c8c:	370c      	adds	r7, #12
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	e000e100 	.word	0xe000e100

08000c9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	6039      	str	r1, [r7, #0]
 8000ca6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ca8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	db0a      	blt.n	8000cc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	b2da      	uxtb	r2, r3
 8000cb4:	490c      	ldr	r1, [pc, #48]	; (8000ce8 <__NVIC_SetPriority+0x4c>)
 8000cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cba:	0112      	lsls	r2, r2, #4
 8000cbc:	b2d2      	uxtb	r2, r2
 8000cbe:	440b      	add	r3, r1
 8000cc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cc4:	e00a      	b.n	8000cdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	b2da      	uxtb	r2, r3
 8000cca:	4908      	ldr	r1, [pc, #32]	; (8000cec <__NVIC_SetPriority+0x50>)
 8000ccc:	79fb      	ldrb	r3, [r7, #7]
 8000cce:	f003 030f 	and.w	r3, r3, #15
 8000cd2:	3b04      	subs	r3, #4
 8000cd4:	0112      	lsls	r2, r2, #4
 8000cd6:	b2d2      	uxtb	r2, r2
 8000cd8:	440b      	add	r3, r1
 8000cda:	761a      	strb	r2, [r3, #24]
}
 8000cdc:	bf00      	nop
 8000cde:	370c      	adds	r7, #12
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr
 8000ce8:	e000e100 	.word	0xe000e100
 8000cec:	e000ed00 	.word	0xe000ed00

08000cf0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b089      	sub	sp, #36	; 0x24
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	60f8      	str	r0, [r7, #12]
 8000cf8:	60b9      	str	r1, [r7, #8]
 8000cfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	f003 0307 	and.w	r3, r3, #7
 8000d02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d04:	69fb      	ldr	r3, [r7, #28]
 8000d06:	f1c3 0307 	rsb	r3, r3, #7
 8000d0a:	2b04      	cmp	r3, #4
 8000d0c:	bf28      	it	cs
 8000d0e:	2304      	movcs	r3, #4
 8000d10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	3304      	adds	r3, #4
 8000d16:	2b06      	cmp	r3, #6
 8000d18:	d902      	bls.n	8000d20 <NVIC_EncodePriority+0x30>
 8000d1a:	69fb      	ldr	r3, [r7, #28]
 8000d1c:	3b03      	subs	r3, #3
 8000d1e:	e000      	b.n	8000d22 <NVIC_EncodePriority+0x32>
 8000d20:	2300      	movs	r3, #0
 8000d22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d24:	f04f 32ff 	mov.w	r2, #4294967295
 8000d28:	69bb      	ldr	r3, [r7, #24]
 8000d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2e:	43da      	mvns	r2, r3
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	401a      	ands	r2, r3
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d38:	f04f 31ff 	mov.w	r1, #4294967295
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d42:	43d9      	mvns	r1, r3
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d48:	4313      	orrs	r3, r2
         );
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3724      	adds	r7, #36	; 0x24
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
	...

08000d58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	3b01      	subs	r3, #1
 8000d64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d68:	d301      	bcc.n	8000d6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	e00f      	b.n	8000d8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d6e:	4a0a      	ldr	r2, [pc, #40]	; (8000d98 <SysTick_Config+0x40>)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	3b01      	subs	r3, #1
 8000d74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d76:	210f      	movs	r1, #15
 8000d78:	f04f 30ff 	mov.w	r0, #4294967295
 8000d7c:	f7ff ff8e 	bl	8000c9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d80:	4b05      	ldr	r3, [pc, #20]	; (8000d98 <SysTick_Config+0x40>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d86:	4b04      	ldr	r3, [pc, #16]	; (8000d98 <SysTick_Config+0x40>)
 8000d88:	2207      	movs	r2, #7
 8000d8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d8c:	2300      	movs	r3, #0
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	e000e010 	.word	0xe000e010

08000d9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000da4:	6878      	ldr	r0, [r7, #4]
 8000da6:	f7ff ff29 	bl	8000bfc <__NVIC_SetPriorityGrouping>
}
 8000daa:	bf00      	nop
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}

08000db2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000db2:	b580      	push	{r7, lr}
 8000db4:	b086      	sub	sp, #24
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	4603      	mov	r3, r0
 8000dba:	60b9      	str	r1, [r7, #8]
 8000dbc:	607a      	str	r2, [r7, #4]
 8000dbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dc4:	f7ff ff3e 	bl	8000c44 <__NVIC_GetPriorityGrouping>
 8000dc8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dca:	687a      	ldr	r2, [r7, #4]
 8000dcc:	68b9      	ldr	r1, [r7, #8]
 8000dce:	6978      	ldr	r0, [r7, #20]
 8000dd0:	f7ff ff8e 	bl	8000cf0 <NVIC_EncodePriority>
 8000dd4:	4602      	mov	r2, r0
 8000dd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dda:	4611      	mov	r1, r2
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f7ff ff5d 	bl	8000c9c <__NVIC_SetPriority>
}
 8000de2:	bf00      	nop
 8000de4:	3718      	adds	r7, #24
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}

08000dea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dea:	b580      	push	{r7, lr}
 8000dec:	b082      	sub	sp, #8
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	4603      	mov	r3, r0
 8000df2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000df4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f7ff ff31 	bl	8000c60 <__NVIC_EnableIRQ>
}
 8000dfe:	bf00      	nop
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}

08000e06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e06:	b580      	push	{r7, lr}
 8000e08:	b082      	sub	sp, #8
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e0e:	6878      	ldr	r0, [r7, #4]
 8000e10:	f7ff ffa2 	bl	8000d58 <SysTick_Config>
 8000e14:	4603      	mov	r3, r0
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3708      	adds	r7, #8
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
	...

08000e20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b089      	sub	sp, #36	; 0x24
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e32:	2300      	movs	r3, #0
 8000e34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e36:	2300      	movs	r3, #0
 8000e38:	61fb      	str	r3, [r7, #28]
 8000e3a:	e16b      	b.n	8001114 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	fa02 f303 	lsl.w	r3, r2, r3
 8000e44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	697a      	ldr	r2, [r7, #20]
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e50:	693a      	ldr	r2, [r7, #16]
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	429a      	cmp	r2, r3
 8000e56:	f040 815a 	bne.w	800110e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	f003 0303 	and.w	r3, r3, #3
 8000e62:	2b01      	cmp	r3, #1
 8000e64:	d005      	beq.n	8000e72 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e6e:	2b02      	cmp	r3, #2
 8000e70:	d130      	bne.n	8000ed4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	689b      	ldr	r3, [r3, #8]
 8000e76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	005b      	lsls	r3, r3, #1
 8000e7c:	2203      	movs	r2, #3
 8000e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e82:	43db      	mvns	r3, r3
 8000e84:	69ba      	ldr	r2, [r7, #24]
 8000e86:	4013      	ands	r3, r2
 8000e88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	68da      	ldr	r2, [r3, #12]
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	005b      	lsls	r3, r3, #1
 8000e92:	fa02 f303 	lsl.w	r3, r2, r3
 8000e96:	69ba      	ldr	r2, [r7, #24]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	69ba      	ldr	r2, [r7, #24]
 8000ea0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb0:	43db      	mvns	r3, r3
 8000eb2:	69ba      	ldr	r2, [r7, #24]
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	091b      	lsrs	r3, r3, #4
 8000ebe:	f003 0201 	and.w	r2, r3, #1
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec8:	69ba      	ldr	r2, [r7, #24]
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	69ba      	ldr	r2, [r7, #24]
 8000ed2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	f003 0303 	and.w	r3, r3, #3
 8000edc:	2b03      	cmp	r3, #3
 8000ede:	d017      	beq.n	8000f10 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	68db      	ldr	r3, [r3, #12]
 8000ee4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	005b      	lsls	r3, r3, #1
 8000eea:	2203      	movs	r2, #3
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	43db      	mvns	r3, r3
 8000ef2:	69ba      	ldr	r2, [r7, #24]
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	689a      	ldr	r2, [r3, #8]
 8000efc:	69fb      	ldr	r3, [r7, #28]
 8000efe:	005b      	lsls	r3, r3, #1
 8000f00:	fa02 f303 	lsl.w	r3, r2, r3
 8000f04:	69ba      	ldr	r2, [r7, #24]
 8000f06:	4313      	orrs	r3, r2
 8000f08:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	69ba      	ldr	r2, [r7, #24]
 8000f0e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	f003 0303 	and.w	r3, r3, #3
 8000f18:	2b02      	cmp	r3, #2
 8000f1a:	d123      	bne.n	8000f64 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	08da      	lsrs	r2, r3, #3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	3208      	adds	r2, #8
 8000f24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f28:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	f003 0307 	and.w	r3, r3, #7
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	220f      	movs	r2, #15
 8000f34:	fa02 f303 	lsl.w	r3, r2, r3
 8000f38:	43db      	mvns	r3, r3
 8000f3a:	69ba      	ldr	r2, [r7, #24]
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	691a      	ldr	r2, [r3, #16]
 8000f44:	69fb      	ldr	r3, [r7, #28]
 8000f46:	f003 0307 	and.w	r3, r3, #7
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f50:	69ba      	ldr	r2, [r7, #24]
 8000f52:	4313      	orrs	r3, r2
 8000f54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	08da      	lsrs	r2, r3, #3
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	3208      	adds	r2, #8
 8000f5e:	69b9      	ldr	r1, [r7, #24]
 8000f60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	005b      	lsls	r3, r3, #1
 8000f6e:	2203      	movs	r2, #3
 8000f70:	fa02 f303 	lsl.w	r3, r2, r3
 8000f74:	43db      	mvns	r3, r3
 8000f76:	69ba      	ldr	r2, [r7, #24]
 8000f78:	4013      	ands	r3, r2
 8000f7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f003 0203 	and.w	r2, r3, #3
 8000f84:	69fb      	ldr	r3, [r7, #28]
 8000f86:	005b      	lsls	r3, r3, #1
 8000f88:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	f000 80b4 	beq.w	800110e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	60fb      	str	r3, [r7, #12]
 8000faa:	4b60      	ldr	r3, [pc, #384]	; (800112c <HAL_GPIO_Init+0x30c>)
 8000fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fae:	4a5f      	ldr	r2, [pc, #380]	; (800112c <HAL_GPIO_Init+0x30c>)
 8000fb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fb4:	6453      	str	r3, [r2, #68]	; 0x44
 8000fb6:	4b5d      	ldr	r3, [pc, #372]	; (800112c <HAL_GPIO_Init+0x30c>)
 8000fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fbe:	60fb      	str	r3, [r7, #12]
 8000fc0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fc2:	4a5b      	ldr	r2, [pc, #364]	; (8001130 <HAL_GPIO_Init+0x310>)
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	089b      	lsrs	r3, r3, #2
 8000fc8:	3302      	adds	r3, #2
 8000fca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	f003 0303 	and.w	r3, r3, #3
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	220f      	movs	r2, #15
 8000fda:	fa02 f303 	lsl.w	r3, r2, r3
 8000fde:	43db      	mvns	r3, r3
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4a52      	ldr	r2, [pc, #328]	; (8001134 <HAL_GPIO_Init+0x314>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d02b      	beq.n	8001046 <HAL_GPIO_Init+0x226>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4a51      	ldr	r2, [pc, #324]	; (8001138 <HAL_GPIO_Init+0x318>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d025      	beq.n	8001042 <HAL_GPIO_Init+0x222>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4a50      	ldr	r2, [pc, #320]	; (800113c <HAL_GPIO_Init+0x31c>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d01f      	beq.n	800103e <HAL_GPIO_Init+0x21e>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4a4f      	ldr	r2, [pc, #316]	; (8001140 <HAL_GPIO_Init+0x320>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d019      	beq.n	800103a <HAL_GPIO_Init+0x21a>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4a4e      	ldr	r2, [pc, #312]	; (8001144 <HAL_GPIO_Init+0x324>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d013      	beq.n	8001036 <HAL_GPIO_Init+0x216>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a4d      	ldr	r2, [pc, #308]	; (8001148 <HAL_GPIO_Init+0x328>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d00d      	beq.n	8001032 <HAL_GPIO_Init+0x212>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4a4c      	ldr	r2, [pc, #304]	; (800114c <HAL_GPIO_Init+0x32c>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d007      	beq.n	800102e <HAL_GPIO_Init+0x20e>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a4b      	ldr	r2, [pc, #300]	; (8001150 <HAL_GPIO_Init+0x330>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d101      	bne.n	800102a <HAL_GPIO_Init+0x20a>
 8001026:	2307      	movs	r3, #7
 8001028:	e00e      	b.n	8001048 <HAL_GPIO_Init+0x228>
 800102a:	2308      	movs	r3, #8
 800102c:	e00c      	b.n	8001048 <HAL_GPIO_Init+0x228>
 800102e:	2306      	movs	r3, #6
 8001030:	e00a      	b.n	8001048 <HAL_GPIO_Init+0x228>
 8001032:	2305      	movs	r3, #5
 8001034:	e008      	b.n	8001048 <HAL_GPIO_Init+0x228>
 8001036:	2304      	movs	r3, #4
 8001038:	e006      	b.n	8001048 <HAL_GPIO_Init+0x228>
 800103a:	2303      	movs	r3, #3
 800103c:	e004      	b.n	8001048 <HAL_GPIO_Init+0x228>
 800103e:	2302      	movs	r3, #2
 8001040:	e002      	b.n	8001048 <HAL_GPIO_Init+0x228>
 8001042:	2301      	movs	r3, #1
 8001044:	e000      	b.n	8001048 <HAL_GPIO_Init+0x228>
 8001046:	2300      	movs	r3, #0
 8001048:	69fa      	ldr	r2, [r7, #28]
 800104a:	f002 0203 	and.w	r2, r2, #3
 800104e:	0092      	lsls	r2, r2, #2
 8001050:	4093      	lsls	r3, r2
 8001052:	69ba      	ldr	r2, [r7, #24]
 8001054:	4313      	orrs	r3, r2
 8001056:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001058:	4935      	ldr	r1, [pc, #212]	; (8001130 <HAL_GPIO_Init+0x310>)
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	089b      	lsrs	r3, r3, #2
 800105e:	3302      	adds	r3, #2
 8001060:	69ba      	ldr	r2, [r7, #24]
 8001062:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001066:	4b3b      	ldr	r3, [pc, #236]	; (8001154 <HAL_GPIO_Init+0x334>)
 8001068:	689b      	ldr	r3, [r3, #8]
 800106a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800106c:	693b      	ldr	r3, [r7, #16]
 800106e:	43db      	mvns	r3, r3
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	4013      	ands	r3, r2
 8001074:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800107e:	2b00      	cmp	r3, #0
 8001080:	d003      	beq.n	800108a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001082:	69ba      	ldr	r2, [r7, #24]
 8001084:	693b      	ldr	r3, [r7, #16]
 8001086:	4313      	orrs	r3, r2
 8001088:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800108a:	4a32      	ldr	r2, [pc, #200]	; (8001154 <HAL_GPIO_Init+0x334>)
 800108c:	69bb      	ldr	r3, [r7, #24]
 800108e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001090:	4b30      	ldr	r3, [pc, #192]	; (8001154 <HAL_GPIO_Init+0x334>)
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	43db      	mvns	r3, r3
 800109a:	69ba      	ldr	r2, [r7, #24]
 800109c:	4013      	ands	r3, r2
 800109e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d003      	beq.n	80010b4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010b4:	4a27      	ldr	r2, [pc, #156]	; (8001154 <HAL_GPIO_Init+0x334>)
 80010b6:	69bb      	ldr	r3, [r7, #24]
 80010b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010ba:	4b26      	ldr	r3, [pc, #152]	; (8001154 <HAL_GPIO_Init+0x334>)
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	43db      	mvns	r3, r3
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	4013      	ands	r3, r2
 80010c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d003      	beq.n	80010de <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	4313      	orrs	r3, r2
 80010dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010de:	4a1d      	ldr	r2, [pc, #116]	; (8001154 <HAL_GPIO_Init+0x334>)
 80010e0:	69bb      	ldr	r3, [r7, #24]
 80010e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010e4:	4b1b      	ldr	r3, [pc, #108]	; (8001154 <HAL_GPIO_Init+0x334>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	43db      	mvns	r3, r3
 80010ee:	69ba      	ldr	r2, [r7, #24]
 80010f0:	4013      	ands	r3, r2
 80010f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d003      	beq.n	8001108 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	4313      	orrs	r3, r2
 8001106:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001108:	4a12      	ldr	r2, [pc, #72]	; (8001154 <HAL_GPIO_Init+0x334>)
 800110a:	69bb      	ldr	r3, [r7, #24]
 800110c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	3301      	adds	r3, #1
 8001112:	61fb      	str	r3, [r7, #28]
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	2b0f      	cmp	r3, #15
 8001118:	f67f ae90 	bls.w	8000e3c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800111c:	bf00      	nop
 800111e:	bf00      	nop
 8001120:	3724      	adds	r7, #36	; 0x24
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	40023800 	.word	0x40023800
 8001130:	40013800 	.word	0x40013800
 8001134:	40020000 	.word	0x40020000
 8001138:	40020400 	.word	0x40020400
 800113c:	40020800 	.word	0x40020800
 8001140:	40020c00 	.word	0x40020c00
 8001144:	40021000 	.word	0x40021000
 8001148:	40021400 	.word	0x40021400
 800114c:	40021800 	.word	0x40021800
 8001150:	40021c00 	.word	0x40021c00
 8001154:	40013c00 	.word	0x40013c00

08001158 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001158:	b480      	push	{r7}
 800115a:	b085      	sub	sp, #20
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	460b      	mov	r3, r1
 8001162:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	691a      	ldr	r2, [r3, #16]
 8001168:	887b      	ldrh	r3, [r7, #2]
 800116a:	4013      	ands	r3, r2
 800116c:	2b00      	cmp	r3, #0
 800116e:	d002      	beq.n	8001176 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001170:	2301      	movs	r3, #1
 8001172:	73fb      	strb	r3, [r7, #15]
 8001174:	e001      	b.n	800117a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001176:	2300      	movs	r3, #0
 8001178:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800117a:	7bfb      	ldrb	r3, [r7, #15]
}
 800117c:	4618      	mov	r0, r3
 800117e:	3714      	adds	r7, #20
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr

08001188 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b086      	sub	sp, #24
 800118c:	af02      	add	r7, sp, #8
 800118e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d101      	bne.n	800119a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	e101      	b.n	800139e <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d106      	bne.n	80011ba <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2200      	movs	r2, #0
 80011b0:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	f005 ff75 	bl	80070a4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2203      	movs	r2, #3
 80011be:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80011c2:	68bb      	ldr	r3, [r7, #8]
 80011c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80011c8:	d102      	bne.n	80011d0 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2200      	movs	r2, #0
 80011ce:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4618      	mov	r0, r3
 80011d6:	f002 fb66 	bl	80038a6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6818      	ldr	r0, [r3, #0]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	7c1a      	ldrb	r2, [r3, #16]
 80011e2:	f88d 2000 	strb.w	r2, [sp]
 80011e6:	3304      	adds	r3, #4
 80011e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011ea:	f002 fa45 	bl	8003678 <USB_CoreInit>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d005      	beq.n	8001200 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2202      	movs	r2, #2
 80011f8:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80011fc:	2301      	movs	r3, #1
 80011fe:	e0ce      	b.n	800139e <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	2100      	movs	r1, #0
 8001206:	4618      	mov	r0, r3
 8001208:	f002 fb5e 	bl	80038c8 <USB_SetCurrentMode>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d005      	beq.n	800121e <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2202      	movs	r2, #2
 8001216:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 800121a:	2301      	movs	r3, #1
 800121c:	e0bf      	b.n	800139e <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800121e:	2300      	movs	r3, #0
 8001220:	73fb      	strb	r3, [r7, #15]
 8001222:	e04a      	b.n	80012ba <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001224:	7bfa      	ldrb	r2, [r7, #15]
 8001226:	6879      	ldr	r1, [r7, #4]
 8001228:	4613      	mov	r3, r2
 800122a:	00db      	lsls	r3, r3, #3
 800122c:	4413      	add	r3, r2
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	440b      	add	r3, r1
 8001232:	3315      	adds	r3, #21
 8001234:	2201      	movs	r2, #1
 8001236:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001238:	7bfa      	ldrb	r2, [r7, #15]
 800123a:	6879      	ldr	r1, [r7, #4]
 800123c:	4613      	mov	r3, r2
 800123e:	00db      	lsls	r3, r3, #3
 8001240:	4413      	add	r3, r2
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	440b      	add	r3, r1
 8001246:	3314      	adds	r3, #20
 8001248:	7bfa      	ldrb	r2, [r7, #15]
 800124a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800124c:	7bfa      	ldrb	r2, [r7, #15]
 800124e:	7bfb      	ldrb	r3, [r7, #15]
 8001250:	b298      	uxth	r0, r3
 8001252:	6879      	ldr	r1, [r7, #4]
 8001254:	4613      	mov	r3, r2
 8001256:	00db      	lsls	r3, r3, #3
 8001258:	4413      	add	r3, r2
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	440b      	add	r3, r1
 800125e:	332e      	adds	r3, #46	; 0x2e
 8001260:	4602      	mov	r2, r0
 8001262:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001264:	7bfa      	ldrb	r2, [r7, #15]
 8001266:	6879      	ldr	r1, [r7, #4]
 8001268:	4613      	mov	r3, r2
 800126a:	00db      	lsls	r3, r3, #3
 800126c:	4413      	add	r3, r2
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	440b      	add	r3, r1
 8001272:	3318      	adds	r3, #24
 8001274:	2200      	movs	r2, #0
 8001276:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001278:	7bfa      	ldrb	r2, [r7, #15]
 800127a:	6879      	ldr	r1, [r7, #4]
 800127c:	4613      	mov	r3, r2
 800127e:	00db      	lsls	r3, r3, #3
 8001280:	4413      	add	r3, r2
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	440b      	add	r3, r1
 8001286:	331c      	adds	r3, #28
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800128c:	7bfa      	ldrb	r2, [r7, #15]
 800128e:	6879      	ldr	r1, [r7, #4]
 8001290:	4613      	mov	r3, r2
 8001292:	00db      	lsls	r3, r3, #3
 8001294:	4413      	add	r3, r2
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	440b      	add	r3, r1
 800129a:	3320      	adds	r3, #32
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80012a0:	7bfa      	ldrb	r2, [r7, #15]
 80012a2:	6879      	ldr	r1, [r7, #4]
 80012a4:	4613      	mov	r3, r2
 80012a6:	00db      	lsls	r3, r3, #3
 80012a8:	4413      	add	r3, r2
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	440b      	add	r3, r1
 80012ae:	3324      	adds	r3, #36	; 0x24
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012b4:	7bfb      	ldrb	r3, [r7, #15]
 80012b6:	3301      	adds	r3, #1
 80012b8:	73fb      	strb	r3, [r7, #15]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	791b      	ldrb	r3, [r3, #4]
 80012be:	7bfa      	ldrb	r2, [r7, #15]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	d3af      	bcc.n	8001224 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012c4:	2300      	movs	r3, #0
 80012c6:	73fb      	strb	r3, [r7, #15]
 80012c8:	e044      	b.n	8001354 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80012ca:	7bfa      	ldrb	r2, [r7, #15]
 80012cc:	6879      	ldr	r1, [r7, #4]
 80012ce:	4613      	mov	r3, r2
 80012d0:	00db      	lsls	r3, r3, #3
 80012d2:	4413      	add	r3, r2
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	440b      	add	r3, r1
 80012d8:	f203 2355 	addw	r3, r3, #597	; 0x255
 80012dc:	2200      	movs	r2, #0
 80012de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80012e0:	7bfa      	ldrb	r2, [r7, #15]
 80012e2:	6879      	ldr	r1, [r7, #4]
 80012e4:	4613      	mov	r3, r2
 80012e6:	00db      	lsls	r3, r3, #3
 80012e8:	4413      	add	r3, r2
 80012ea:	009b      	lsls	r3, r3, #2
 80012ec:	440b      	add	r3, r1
 80012ee:	f503 7315 	add.w	r3, r3, #596	; 0x254
 80012f2:	7bfa      	ldrb	r2, [r7, #15]
 80012f4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80012f6:	7bfa      	ldrb	r2, [r7, #15]
 80012f8:	6879      	ldr	r1, [r7, #4]
 80012fa:	4613      	mov	r3, r2
 80012fc:	00db      	lsls	r3, r3, #3
 80012fe:	4413      	add	r3, r2
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	440b      	add	r3, r1
 8001304:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8001308:	2200      	movs	r2, #0
 800130a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800130c:	7bfa      	ldrb	r2, [r7, #15]
 800130e:	6879      	ldr	r1, [r7, #4]
 8001310:	4613      	mov	r3, r2
 8001312:	00db      	lsls	r3, r3, #3
 8001314:	4413      	add	r3, r2
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	440b      	add	r3, r1
 800131a:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001322:	7bfa      	ldrb	r2, [r7, #15]
 8001324:	6879      	ldr	r1, [r7, #4]
 8001326:	4613      	mov	r3, r2
 8001328:	00db      	lsls	r3, r3, #3
 800132a:	4413      	add	r3, r2
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	440b      	add	r3, r1
 8001330:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001338:	7bfa      	ldrb	r2, [r7, #15]
 800133a:	6879      	ldr	r1, [r7, #4]
 800133c:	4613      	mov	r3, r2
 800133e:	00db      	lsls	r3, r3, #3
 8001340:	4413      	add	r3, r2
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	440b      	add	r3, r1
 8001346:	f503 7319 	add.w	r3, r3, #612	; 0x264
 800134a:	2200      	movs	r2, #0
 800134c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800134e:	7bfb      	ldrb	r3, [r7, #15]
 8001350:	3301      	adds	r3, #1
 8001352:	73fb      	strb	r3, [r7, #15]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	791b      	ldrb	r3, [r3, #4]
 8001358:	7bfa      	ldrb	r2, [r7, #15]
 800135a:	429a      	cmp	r2, r3
 800135c:	d3b5      	bcc.n	80012ca <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6818      	ldr	r0, [r3, #0]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	7c1a      	ldrb	r2, [r3, #16]
 8001366:	f88d 2000 	strb.w	r2, [sp]
 800136a:	3304      	adds	r3, #4
 800136c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800136e:	f002 faf7 	bl	8003960 <USB_DevInit>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d005      	beq.n	8001384 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2202      	movs	r2, #2
 800137c:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8001380:	2301      	movs	r3, #1
 8001382:	e00c      	b.n	800139e <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2200      	movs	r2, #0
 8001388:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2201      	movs	r2, #1
 800138e:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4618      	mov	r0, r3
 8001398:	f003 fb3b 	bl	8004a12 <USB_DevDisconnect>

  return HAL_OK;
 800139c:	2300      	movs	r3, #0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3710      	adds	r7, #16
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}

080013a6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80013a6:	b580      	push	{r7, lr}
 80013a8:	b084      	sub	sp, #16
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	d101      	bne.n	80013c2 <HAL_PCD_Start+0x1c>
 80013be:	2302      	movs	r3, #2
 80013c0:	e022      	b.n	8001408 <HAL_PCD_Start+0x62>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2201      	movs	r2, #1
 80013c6:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	68db      	ldr	r3, [r3, #12]
 80013ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d009      	beq.n	80013ea <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d105      	bne.n	80013ea <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013e2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4618      	mov	r0, r3
 80013f0:	f002 fa48 	bl	8003884 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4618      	mov	r0, r3
 80013fa:	f003 fae9 	bl	80049d0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2200      	movs	r2, #0
 8001402:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8001406:	2300      	movs	r3, #0
}
 8001408:	4618      	mov	r0, r3
 800140a:	3710      	adds	r7, #16
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}

08001410 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001410:	b590      	push	{r4, r7, lr}
 8001412:	b08d      	sub	sp, #52	; 0x34
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800141e:	6a3b      	ldr	r3, [r7, #32]
 8001420:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4618      	mov	r0, r3
 8001428:	f003 fba7 	bl	8004b7a <USB_GetMode>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	f040 848c 	bne.w	8001d4c <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4618      	mov	r0, r3
 800143a:	f003 fb0b 	bl	8004a54 <USB_ReadInterrupts>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	f000 8482 	beq.w	8001d4a <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	0a1b      	lsrs	r3, r3, #8
 8001450:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4618      	mov	r0, r3
 8001460:	f003 faf8 	bl	8004a54 <USB_ReadInterrupts>
 8001464:	4603      	mov	r3, r0
 8001466:	f003 0302 	and.w	r3, r3, #2
 800146a:	2b02      	cmp	r3, #2
 800146c:	d107      	bne.n	800147e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	695a      	ldr	r2, [r3, #20]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f002 0202 	and.w	r2, r2, #2
 800147c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4618      	mov	r0, r3
 8001484:	f003 fae6 	bl	8004a54 <USB_ReadInterrupts>
 8001488:	4603      	mov	r3, r0
 800148a:	f003 0310 	and.w	r3, r3, #16
 800148e:	2b10      	cmp	r3, #16
 8001490:	d161      	bne.n	8001556 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	699a      	ldr	r2, [r3, #24]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f022 0210 	bic.w	r2, r2, #16
 80014a0:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80014a2:	6a3b      	ldr	r3, [r7, #32]
 80014a4:	6a1b      	ldr	r3, [r3, #32]
 80014a6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80014a8:	69bb      	ldr	r3, [r7, #24]
 80014aa:	f003 020f 	and.w	r2, r3, #15
 80014ae:	4613      	mov	r3, r2
 80014b0:	00db      	lsls	r3, r3, #3
 80014b2:	4413      	add	r3, r2
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80014ba:	687a      	ldr	r2, [r7, #4]
 80014bc:	4413      	add	r3, r2
 80014be:	3304      	adds	r3, #4
 80014c0:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80014c2:	69bb      	ldr	r3, [r7, #24]
 80014c4:	0c5b      	lsrs	r3, r3, #17
 80014c6:	f003 030f 	and.w	r3, r3, #15
 80014ca:	2b02      	cmp	r3, #2
 80014cc:	d124      	bne.n	8001518 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80014ce:	69ba      	ldr	r2, [r7, #24]
 80014d0:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80014d4:	4013      	ands	r3, r2
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d035      	beq.n	8001546 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80014de:	69bb      	ldr	r3, [r7, #24]
 80014e0:	091b      	lsrs	r3, r3, #4
 80014e2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80014e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014e8:	b29b      	uxth	r3, r3
 80014ea:	461a      	mov	r2, r3
 80014ec:	6a38      	ldr	r0, [r7, #32]
 80014ee:	f003 f91d 	bl	800472c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	68da      	ldr	r2, [r3, #12]
 80014f6:	69bb      	ldr	r3, [r7, #24]
 80014f8:	091b      	lsrs	r3, r3, #4
 80014fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014fe:	441a      	add	r2, r3
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	695a      	ldr	r2, [r3, #20]
 8001508:	69bb      	ldr	r3, [r7, #24]
 800150a:	091b      	lsrs	r3, r3, #4
 800150c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001510:	441a      	add	r2, r3
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	615a      	str	r2, [r3, #20]
 8001516:	e016      	b.n	8001546 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001518:	69bb      	ldr	r3, [r7, #24]
 800151a:	0c5b      	lsrs	r3, r3, #17
 800151c:	f003 030f 	and.w	r3, r3, #15
 8001520:	2b06      	cmp	r3, #6
 8001522:	d110      	bne.n	8001546 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800152a:	2208      	movs	r2, #8
 800152c:	4619      	mov	r1, r3
 800152e:	6a38      	ldr	r0, [r7, #32]
 8001530:	f003 f8fc 	bl	800472c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	695a      	ldr	r2, [r3, #20]
 8001538:	69bb      	ldr	r3, [r7, #24]
 800153a:	091b      	lsrs	r3, r3, #4
 800153c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001540:	441a      	add	r2, r3
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	699a      	ldr	r2, [r3, #24]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f042 0210 	orr.w	r2, r2, #16
 8001554:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4618      	mov	r0, r3
 800155c:	f003 fa7a 	bl	8004a54 <USB_ReadInterrupts>
 8001560:	4603      	mov	r3, r0
 8001562:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001566:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800156a:	f040 80a7 	bne.w	80016bc <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800156e:	2300      	movs	r3, #0
 8001570:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4618      	mov	r0, r3
 8001578:	f003 fa7f 	bl	8004a7a <USB_ReadDevAllOutEpInterrupt>
 800157c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800157e:	e099      	b.n	80016b4 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001582:	f003 0301 	and.w	r3, r3, #1
 8001586:	2b00      	cmp	r3, #0
 8001588:	f000 808e 	beq.w	80016a8 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001592:	b2d2      	uxtb	r2, r2
 8001594:	4611      	mov	r1, r2
 8001596:	4618      	mov	r0, r3
 8001598:	f003 faa3 	bl	8004ae2 <USB_ReadDevOutEPInterrupt>
 800159c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	f003 0301 	and.w	r3, r3, #1
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d00c      	beq.n	80015c2 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80015a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015aa:	015a      	lsls	r2, r3, #5
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	4413      	add	r3, r2
 80015b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015b4:	461a      	mov	r2, r3
 80015b6:	2301      	movs	r3, #1
 80015b8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80015ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f000 fea1 	bl	8002304 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	f003 0308 	and.w	r3, r3, #8
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d00c      	beq.n	80015e6 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80015cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ce:	015a      	lsls	r2, r3, #5
 80015d0:	69fb      	ldr	r3, [r7, #28]
 80015d2:	4413      	add	r3, r2
 80015d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015d8:	461a      	mov	r2, r3
 80015da:	2308      	movs	r3, #8
 80015dc:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80015de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80015e0:	6878      	ldr	r0, [r7, #4]
 80015e2:	f000 ff77 	bl	80024d4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	f003 0310 	and.w	r3, r3, #16
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d008      	beq.n	8001602 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80015f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f2:	015a      	lsls	r2, r3, #5
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	4413      	add	r3, r2
 80015f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015fc:	461a      	mov	r2, r3
 80015fe:	2310      	movs	r3, #16
 8001600:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	f003 0302 	and.w	r3, r3, #2
 8001608:	2b00      	cmp	r3, #0
 800160a:	d030      	beq.n	800166e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800160c:	6a3b      	ldr	r3, [r7, #32]
 800160e:	695b      	ldr	r3, [r3, #20]
 8001610:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001614:	2b80      	cmp	r3, #128	; 0x80
 8001616:	d109      	bne.n	800162c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	69fa      	ldr	r2, [r7, #28]
 8001622:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001626:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800162a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800162c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800162e:	4613      	mov	r3, r2
 8001630:	00db      	lsls	r3, r3, #3
 8001632:	4413      	add	r3, r2
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	4413      	add	r3, r2
 800163e:	3304      	adds	r3, #4
 8001640:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	78db      	ldrb	r3, [r3, #3]
 8001646:	2b01      	cmp	r3, #1
 8001648:	d108      	bne.n	800165c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	2200      	movs	r2, #0
 800164e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001652:	b2db      	uxtb	r3, r3
 8001654:	4619      	mov	r1, r3
 8001656:	6878      	ldr	r0, [r7, #4]
 8001658:	f005 fe2a 	bl	80072b0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800165c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165e:	015a      	lsls	r2, r3, #5
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	4413      	add	r3, r2
 8001664:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001668:	461a      	mov	r2, r3
 800166a:	2302      	movs	r3, #2
 800166c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	f003 0320 	and.w	r3, r3, #32
 8001674:	2b00      	cmp	r3, #0
 8001676:	d008      	beq.n	800168a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167a:	015a      	lsls	r2, r3, #5
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	4413      	add	r3, r2
 8001680:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001684:	461a      	mov	r2, r3
 8001686:	2320      	movs	r3, #32
 8001688:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001690:	2b00      	cmp	r3, #0
 8001692:	d009      	beq.n	80016a8 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001696:	015a      	lsls	r2, r3, #5
 8001698:	69fb      	ldr	r3, [r7, #28]
 800169a:	4413      	add	r3, r2
 800169c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016a0:	461a      	mov	r2, r3
 80016a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016a6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80016a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016aa:	3301      	adds	r3, #1
 80016ac:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80016ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016b0:	085b      	lsrs	r3, r3, #1
 80016b2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80016b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	f47f af62 	bne.w	8001580 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4618      	mov	r0, r3
 80016c2:	f003 f9c7 	bl	8004a54 <USB_ReadInterrupts>
 80016c6:	4603      	mov	r3, r0
 80016c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016cc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80016d0:	f040 80db 	bne.w	800188a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4618      	mov	r0, r3
 80016da:	f003 f9e8 	bl	8004aae <USB_ReadDevAllInEpInterrupt>
 80016de:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80016e0:	2300      	movs	r3, #0
 80016e2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80016e4:	e0cd      	b.n	8001882 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80016e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016e8:	f003 0301 	and.w	r3, r3, #1
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	f000 80c2 	beq.w	8001876 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016f8:	b2d2      	uxtb	r2, r2
 80016fa:	4611      	mov	r1, r2
 80016fc:	4618      	mov	r0, r3
 80016fe:	f003 fa0e 	bl	8004b1e <USB_ReadDevInEPInterrupt>
 8001702:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	f003 0301 	and.w	r3, r3, #1
 800170a:	2b00      	cmp	r3, #0
 800170c:	d057      	beq.n	80017be <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800170e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001710:	f003 030f 	and.w	r3, r3, #15
 8001714:	2201      	movs	r2, #1
 8001716:	fa02 f303 	lsl.w	r3, r2, r3
 800171a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001722:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	43db      	mvns	r3, r3
 8001728:	69f9      	ldr	r1, [r7, #28]
 800172a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800172e:	4013      	ands	r3, r2
 8001730:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001734:	015a      	lsls	r2, r3, #5
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	4413      	add	r3, r2
 800173a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800173e:	461a      	mov	r2, r3
 8001740:	2301      	movs	r3, #1
 8001742:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	799b      	ldrb	r3, [r3, #6]
 8001748:	2b01      	cmp	r3, #1
 800174a:	d132      	bne.n	80017b2 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800174c:	6879      	ldr	r1, [r7, #4]
 800174e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001750:	4613      	mov	r3, r2
 8001752:	00db      	lsls	r3, r3, #3
 8001754:	4413      	add	r3, r2
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	440b      	add	r3, r1
 800175a:	3320      	adds	r3, #32
 800175c:	6819      	ldr	r1, [r3, #0]
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001762:	4613      	mov	r3, r2
 8001764:	00db      	lsls	r3, r3, #3
 8001766:	4413      	add	r3, r2
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	4403      	add	r3, r0
 800176c:	331c      	adds	r3, #28
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4419      	add	r1, r3
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001776:	4613      	mov	r3, r2
 8001778:	00db      	lsls	r3, r3, #3
 800177a:	4413      	add	r3, r2
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	4403      	add	r3, r0
 8001780:	3320      	adds	r3, #32
 8001782:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001786:	2b00      	cmp	r3, #0
 8001788:	d113      	bne.n	80017b2 <HAL_PCD_IRQHandler+0x3a2>
 800178a:	6879      	ldr	r1, [r7, #4]
 800178c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800178e:	4613      	mov	r3, r2
 8001790:	00db      	lsls	r3, r3, #3
 8001792:	4413      	add	r3, r2
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	440b      	add	r3, r1
 8001798:	3324      	adds	r3, #36	; 0x24
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d108      	bne.n	80017b2 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6818      	ldr	r0, [r3, #0]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80017aa:	461a      	mov	r2, r3
 80017ac:	2101      	movs	r1, #1
 80017ae:	f003 fa15 	bl	8004bdc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80017b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	4619      	mov	r1, r3
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f005 fcf4 	bl	80071a6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	f003 0308 	and.w	r3, r3, #8
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d008      	beq.n	80017da <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80017c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ca:	015a      	lsls	r2, r3, #5
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	4413      	add	r3, r2
 80017d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017d4:	461a      	mov	r2, r3
 80017d6:	2308      	movs	r3, #8
 80017d8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	f003 0310 	and.w	r3, r3, #16
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d008      	beq.n	80017f6 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80017e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e6:	015a      	lsls	r2, r3, #5
 80017e8:	69fb      	ldr	r3, [r7, #28]
 80017ea:	4413      	add	r3, r2
 80017ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017f0:	461a      	mov	r2, r3
 80017f2:	2310      	movs	r3, #16
 80017f4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d008      	beq.n	8001812 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001802:	015a      	lsls	r2, r3, #5
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	4413      	add	r3, r2
 8001808:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800180c:	461a      	mov	r2, r3
 800180e:	2340      	movs	r3, #64	; 0x40
 8001810:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	f003 0302 	and.w	r3, r3, #2
 8001818:	2b00      	cmp	r3, #0
 800181a:	d023      	beq.n	8001864 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800181c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800181e:	6a38      	ldr	r0, [r7, #32]
 8001820:	f002 fa02 	bl	8003c28 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001824:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001826:	4613      	mov	r3, r2
 8001828:	00db      	lsls	r3, r3, #3
 800182a:	4413      	add	r3, r2
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	3310      	adds	r3, #16
 8001830:	687a      	ldr	r2, [r7, #4]
 8001832:	4413      	add	r3, r2
 8001834:	3304      	adds	r3, #4
 8001836:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	78db      	ldrb	r3, [r3, #3]
 800183c:	2b01      	cmp	r3, #1
 800183e:	d108      	bne.n	8001852 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	2200      	movs	r2, #0
 8001844:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001848:	b2db      	uxtb	r3, r3
 800184a:	4619      	mov	r1, r3
 800184c:	6878      	ldr	r0, [r7, #4]
 800184e:	f005 fd41 	bl	80072d4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001854:	015a      	lsls	r2, r3, #5
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	4413      	add	r3, r2
 800185a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800185e:	461a      	mov	r2, r3
 8001860:	2302      	movs	r3, #2
 8001862:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800186a:	2b00      	cmp	r3, #0
 800186c:	d003      	beq.n	8001876 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800186e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	f000 fcbb 	bl	80021ec <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001878:	3301      	adds	r3, #1
 800187a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800187c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800187e:	085b      	lsrs	r3, r3, #1
 8001880:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001884:	2b00      	cmp	r3, #0
 8001886:	f47f af2e 	bne.w	80016e6 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4618      	mov	r0, r3
 8001890:	f003 f8e0 	bl	8004a54 <USB_ReadInterrupts>
 8001894:	4603      	mov	r3, r0
 8001896:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800189a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800189e:	d122      	bne.n	80018e6 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80018a0:	69fb      	ldr	r3, [r7, #28]
 80018a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	69fa      	ldr	r2, [r7, #28]
 80018aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018ae:	f023 0301 	bic.w	r3, r3, #1
 80018b2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d108      	bne.n	80018d0 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2200      	movs	r2, #0
 80018c2:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80018c6:	2100      	movs	r1, #0
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	f000 fea1 	bl	8002610 <HAL_PCDEx_LPM_Callback>
 80018ce:	e002      	b.n	80018d6 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	f005 fcdf 	bl	8007294 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	695a      	ldr	r2, [r3, #20]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80018e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4618      	mov	r0, r3
 80018ec:	f003 f8b2 	bl	8004a54 <USB_ReadInterrupts>
 80018f0:	4603      	mov	r3, r0
 80018f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80018fa:	d112      	bne.n	8001922 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	f003 0301 	and.w	r3, r3, #1
 8001908:	2b01      	cmp	r3, #1
 800190a:	d102      	bne.n	8001912 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	f005 fc9b 	bl	8007248 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	695a      	ldr	r2, [r3, #20]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001920:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4618      	mov	r0, r3
 8001928:	f003 f894 	bl	8004a54 <USB_ReadInterrupts>
 800192c:	4603      	mov	r3, r0
 800192e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001932:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001936:	f040 80b7 	bne.w	8001aa8 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	69fa      	ldr	r2, [r7, #28]
 8001944:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001948:	f023 0301 	bic.w	r3, r3, #1
 800194c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	2110      	movs	r1, #16
 8001954:	4618      	mov	r0, r3
 8001956:	f002 f967 	bl	8003c28 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800195a:	2300      	movs	r3, #0
 800195c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800195e:	e046      	b.n	80019ee <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001962:	015a      	lsls	r2, r3, #5
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	4413      	add	r3, r2
 8001968:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800196c:	461a      	mov	r2, r3
 800196e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001972:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001976:	015a      	lsls	r2, r3, #5
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	4413      	add	r3, r2
 800197c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001984:	0151      	lsls	r1, r2, #5
 8001986:	69fa      	ldr	r2, [r7, #28]
 8001988:	440a      	add	r2, r1
 800198a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800198e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001992:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001996:	015a      	lsls	r2, r3, #5
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	4413      	add	r3, r2
 800199c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80019a0:	461a      	mov	r2, r3
 80019a2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80019a6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80019a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019aa:	015a      	lsls	r2, r3, #5
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	4413      	add	r3, r2
 80019b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019b8:	0151      	lsls	r1, r2, #5
 80019ba:	69fa      	ldr	r2, [r7, #28]
 80019bc:	440a      	add	r2, r1
 80019be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80019c2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80019c6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80019c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019ca:	015a      	lsls	r2, r3, #5
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	4413      	add	r3, r2
 80019d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019d8:	0151      	lsls	r1, r2, #5
 80019da:	69fa      	ldr	r2, [r7, #28]
 80019dc:	440a      	add	r2, r1
 80019de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80019e2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80019e6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019ea:	3301      	adds	r3, #1
 80019ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	791b      	ldrb	r3, [r3, #4]
 80019f2:	461a      	mov	r2, r3
 80019f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d3b2      	bcc.n	8001960 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a00:	69db      	ldr	r3, [r3, #28]
 8001a02:	69fa      	ldr	r2, [r7, #28]
 8001a04:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a08:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001a0c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	7bdb      	ldrb	r3, [r3, #15]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d016      	beq.n	8001a44 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a20:	69fa      	ldr	r2, [r7, #28]
 8001a22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a26:	f043 030b 	orr.w	r3, r3, #11
 8001a2a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a36:	69fa      	ldr	r2, [r7, #28]
 8001a38:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a3c:	f043 030b 	orr.w	r3, r3, #11
 8001a40:	6453      	str	r3, [r2, #68]	; 0x44
 8001a42:	e015      	b.n	8001a70 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a4a:	695b      	ldr	r3, [r3, #20]
 8001a4c:	69fa      	ldr	r2, [r7, #28]
 8001a4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a52:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001a56:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001a5a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a62:	691b      	ldr	r3, [r3, #16]
 8001a64:	69fa      	ldr	r2, [r7, #28]
 8001a66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a6a:	f043 030b 	orr.w	r3, r3, #11
 8001a6e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001a70:	69fb      	ldr	r3, [r7, #28]
 8001a72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	69fa      	ldr	r2, [r7, #28]
 8001a7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a7e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001a82:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6818      	ldr	r0, [r3, #0]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001a92:	461a      	mov	r2, r3
 8001a94:	f003 f8a2 	bl	8004bdc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	695a      	ldr	r2, [r3, #20]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001aa6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4618      	mov	r0, r3
 8001aae:	f002 ffd1 	bl	8004a54 <USB_ReadInterrupts>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ab8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001abc:	d123      	bne.n	8001b06 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f003 f867 	bl	8004b96 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4618      	mov	r0, r3
 8001ace:	f002 f924 	bl	8003d1a <USB_GetDevSpeed>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681c      	ldr	r4, [r3, #0]
 8001ade:	f001 fa07 	bl	8002ef0 <HAL_RCC_GetHCLKFreq>
 8001ae2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001ae8:	461a      	mov	r2, r3
 8001aea:	4620      	mov	r0, r4
 8001aec:	f001 fe28 	bl	8003740 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	f005 fb80 	bl	80071f6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	695a      	ldr	r2, [r3, #20]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001b04:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f002 ffa2 	bl	8004a54 <USB_ReadInterrupts>
 8001b10:	4603      	mov	r3, r0
 8001b12:	f003 0308 	and.w	r3, r3, #8
 8001b16:	2b08      	cmp	r3, #8
 8001b18:	d10a      	bne.n	8001b30 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f005 fb5d 	bl	80071da <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	695a      	ldr	r2, [r3, #20]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f002 0208 	and.w	r2, r2, #8
 8001b2e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4618      	mov	r0, r3
 8001b36:	f002 ff8d 	bl	8004a54 <USB_ReadInterrupts>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b40:	2b80      	cmp	r3, #128	; 0x80
 8001b42:	d123      	bne.n	8001b8c <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001b44:	6a3b      	ldr	r3, [r7, #32]
 8001b46:	699b      	ldr	r3, [r3, #24]
 8001b48:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001b4c:	6a3b      	ldr	r3, [r7, #32]
 8001b4e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b50:	2301      	movs	r3, #1
 8001b52:	627b      	str	r3, [r7, #36]	; 0x24
 8001b54:	e014      	b.n	8001b80 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001b56:	6879      	ldr	r1, [r7, #4]
 8001b58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b5a:	4613      	mov	r3, r2
 8001b5c:	00db      	lsls	r3, r3, #3
 8001b5e:	4413      	add	r3, r2
 8001b60:	009b      	lsls	r3, r3, #2
 8001b62:	440b      	add	r3, r1
 8001b64:	f203 2357 	addw	r3, r3, #599	; 0x257
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d105      	bne.n	8001b7a <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	4619      	mov	r1, r3
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f000 fb08 	bl	800218a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7c:	3301      	adds	r3, #1
 8001b7e:	627b      	str	r3, [r7, #36]	; 0x24
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	791b      	ldrb	r3, [r3, #4]
 8001b84:	461a      	mov	r2, r3
 8001b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d3e4      	bcc.n	8001b56 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4618      	mov	r0, r3
 8001b92:	f002 ff5f 	bl	8004a54 <USB_ReadInterrupts>
 8001b96:	4603      	mov	r3, r0
 8001b98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001ba0:	d13c      	bne.n	8001c1c <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ba6:	e02b      	b.n	8001c00 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001baa:	015a      	lsls	r2, r3, #5
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	4413      	add	r3, r2
 8001bb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001bb8:	6879      	ldr	r1, [r7, #4]
 8001bba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	00db      	lsls	r3, r3, #3
 8001bc0:	4413      	add	r3, r2
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	440b      	add	r3, r1
 8001bc6:	3318      	adds	r3, #24
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d115      	bne.n	8001bfa <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001bce:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	da12      	bge.n	8001bfa <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001bd4:	6879      	ldr	r1, [r7, #4]
 8001bd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bd8:	4613      	mov	r3, r2
 8001bda:	00db      	lsls	r3, r3, #3
 8001bdc:	4413      	add	r3, r2
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	440b      	add	r3, r1
 8001be2:	3317      	adds	r3, #23
 8001be4:	2201      	movs	r2, #1
 8001be6:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f000 fac8 	bl	800218a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	627b      	str	r3, [r7, #36]	; 0x24
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	791b      	ldrb	r3, [r3, #4]
 8001c04:	461a      	mov	r2, r3
 8001c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d3cd      	bcc.n	8001ba8 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	695a      	ldr	r2, [r3, #20]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001c1a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4618      	mov	r0, r3
 8001c22:	f002 ff17 	bl	8004a54 <USB_ReadInterrupts>
 8001c26:	4603      	mov	r3, r0
 8001c28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c2c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001c30:	d156      	bne.n	8001ce0 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001c32:	2301      	movs	r3, #1
 8001c34:	627b      	str	r3, [r7, #36]	; 0x24
 8001c36:	e045      	b.n	8001cc4 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3a:	015a      	lsls	r2, r3, #5
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	4413      	add	r3, r2
 8001c40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001c48:	6879      	ldr	r1, [r7, #4]
 8001c4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	00db      	lsls	r3, r3, #3
 8001c50:	4413      	add	r3, r2
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	440b      	add	r3, r1
 8001c56:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d12e      	bne.n	8001cbe <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001c60:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	da2b      	bge.n	8001cbe <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001c66:	69bb      	ldr	r3, [r7, #24]
 8001c68:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8001c72:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001c76:	429a      	cmp	r2, r3
 8001c78:	d121      	bne.n	8001cbe <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001c7a:	6879      	ldr	r1, [r7, #4]
 8001c7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c7e:	4613      	mov	r3, r2
 8001c80:	00db      	lsls	r3, r3, #3
 8001c82:	4413      	add	r3, r2
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	440b      	add	r3, r1
 8001c88:	f203 2357 	addw	r3, r3, #599	; 0x257
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001c90:	6a3b      	ldr	r3, [r7, #32]
 8001c92:	699b      	ldr	r3, [r3, #24]
 8001c94:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001c98:	6a3b      	ldr	r3, [r7, #32]
 8001c9a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001c9c:	6a3b      	ldr	r3, [r7, #32]
 8001c9e:	695b      	ldr	r3, [r3, #20]
 8001ca0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d10a      	bne.n	8001cbe <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	69fa      	ldr	r2, [r7, #28]
 8001cb2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001cb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cba:	6053      	str	r3, [r2, #4]
            break;
 8001cbc:	e008      	b.n	8001cd0 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc0:	3301      	adds	r3, #1
 8001cc2:	627b      	str	r3, [r7, #36]	; 0x24
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	791b      	ldrb	r3, [r3, #4]
 8001cc8:	461a      	mov	r2, r3
 8001cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d3b3      	bcc.n	8001c38 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	695a      	ldr	r2, [r3, #20]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001cde:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f002 feb5 	bl	8004a54 <USB_ReadInterrupts>
 8001cea:	4603      	mov	r3, r0
 8001cec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001cf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cf4:	d10a      	bne.n	8001d0c <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f005 fafe 	bl	80072f8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	695a      	ldr	r2, [r3, #20]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001d0a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4618      	mov	r0, r3
 8001d12:	f002 fe9f 	bl	8004a54 <USB_ReadInterrupts>
 8001d16:	4603      	mov	r3, r0
 8001d18:	f003 0304 	and.w	r3, r3, #4
 8001d1c:	2b04      	cmp	r3, #4
 8001d1e:	d115      	bne.n	8001d4c <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001d28:	69bb      	ldr	r3, [r7, #24]
 8001d2a:	f003 0304 	and.w	r3, r3, #4
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d002      	beq.n	8001d38 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f005 faee 	bl	8007314 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	6859      	ldr	r1, [r3, #4]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	69ba      	ldr	r2, [r7, #24]
 8001d44:	430a      	orrs	r2, r1
 8001d46:	605a      	str	r2, [r3, #4]
 8001d48:	e000      	b.n	8001d4c <HAL_PCD_IRQHandler+0x93c>
      return;
 8001d4a:	bf00      	nop
    }
  }
}
 8001d4c:	3734      	adds	r7, #52	; 0x34
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd90      	pop	{r4, r7, pc}

08001d52 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001d52:	b580      	push	{r7, lr}
 8001d54:	b082      	sub	sp, #8
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	6078      	str	r0, [r7, #4]
 8001d5a:	460b      	mov	r3, r1
 8001d5c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d101      	bne.n	8001d6c <HAL_PCD_SetAddress+0x1a>
 8001d68:	2302      	movs	r3, #2
 8001d6a:	e012      	b.n	8001d92 <HAL_PCD_SetAddress+0x40>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2201      	movs	r2, #1
 8001d70:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	78fa      	ldrb	r2, [r7, #3]
 8001d78:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	78fa      	ldrb	r2, [r7, #3]
 8001d80:	4611      	mov	r1, r2
 8001d82:	4618      	mov	r0, r3
 8001d84:	f002 fdfe 	bl	8004984 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8001d90:	2300      	movs	r3, #0
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b084      	sub	sp, #16
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
 8001da2:	4608      	mov	r0, r1
 8001da4:	4611      	mov	r1, r2
 8001da6:	461a      	mov	r2, r3
 8001da8:	4603      	mov	r3, r0
 8001daa:	70fb      	strb	r3, [r7, #3]
 8001dac:	460b      	mov	r3, r1
 8001dae:	803b      	strh	r3, [r7, #0]
 8001db0:	4613      	mov	r3, r2
 8001db2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001db4:	2300      	movs	r3, #0
 8001db6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001db8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	da0f      	bge.n	8001de0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001dc0:	78fb      	ldrb	r3, [r7, #3]
 8001dc2:	f003 020f 	and.w	r2, r3, #15
 8001dc6:	4613      	mov	r3, r2
 8001dc8:	00db      	lsls	r3, r3, #3
 8001dca:	4413      	add	r3, r2
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	3310      	adds	r3, #16
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	4413      	add	r3, r2
 8001dd4:	3304      	adds	r3, #4
 8001dd6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	705a      	strb	r2, [r3, #1]
 8001dde:	e00f      	b.n	8001e00 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001de0:	78fb      	ldrb	r3, [r7, #3]
 8001de2:	f003 020f 	and.w	r2, r3, #15
 8001de6:	4613      	mov	r3, r2
 8001de8:	00db      	lsls	r3, r3, #3
 8001dea:	4413      	add	r3, r2
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	4413      	add	r3, r2
 8001df6:	3304      	adds	r3, #4
 8001df8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001e00:	78fb      	ldrb	r3, [r7, #3]
 8001e02:	f003 030f 	and.w	r3, r3, #15
 8001e06:	b2da      	uxtb	r2, r3
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001e0c:	883a      	ldrh	r2, [r7, #0]
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	78ba      	ldrb	r2, [r7, #2]
 8001e16:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	785b      	ldrb	r3, [r3, #1]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d004      	beq.n	8001e2a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	b29a      	uxth	r2, r3
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001e2a:	78bb      	ldrb	r3, [r7, #2]
 8001e2c:	2b02      	cmp	r3, #2
 8001e2e:	d102      	bne.n	8001e36 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2200      	movs	r2, #0
 8001e34:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d101      	bne.n	8001e44 <HAL_PCD_EP_Open+0xaa>
 8001e40:	2302      	movs	r3, #2
 8001e42:	e00e      	b.n	8001e62 <HAL_PCD_EP_Open+0xc8>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2201      	movs	r2, #1
 8001e48:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	68f9      	ldr	r1, [r7, #12]
 8001e52:	4618      	mov	r0, r3
 8001e54:	f001 ff86 	bl	8003d64 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 8001e60:	7afb      	ldrb	r3, [r7, #11]
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3710      	adds	r7, #16
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b084      	sub	sp, #16
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
 8001e72:	460b      	mov	r3, r1
 8001e74:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001e76:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	da0f      	bge.n	8001e9e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e7e:	78fb      	ldrb	r3, [r7, #3]
 8001e80:	f003 020f 	and.w	r2, r3, #15
 8001e84:	4613      	mov	r3, r2
 8001e86:	00db      	lsls	r3, r3, #3
 8001e88:	4413      	add	r3, r2
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	3310      	adds	r3, #16
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	4413      	add	r3, r2
 8001e92:	3304      	adds	r3, #4
 8001e94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	2201      	movs	r2, #1
 8001e9a:	705a      	strb	r2, [r3, #1]
 8001e9c:	e00f      	b.n	8001ebe <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e9e:	78fb      	ldrb	r3, [r7, #3]
 8001ea0:	f003 020f 	and.w	r2, r3, #15
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	00db      	lsls	r3, r3, #3
 8001ea8:	4413      	add	r3, r2
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001eb0:	687a      	ldr	r2, [r7, #4]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	3304      	adds	r3, #4
 8001eb6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ebe:	78fb      	ldrb	r3, [r7, #3]
 8001ec0:	f003 030f 	and.w	r3, r3, #15
 8001ec4:	b2da      	uxtb	r2, r3
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d101      	bne.n	8001ed8 <HAL_PCD_EP_Close+0x6e>
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	e00e      	b.n	8001ef6 <HAL_PCD_EP_Close+0x8c>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2201      	movs	r2, #1
 8001edc:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	68f9      	ldr	r1, [r7, #12]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f001 ffc4 	bl	8003e74 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3710      	adds	r7, #16
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}

08001efe <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001efe:	b580      	push	{r7, lr}
 8001f00:	b086      	sub	sp, #24
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	60f8      	str	r0, [r7, #12]
 8001f06:	607a      	str	r2, [r7, #4]
 8001f08:	603b      	str	r3, [r7, #0]
 8001f0a:	460b      	mov	r3, r1
 8001f0c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f0e:	7afb      	ldrb	r3, [r7, #11]
 8001f10:	f003 020f 	and.w	r2, r3, #15
 8001f14:	4613      	mov	r3, r2
 8001f16:	00db      	lsls	r3, r3, #3
 8001f18:	4413      	add	r3, r2
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001f20:	68fa      	ldr	r2, [r7, #12]
 8001f22:	4413      	add	r3, r2
 8001f24:	3304      	adds	r3, #4
 8001f26:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	683a      	ldr	r2, [r7, #0]
 8001f32:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	2200      	movs	r2, #0
 8001f38:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f40:	7afb      	ldrb	r3, [r7, #11]
 8001f42:	f003 030f 	and.w	r3, r3, #15
 8001f46:	b2da      	uxtb	r2, r3
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	799b      	ldrb	r3, [r3, #6]
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d102      	bne.n	8001f5a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001f54:	687a      	ldr	r2, [r7, #4]
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	6818      	ldr	r0, [r3, #0]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	799b      	ldrb	r3, [r3, #6]
 8001f62:	461a      	mov	r2, r3
 8001f64:	6979      	ldr	r1, [r7, #20]
 8001f66:	f002 f861 	bl	800402c <USB_EPStartXfer>

  return HAL_OK;
 8001f6a:	2300      	movs	r3, #0
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3718      	adds	r7, #24
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}

08001f74 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001f80:	78fb      	ldrb	r3, [r7, #3]
 8001f82:	f003 020f 	and.w	r2, r3, #15
 8001f86:	6879      	ldr	r1, [r7, #4]
 8001f88:	4613      	mov	r3, r2
 8001f8a:	00db      	lsls	r3, r3, #3
 8001f8c:	4413      	add	r3, r2
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	440b      	add	r3, r1
 8001f92:	f503 731a 	add.w	r3, r3, #616	; 0x268
 8001f96:	681b      	ldr	r3, [r3, #0]
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	370c      	adds	r7, #12
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr

08001fa4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b086      	sub	sp, #24
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	60f8      	str	r0, [r7, #12]
 8001fac:	607a      	str	r2, [r7, #4]
 8001fae:	603b      	str	r3, [r7, #0]
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fb4:	7afb      	ldrb	r3, [r7, #11]
 8001fb6:	f003 020f 	and.w	r2, r3, #15
 8001fba:	4613      	mov	r3, r2
 8001fbc:	00db      	lsls	r3, r3, #3
 8001fbe:	4413      	add	r3, r2
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	3310      	adds	r3, #16
 8001fc4:	68fa      	ldr	r2, [r7, #12]
 8001fc6:	4413      	add	r3, r2
 8001fc8:	3304      	adds	r3, #4
 8001fca:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	683a      	ldr	r2, [r7, #0]
 8001fd6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fe4:	7afb      	ldrb	r3, [r7, #11]
 8001fe6:	f003 030f 	and.w	r3, r3, #15
 8001fea:	b2da      	uxtb	r2, r3
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	799b      	ldrb	r3, [r3, #6]
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d102      	bne.n	8001ffe <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	6818      	ldr	r0, [r3, #0]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	799b      	ldrb	r3, [r3, #6]
 8002006:	461a      	mov	r2, r3
 8002008:	6979      	ldr	r1, [r7, #20]
 800200a:	f002 f80f 	bl	800402c <USB_EPStartXfer>

  return HAL_OK;
 800200e:	2300      	movs	r3, #0
}
 8002010:	4618      	mov	r0, r3
 8002012:	3718      	adds	r7, #24
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}

08002018 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	460b      	mov	r3, r1
 8002022:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002024:	78fb      	ldrb	r3, [r7, #3]
 8002026:	f003 030f 	and.w	r3, r3, #15
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	7912      	ldrb	r2, [r2, #4]
 800202e:	4293      	cmp	r3, r2
 8002030:	d901      	bls.n	8002036 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e04f      	b.n	80020d6 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002036:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800203a:	2b00      	cmp	r3, #0
 800203c:	da0f      	bge.n	800205e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800203e:	78fb      	ldrb	r3, [r7, #3]
 8002040:	f003 020f 	and.w	r2, r3, #15
 8002044:	4613      	mov	r3, r2
 8002046:	00db      	lsls	r3, r3, #3
 8002048:	4413      	add	r3, r2
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	3310      	adds	r3, #16
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	4413      	add	r3, r2
 8002052:	3304      	adds	r3, #4
 8002054:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2201      	movs	r2, #1
 800205a:	705a      	strb	r2, [r3, #1]
 800205c:	e00d      	b.n	800207a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800205e:	78fa      	ldrb	r2, [r7, #3]
 8002060:	4613      	mov	r3, r2
 8002062:	00db      	lsls	r3, r3, #3
 8002064:	4413      	add	r3, r2
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	4413      	add	r3, r2
 8002070:	3304      	adds	r3, #4
 8002072:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2200      	movs	r2, #0
 8002078:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2201      	movs	r2, #1
 800207e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002080:	78fb      	ldrb	r3, [r7, #3]
 8002082:	f003 030f 	and.w	r3, r3, #15
 8002086:	b2da      	uxtb	r2, r3
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002092:	2b01      	cmp	r3, #1
 8002094:	d101      	bne.n	800209a <HAL_PCD_EP_SetStall+0x82>
 8002096:	2302      	movs	r3, #2
 8002098:	e01d      	b.n	80020d6 <HAL_PCD_EP_SetStall+0xbe>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2201      	movs	r2, #1
 800209e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	68f9      	ldr	r1, [r7, #12]
 80020a8:	4618      	mov	r0, r3
 80020aa:	f002 fb97 	bl	80047dc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80020ae:	78fb      	ldrb	r3, [r7, #3]
 80020b0:	f003 030f 	and.w	r3, r3, #15
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d109      	bne.n	80020cc <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6818      	ldr	r0, [r3, #0]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	7999      	ldrb	r1, [r3, #6]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80020c6:	461a      	mov	r2, r3
 80020c8:	f002 fd88 	bl	8004bdc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2200      	movs	r2, #0
 80020d0:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3710      	adds	r7, #16
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}

080020de <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020de:	b580      	push	{r7, lr}
 80020e0:	b084      	sub	sp, #16
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
 80020e6:	460b      	mov	r3, r1
 80020e8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80020ea:	78fb      	ldrb	r3, [r7, #3]
 80020ec:	f003 030f 	and.w	r3, r3, #15
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	7912      	ldrb	r2, [r2, #4]
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d901      	bls.n	80020fc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e042      	b.n	8002182 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80020fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002100:	2b00      	cmp	r3, #0
 8002102:	da0f      	bge.n	8002124 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002104:	78fb      	ldrb	r3, [r7, #3]
 8002106:	f003 020f 	and.w	r2, r3, #15
 800210a:	4613      	mov	r3, r2
 800210c:	00db      	lsls	r3, r3, #3
 800210e:	4413      	add	r3, r2
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	3310      	adds	r3, #16
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	4413      	add	r3, r2
 8002118:	3304      	adds	r3, #4
 800211a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2201      	movs	r2, #1
 8002120:	705a      	strb	r2, [r3, #1]
 8002122:	e00f      	b.n	8002144 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002124:	78fb      	ldrb	r3, [r7, #3]
 8002126:	f003 020f 	and.w	r2, r3, #15
 800212a:	4613      	mov	r3, r2
 800212c:	00db      	lsls	r3, r3, #3
 800212e:	4413      	add	r3, r2
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	4413      	add	r3, r2
 800213a:	3304      	adds	r3, #4
 800213c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2200      	movs	r2, #0
 8002142:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2200      	movs	r2, #0
 8002148:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800214a:	78fb      	ldrb	r3, [r7, #3]
 800214c:	f003 030f 	and.w	r3, r3, #15
 8002150:	b2da      	uxtb	r2, r3
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800215c:	2b01      	cmp	r3, #1
 800215e:	d101      	bne.n	8002164 <HAL_PCD_EP_ClrStall+0x86>
 8002160:	2302      	movs	r3, #2
 8002162:	e00e      	b.n	8002182 <HAL_PCD_EP_ClrStall+0xa4>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2201      	movs	r2, #1
 8002168:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	68f9      	ldr	r1, [r7, #12]
 8002172:	4618      	mov	r0, r3
 8002174:	f002 fba0 	bl	80048b8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2200      	movs	r2, #0
 800217c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	3710      	adds	r7, #16
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}

0800218a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800218a:	b580      	push	{r7, lr}
 800218c:	b084      	sub	sp, #16
 800218e:	af00      	add	r7, sp, #0
 8002190:	6078      	str	r0, [r7, #4]
 8002192:	460b      	mov	r3, r1
 8002194:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002196:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800219a:	2b00      	cmp	r3, #0
 800219c:	da0c      	bge.n	80021b8 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800219e:	78fb      	ldrb	r3, [r7, #3]
 80021a0:	f003 020f 	and.w	r2, r3, #15
 80021a4:	4613      	mov	r3, r2
 80021a6:	00db      	lsls	r3, r3, #3
 80021a8:	4413      	add	r3, r2
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	3310      	adds	r3, #16
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	4413      	add	r3, r2
 80021b2:	3304      	adds	r3, #4
 80021b4:	60fb      	str	r3, [r7, #12]
 80021b6:	e00c      	b.n	80021d2 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021b8:	78fb      	ldrb	r3, [r7, #3]
 80021ba:	f003 020f 	and.w	r2, r3, #15
 80021be:	4613      	mov	r3, r2
 80021c0:	00db      	lsls	r3, r3, #3
 80021c2:	4413      	add	r3, r2
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	4413      	add	r3, r2
 80021ce:	3304      	adds	r3, #4
 80021d0:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	68f9      	ldr	r1, [r7, #12]
 80021d8:	4618      	mov	r0, r3
 80021da:	f002 f9bf 	bl	800455c <USB_EPStopXfer>
 80021de:	4603      	mov	r3, r0
 80021e0:	72fb      	strb	r3, [r7, #11]

  return ret;
 80021e2:	7afb      	ldrb	r3, [r7, #11]
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3710      	adds	r7, #16
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}

080021ec <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b08a      	sub	sp, #40	; 0x28
 80021f0:	af02      	add	r7, sp, #8
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002200:	683a      	ldr	r2, [r7, #0]
 8002202:	4613      	mov	r3, r2
 8002204:	00db      	lsls	r3, r3, #3
 8002206:	4413      	add	r3, r2
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	3310      	adds	r3, #16
 800220c:	687a      	ldr	r2, [r7, #4]
 800220e:	4413      	add	r3, r2
 8002210:	3304      	adds	r3, #4
 8002212:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	695a      	ldr	r2, [r3, #20]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	691b      	ldr	r3, [r3, #16]
 800221c:	429a      	cmp	r2, r3
 800221e:	d901      	bls.n	8002224 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	e06b      	b.n	80022fc <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	691a      	ldr	r2, [r3, #16]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	695b      	ldr	r3, [r3, #20]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	69fa      	ldr	r2, [r7, #28]
 8002236:	429a      	cmp	r2, r3
 8002238:	d902      	bls.n	8002240 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	3303      	adds	r3, #3
 8002244:	089b      	lsrs	r3, r3, #2
 8002246:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002248:	e02a      	b.n	80022a0 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	691a      	ldr	r2, [r3, #16]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	695b      	ldr	r3, [r3, #20]
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	69fa      	ldr	r2, [r7, #28]
 800225c:	429a      	cmp	r2, r3
 800225e:	d902      	bls.n	8002266 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	3303      	adds	r3, #3
 800226a:	089b      	lsrs	r3, r3, #2
 800226c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	68d9      	ldr	r1, [r3, #12]
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	b2da      	uxtb	r2, r3
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800227e:	9300      	str	r3, [sp, #0]
 8002280:	4603      	mov	r3, r0
 8002282:	6978      	ldr	r0, [r7, #20]
 8002284:	f002 fa14 	bl	80046b0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	68da      	ldr	r2, [r3, #12]
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	441a      	add	r2, r3
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	695a      	ldr	r2, [r3, #20]
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	441a      	add	r2, r3
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	015a      	lsls	r2, r3, #5
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	4413      	add	r3, r2
 80022a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022ac:	699b      	ldr	r3, [r3, #24]
 80022ae:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80022b0:	69ba      	ldr	r2, [r7, #24]
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d809      	bhi.n	80022ca <PCD_WriteEmptyTxFifo+0xde>
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	695a      	ldr	r2, [r3, #20]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80022be:	429a      	cmp	r2, r3
 80022c0:	d203      	bcs.n	80022ca <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	691b      	ldr	r3, [r3, #16]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d1bf      	bne.n	800224a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	691a      	ldr	r2, [r3, #16]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	695b      	ldr	r3, [r3, #20]
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d811      	bhi.n	80022fa <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	f003 030f 	and.w	r3, r3, #15
 80022dc:	2201      	movs	r2, #1
 80022de:	fa02 f303 	lsl.w	r3, r2, r3
 80022e2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	43db      	mvns	r3, r3
 80022f0:	6939      	ldr	r1, [r7, #16]
 80022f2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80022f6:	4013      	ands	r3, r2
 80022f8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80022fa:	2300      	movs	r3, #0
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3720      	adds	r7, #32
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}

08002304 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b088      	sub	sp, #32
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	333c      	adds	r3, #60	; 0x3c
 800231c:	3304      	adds	r3, #4
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	015a      	lsls	r2, r3, #5
 8002326:	69bb      	ldr	r3, [r7, #24]
 8002328:	4413      	add	r3, r2
 800232a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	799b      	ldrb	r3, [r3, #6]
 8002336:	2b01      	cmp	r3, #1
 8002338:	d17b      	bne.n	8002432 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	f003 0308 	and.w	r3, r3, #8
 8002340:	2b00      	cmp	r3, #0
 8002342:	d015      	beq.n	8002370 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	4a61      	ldr	r2, [pc, #388]	; (80024cc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002348:	4293      	cmp	r3, r2
 800234a:	f240 80b9 	bls.w	80024c0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002354:	2b00      	cmp	r3, #0
 8002356:	f000 80b3 	beq.w	80024c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	015a      	lsls	r2, r3, #5
 800235e:	69bb      	ldr	r3, [r7, #24]
 8002360:	4413      	add	r3, r2
 8002362:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002366:	461a      	mov	r2, r3
 8002368:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800236c:	6093      	str	r3, [r2, #8]
 800236e:	e0a7      	b.n	80024c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	f003 0320 	and.w	r3, r3, #32
 8002376:	2b00      	cmp	r3, #0
 8002378:	d009      	beq.n	800238e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	015a      	lsls	r2, r3, #5
 800237e:	69bb      	ldr	r3, [r7, #24]
 8002380:	4413      	add	r3, r2
 8002382:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002386:	461a      	mov	r2, r3
 8002388:	2320      	movs	r3, #32
 800238a:	6093      	str	r3, [r2, #8]
 800238c:	e098      	b.n	80024c0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002394:	2b00      	cmp	r3, #0
 8002396:	f040 8093 	bne.w	80024c0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	4a4b      	ldr	r2, [pc, #300]	; (80024cc <PCD_EP_OutXfrComplete_int+0x1c8>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d90f      	bls.n	80023c2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d00a      	beq.n	80023c2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	015a      	lsls	r2, r3, #5
 80023b0:	69bb      	ldr	r3, [r7, #24]
 80023b2:	4413      	add	r3, r2
 80023b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023b8:	461a      	mov	r2, r3
 80023ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023be:	6093      	str	r3, [r2, #8]
 80023c0:	e07e      	b.n	80024c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80023c2:	683a      	ldr	r2, [r7, #0]
 80023c4:	4613      	mov	r3, r2
 80023c6:	00db      	lsls	r3, r3, #3
 80023c8:	4413      	add	r3, r2
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	4413      	add	r3, r2
 80023d4:	3304      	adds	r3, #4
 80023d6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	6a1a      	ldr	r2, [r3, #32]
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	0159      	lsls	r1, r3, #5
 80023e0:	69bb      	ldr	r3, [r7, #24]
 80023e2:	440b      	add	r3, r1
 80023e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023e8:	691b      	ldr	r3, [r3, #16]
 80023ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023ee:	1ad2      	subs	r2, r2, r3
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d114      	bne.n	8002424 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	691b      	ldr	r3, [r3, #16]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d109      	bne.n	8002416 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6818      	ldr	r0, [r3, #0]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800240c:	461a      	mov	r2, r3
 800240e:	2101      	movs	r1, #1
 8002410:	f002 fbe4 	bl	8004bdc <USB_EP0_OutStart>
 8002414:	e006      	b.n	8002424 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	68da      	ldr	r2, [r3, #12]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	695b      	ldr	r3, [r3, #20]
 800241e:	441a      	add	r2, r3
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	b2db      	uxtb	r3, r3
 8002428:	4619      	mov	r1, r3
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f004 fea0 	bl	8007170 <HAL_PCD_DataOutStageCallback>
 8002430:	e046      	b.n	80024c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	4a26      	ldr	r2, [pc, #152]	; (80024d0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d124      	bne.n	8002484 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d00a      	beq.n	800245a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	015a      	lsls	r2, r3, #5
 8002448:	69bb      	ldr	r3, [r7, #24]
 800244a:	4413      	add	r3, r2
 800244c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002450:	461a      	mov	r2, r3
 8002452:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002456:	6093      	str	r3, [r2, #8]
 8002458:	e032      	b.n	80024c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	f003 0320 	and.w	r3, r3, #32
 8002460:	2b00      	cmp	r3, #0
 8002462:	d008      	beq.n	8002476 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	015a      	lsls	r2, r3, #5
 8002468:	69bb      	ldr	r3, [r7, #24]
 800246a:	4413      	add	r3, r2
 800246c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002470:	461a      	mov	r2, r3
 8002472:	2320      	movs	r3, #32
 8002474:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	b2db      	uxtb	r3, r3
 800247a:	4619      	mov	r1, r3
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f004 fe77 	bl	8007170 <HAL_PCD_DataOutStageCallback>
 8002482:	e01d      	b.n	80024c0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d114      	bne.n	80024b4 <PCD_EP_OutXfrComplete_int+0x1b0>
 800248a:	6879      	ldr	r1, [r7, #4]
 800248c:	683a      	ldr	r2, [r7, #0]
 800248e:	4613      	mov	r3, r2
 8002490:	00db      	lsls	r3, r3, #3
 8002492:	4413      	add	r3, r2
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	440b      	add	r3, r1
 8002498:	f503 7319 	add.w	r3, r3, #612	; 0x264
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d108      	bne.n	80024b4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6818      	ldr	r0, [r3, #0]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80024ac:	461a      	mov	r2, r3
 80024ae:	2100      	movs	r1, #0
 80024b0:	f002 fb94 	bl	8004bdc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	4619      	mov	r1, r3
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f004 fe58 	bl	8007170 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3720      	adds	r7, #32
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	4f54300a 	.word	0x4f54300a
 80024d0:	4f54310a 	.word	0x4f54310a

080024d4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b086      	sub	sp, #24
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	333c      	adds	r3, #60	; 0x3c
 80024ec:	3304      	adds	r3, #4
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	015a      	lsls	r2, r3, #5
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	4413      	add	r3, r2
 80024fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	4a15      	ldr	r2, [pc, #84]	; (800255c <PCD_EP_OutSetupPacket_int+0x88>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d90e      	bls.n	8002528 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002510:	2b00      	cmp	r3, #0
 8002512:	d009      	beq.n	8002528 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	015a      	lsls	r2, r3, #5
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	4413      	add	r3, r2
 800251c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002520:	461a      	mov	r2, r3
 8002522:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002526:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f004 fe0f 	bl	800714c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	4a0a      	ldr	r2, [pc, #40]	; (800255c <PCD_EP_OutSetupPacket_int+0x88>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d90c      	bls.n	8002550 <PCD_EP_OutSetupPacket_int+0x7c>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	799b      	ldrb	r3, [r3, #6]
 800253a:	2b01      	cmp	r3, #1
 800253c:	d108      	bne.n	8002550 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6818      	ldr	r0, [r3, #0]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002548:	461a      	mov	r2, r3
 800254a:	2101      	movs	r1, #1
 800254c:	f002 fb46 	bl	8004bdc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002550:	2300      	movs	r3, #0
}
 8002552:	4618      	mov	r0, r3
 8002554:	3718      	adds	r7, #24
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	4f54300a 	.word	0x4f54300a

08002560 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002560:	b480      	push	{r7}
 8002562:	b085      	sub	sp, #20
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	460b      	mov	r3, r1
 800256a:	70fb      	strb	r3, [r7, #3]
 800256c:	4613      	mov	r3, r2
 800256e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002576:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002578:	78fb      	ldrb	r3, [r7, #3]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d107      	bne.n	800258e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800257e:	883b      	ldrh	r3, [r7, #0]
 8002580:	0419      	lsls	r1, r3, #16
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	68ba      	ldr	r2, [r7, #8]
 8002588:	430a      	orrs	r2, r1
 800258a:	629a      	str	r2, [r3, #40]	; 0x28
 800258c:	e028      	b.n	80025e0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002594:	0c1b      	lsrs	r3, r3, #16
 8002596:	68ba      	ldr	r2, [r7, #8]
 8002598:	4413      	add	r3, r2
 800259a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800259c:	2300      	movs	r3, #0
 800259e:	73fb      	strb	r3, [r7, #15]
 80025a0:	e00d      	b.n	80025be <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	7bfb      	ldrb	r3, [r7, #15]
 80025a8:	3340      	adds	r3, #64	; 0x40
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	4413      	add	r3, r2
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	0c1b      	lsrs	r3, r3, #16
 80025b2:	68ba      	ldr	r2, [r7, #8]
 80025b4:	4413      	add	r3, r2
 80025b6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80025b8:	7bfb      	ldrb	r3, [r7, #15]
 80025ba:	3301      	adds	r3, #1
 80025bc:	73fb      	strb	r3, [r7, #15]
 80025be:	7bfa      	ldrb	r2, [r7, #15]
 80025c0:	78fb      	ldrb	r3, [r7, #3]
 80025c2:	3b01      	subs	r3, #1
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d3ec      	bcc.n	80025a2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80025c8:	883b      	ldrh	r3, [r7, #0]
 80025ca:	0418      	lsls	r0, r3, #16
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6819      	ldr	r1, [r3, #0]
 80025d0:	78fb      	ldrb	r3, [r7, #3]
 80025d2:	3b01      	subs	r3, #1
 80025d4:	68ba      	ldr	r2, [r7, #8]
 80025d6:	4302      	orrs	r2, r0
 80025d8:	3340      	adds	r3, #64	; 0x40
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	440b      	add	r3, r1
 80025de:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80025e0:	2300      	movs	r3, #0
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3714      	adds	r7, #20
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr

080025ee <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80025ee:	b480      	push	{r7}
 80025f0:	b083      	sub	sp, #12
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	6078      	str	r0, [r7, #4]
 80025f6:	460b      	mov	r3, r1
 80025f8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	887a      	ldrh	r2, [r7, #2]
 8002600:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002602:	2300      	movs	r3, #0
}
 8002604:	4618      	mov	r0, r3
 8002606:	370c      	adds	r7, #12
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr

08002610 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	460b      	mov	r3, r1
 800261a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800261c:	bf00      	nop
 800261e:	370c      	adds	r7, #12
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr

08002628 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b086      	sub	sp, #24
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d101      	bne.n	800263a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e267      	b.n	8002b0a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0301 	and.w	r3, r3, #1
 8002642:	2b00      	cmp	r3, #0
 8002644:	d075      	beq.n	8002732 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002646:	4b88      	ldr	r3, [pc, #544]	; (8002868 <HAL_RCC_OscConfig+0x240>)
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	f003 030c 	and.w	r3, r3, #12
 800264e:	2b04      	cmp	r3, #4
 8002650:	d00c      	beq.n	800266c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002652:	4b85      	ldr	r3, [pc, #532]	; (8002868 <HAL_RCC_OscConfig+0x240>)
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800265a:	2b08      	cmp	r3, #8
 800265c:	d112      	bne.n	8002684 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800265e:	4b82      	ldr	r3, [pc, #520]	; (8002868 <HAL_RCC_OscConfig+0x240>)
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002666:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800266a:	d10b      	bne.n	8002684 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800266c:	4b7e      	ldr	r3, [pc, #504]	; (8002868 <HAL_RCC_OscConfig+0x240>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d05b      	beq.n	8002730 <HAL_RCC_OscConfig+0x108>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d157      	bne.n	8002730 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e242      	b.n	8002b0a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800268c:	d106      	bne.n	800269c <HAL_RCC_OscConfig+0x74>
 800268e:	4b76      	ldr	r3, [pc, #472]	; (8002868 <HAL_RCC_OscConfig+0x240>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a75      	ldr	r2, [pc, #468]	; (8002868 <HAL_RCC_OscConfig+0x240>)
 8002694:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002698:	6013      	str	r3, [r2, #0]
 800269a:	e01d      	b.n	80026d8 <HAL_RCC_OscConfig+0xb0>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026a4:	d10c      	bne.n	80026c0 <HAL_RCC_OscConfig+0x98>
 80026a6:	4b70      	ldr	r3, [pc, #448]	; (8002868 <HAL_RCC_OscConfig+0x240>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a6f      	ldr	r2, [pc, #444]	; (8002868 <HAL_RCC_OscConfig+0x240>)
 80026ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026b0:	6013      	str	r3, [r2, #0]
 80026b2:	4b6d      	ldr	r3, [pc, #436]	; (8002868 <HAL_RCC_OscConfig+0x240>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a6c      	ldr	r2, [pc, #432]	; (8002868 <HAL_RCC_OscConfig+0x240>)
 80026b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026bc:	6013      	str	r3, [r2, #0]
 80026be:	e00b      	b.n	80026d8 <HAL_RCC_OscConfig+0xb0>
 80026c0:	4b69      	ldr	r3, [pc, #420]	; (8002868 <HAL_RCC_OscConfig+0x240>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a68      	ldr	r2, [pc, #416]	; (8002868 <HAL_RCC_OscConfig+0x240>)
 80026c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026ca:	6013      	str	r3, [r2, #0]
 80026cc:	4b66      	ldr	r3, [pc, #408]	; (8002868 <HAL_RCC_OscConfig+0x240>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a65      	ldr	r2, [pc, #404]	; (8002868 <HAL_RCC_OscConfig+0x240>)
 80026d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d013      	beq.n	8002708 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e0:	f7fe fa5c 	bl	8000b9c <HAL_GetTick>
 80026e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026e6:	e008      	b.n	80026fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026e8:	f7fe fa58 	bl	8000b9c <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	2b64      	cmp	r3, #100	; 0x64
 80026f4:	d901      	bls.n	80026fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e207      	b.n	8002b0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026fa:	4b5b      	ldr	r3, [pc, #364]	; (8002868 <HAL_RCC_OscConfig+0x240>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d0f0      	beq.n	80026e8 <HAL_RCC_OscConfig+0xc0>
 8002706:	e014      	b.n	8002732 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002708:	f7fe fa48 	bl	8000b9c <HAL_GetTick>
 800270c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800270e:	e008      	b.n	8002722 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002710:	f7fe fa44 	bl	8000b9c <HAL_GetTick>
 8002714:	4602      	mov	r2, r0
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	2b64      	cmp	r3, #100	; 0x64
 800271c:	d901      	bls.n	8002722 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	e1f3      	b.n	8002b0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002722:	4b51      	ldr	r3, [pc, #324]	; (8002868 <HAL_RCC_OscConfig+0x240>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d1f0      	bne.n	8002710 <HAL_RCC_OscConfig+0xe8>
 800272e:	e000      	b.n	8002732 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002730:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0302 	and.w	r3, r3, #2
 800273a:	2b00      	cmp	r3, #0
 800273c:	d063      	beq.n	8002806 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800273e:	4b4a      	ldr	r3, [pc, #296]	; (8002868 <HAL_RCC_OscConfig+0x240>)
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	f003 030c 	and.w	r3, r3, #12
 8002746:	2b00      	cmp	r3, #0
 8002748:	d00b      	beq.n	8002762 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800274a:	4b47      	ldr	r3, [pc, #284]	; (8002868 <HAL_RCC_OscConfig+0x240>)
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002752:	2b08      	cmp	r3, #8
 8002754:	d11c      	bne.n	8002790 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002756:	4b44      	ldr	r3, [pc, #272]	; (8002868 <HAL_RCC_OscConfig+0x240>)
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d116      	bne.n	8002790 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002762:	4b41      	ldr	r3, [pc, #260]	; (8002868 <HAL_RCC_OscConfig+0x240>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0302 	and.w	r3, r3, #2
 800276a:	2b00      	cmp	r3, #0
 800276c:	d005      	beq.n	800277a <HAL_RCC_OscConfig+0x152>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	2b01      	cmp	r3, #1
 8002774:	d001      	beq.n	800277a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e1c7      	b.n	8002b0a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800277a:	4b3b      	ldr	r3, [pc, #236]	; (8002868 <HAL_RCC_OscConfig+0x240>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	691b      	ldr	r3, [r3, #16]
 8002786:	00db      	lsls	r3, r3, #3
 8002788:	4937      	ldr	r1, [pc, #220]	; (8002868 <HAL_RCC_OscConfig+0x240>)
 800278a:	4313      	orrs	r3, r2
 800278c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800278e:	e03a      	b.n	8002806 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d020      	beq.n	80027da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002798:	4b34      	ldr	r3, [pc, #208]	; (800286c <HAL_RCC_OscConfig+0x244>)
 800279a:	2201      	movs	r2, #1
 800279c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800279e:	f7fe f9fd 	bl	8000b9c <HAL_GetTick>
 80027a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027a4:	e008      	b.n	80027b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027a6:	f7fe f9f9 	bl	8000b9c <HAL_GetTick>
 80027aa:	4602      	mov	r2, r0
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d901      	bls.n	80027b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80027b4:	2303      	movs	r3, #3
 80027b6:	e1a8      	b.n	8002b0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027b8:	4b2b      	ldr	r3, [pc, #172]	; (8002868 <HAL_RCC_OscConfig+0x240>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0302 	and.w	r3, r3, #2
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d0f0      	beq.n	80027a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027c4:	4b28      	ldr	r3, [pc, #160]	; (8002868 <HAL_RCC_OscConfig+0x240>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	691b      	ldr	r3, [r3, #16]
 80027d0:	00db      	lsls	r3, r3, #3
 80027d2:	4925      	ldr	r1, [pc, #148]	; (8002868 <HAL_RCC_OscConfig+0x240>)
 80027d4:	4313      	orrs	r3, r2
 80027d6:	600b      	str	r3, [r1, #0]
 80027d8:	e015      	b.n	8002806 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027da:	4b24      	ldr	r3, [pc, #144]	; (800286c <HAL_RCC_OscConfig+0x244>)
 80027dc:	2200      	movs	r2, #0
 80027de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e0:	f7fe f9dc 	bl	8000b9c <HAL_GetTick>
 80027e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027e6:	e008      	b.n	80027fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027e8:	f7fe f9d8 	bl	8000b9c <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d901      	bls.n	80027fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e187      	b.n	8002b0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027fa:	4b1b      	ldr	r3, [pc, #108]	; (8002868 <HAL_RCC_OscConfig+0x240>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0302 	and.w	r3, r3, #2
 8002802:	2b00      	cmp	r3, #0
 8002804:	d1f0      	bne.n	80027e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0308 	and.w	r3, r3, #8
 800280e:	2b00      	cmp	r3, #0
 8002810:	d036      	beq.n	8002880 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	695b      	ldr	r3, [r3, #20]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d016      	beq.n	8002848 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800281a:	4b15      	ldr	r3, [pc, #84]	; (8002870 <HAL_RCC_OscConfig+0x248>)
 800281c:	2201      	movs	r2, #1
 800281e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002820:	f7fe f9bc 	bl	8000b9c <HAL_GetTick>
 8002824:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002826:	e008      	b.n	800283a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002828:	f7fe f9b8 	bl	8000b9c <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	2b02      	cmp	r3, #2
 8002834:	d901      	bls.n	800283a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	e167      	b.n	8002b0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800283a:	4b0b      	ldr	r3, [pc, #44]	; (8002868 <HAL_RCC_OscConfig+0x240>)
 800283c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800283e:	f003 0302 	and.w	r3, r3, #2
 8002842:	2b00      	cmp	r3, #0
 8002844:	d0f0      	beq.n	8002828 <HAL_RCC_OscConfig+0x200>
 8002846:	e01b      	b.n	8002880 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002848:	4b09      	ldr	r3, [pc, #36]	; (8002870 <HAL_RCC_OscConfig+0x248>)
 800284a:	2200      	movs	r2, #0
 800284c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800284e:	f7fe f9a5 	bl	8000b9c <HAL_GetTick>
 8002852:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002854:	e00e      	b.n	8002874 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002856:	f7fe f9a1 	bl	8000b9c <HAL_GetTick>
 800285a:	4602      	mov	r2, r0
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	2b02      	cmp	r3, #2
 8002862:	d907      	bls.n	8002874 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002864:	2303      	movs	r3, #3
 8002866:	e150      	b.n	8002b0a <HAL_RCC_OscConfig+0x4e2>
 8002868:	40023800 	.word	0x40023800
 800286c:	42470000 	.word	0x42470000
 8002870:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002874:	4b88      	ldr	r3, [pc, #544]	; (8002a98 <HAL_RCC_OscConfig+0x470>)
 8002876:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002878:	f003 0302 	and.w	r3, r3, #2
 800287c:	2b00      	cmp	r3, #0
 800287e:	d1ea      	bne.n	8002856 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 0304 	and.w	r3, r3, #4
 8002888:	2b00      	cmp	r3, #0
 800288a:	f000 8097 	beq.w	80029bc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800288e:	2300      	movs	r3, #0
 8002890:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002892:	4b81      	ldr	r3, [pc, #516]	; (8002a98 <HAL_RCC_OscConfig+0x470>)
 8002894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d10f      	bne.n	80028be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800289e:	2300      	movs	r3, #0
 80028a0:	60bb      	str	r3, [r7, #8]
 80028a2:	4b7d      	ldr	r3, [pc, #500]	; (8002a98 <HAL_RCC_OscConfig+0x470>)
 80028a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a6:	4a7c      	ldr	r2, [pc, #496]	; (8002a98 <HAL_RCC_OscConfig+0x470>)
 80028a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028ac:	6413      	str	r3, [r2, #64]	; 0x40
 80028ae:	4b7a      	ldr	r3, [pc, #488]	; (8002a98 <HAL_RCC_OscConfig+0x470>)
 80028b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028b6:	60bb      	str	r3, [r7, #8]
 80028b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028ba:	2301      	movs	r3, #1
 80028bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028be:	4b77      	ldr	r3, [pc, #476]	; (8002a9c <HAL_RCC_OscConfig+0x474>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d118      	bne.n	80028fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028ca:	4b74      	ldr	r3, [pc, #464]	; (8002a9c <HAL_RCC_OscConfig+0x474>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a73      	ldr	r2, [pc, #460]	; (8002a9c <HAL_RCC_OscConfig+0x474>)
 80028d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028d6:	f7fe f961 	bl	8000b9c <HAL_GetTick>
 80028da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028dc:	e008      	b.n	80028f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028de:	f7fe f95d 	bl	8000b9c <HAL_GetTick>
 80028e2:	4602      	mov	r2, r0
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	1ad3      	subs	r3, r2, r3
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d901      	bls.n	80028f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80028ec:	2303      	movs	r3, #3
 80028ee:	e10c      	b.n	8002b0a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028f0:	4b6a      	ldr	r3, [pc, #424]	; (8002a9c <HAL_RCC_OscConfig+0x474>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d0f0      	beq.n	80028de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	2b01      	cmp	r3, #1
 8002902:	d106      	bne.n	8002912 <HAL_RCC_OscConfig+0x2ea>
 8002904:	4b64      	ldr	r3, [pc, #400]	; (8002a98 <HAL_RCC_OscConfig+0x470>)
 8002906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002908:	4a63      	ldr	r2, [pc, #396]	; (8002a98 <HAL_RCC_OscConfig+0x470>)
 800290a:	f043 0301 	orr.w	r3, r3, #1
 800290e:	6713      	str	r3, [r2, #112]	; 0x70
 8002910:	e01c      	b.n	800294c <HAL_RCC_OscConfig+0x324>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	2b05      	cmp	r3, #5
 8002918:	d10c      	bne.n	8002934 <HAL_RCC_OscConfig+0x30c>
 800291a:	4b5f      	ldr	r3, [pc, #380]	; (8002a98 <HAL_RCC_OscConfig+0x470>)
 800291c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800291e:	4a5e      	ldr	r2, [pc, #376]	; (8002a98 <HAL_RCC_OscConfig+0x470>)
 8002920:	f043 0304 	orr.w	r3, r3, #4
 8002924:	6713      	str	r3, [r2, #112]	; 0x70
 8002926:	4b5c      	ldr	r3, [pc, #368]	; (8002a98 <HAL_RCC_OscConfig+0x470>)
 8002928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800292a:	4a5b      	ldr	r2, [pc, #364]	; (8002a98 <HAL_RCC_OscConfig+0x470>)
 800292c:	f043 0301 	orr.w	r3, r3, #1
 8002930:	6713      	str	r3, [r2, #112]	; 0x70
 8002932:	e00b      	b.n	800294c <HAL_RCC_OscConfig+0x324>
 8002934:	4b58      	ldr	r3, [pc, #352]	; (8002a98 <HAL_RCC_OscConfig+0x470>)
 8002936:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002938:	4a57      	ldr	r2, [pc, #348]	; (8002a98 <HAL_RCC_OscConfig+0x470>)
 800293a:	f023 0301 	bic.w	r3, r3, #1
 800293e:	6713      	str	r3, [r2, #112]	; 0x70
 8002940:	4b55      	ldr	r3, [pc, #340]	; (8002a98 <HAL_RCC_OscConfig+0x470>)
 8002942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002944:	4a54      	ldr	r2, [pc, #336]	; (8002a98 <HAL_RCC_OscConfig+0x470>)
 8002946:	f023 0304 	bic.w	r3, r3, #4
 800294a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d015      	beq.n	8002980 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002954:	f7fe f922 	bl	8000b9c <HAL_GetTick>
 8002958:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800295a:	e00a      	b.n	8002972 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800295c:	f7fe f91e 	bl	8000b9c <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	f241 3288 	movw	r2, #5000	; 0x1388
 800296a:	4293      	cmp	r3, r2
 800296c:	d901      	bls.n	8002972 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e0cb      	b.n	8002b0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002972:	4b49      	ldr	r3, [pc, #292]	; (8002a98 <HAL_RCC_OscConfig+0x470>)
 8002974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002976:	f003 0302 	and.w	r3, r3, #2
 800297a:	2b00      	cmp	r3, #0
 800297c:	d0ee      	beq.n	800295c <HAL_RCC_OscConfig+0x334>
 800297e:	e014      	b.n	80029aa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002980:	f7fe f90c 	bl	8000b9c <HAL_GetTick>
 8002984:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002986:	e00a      	b.n	800299e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002988:	f7fe f908 	bl	8000b9c <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	f241 3288 	movw	r2, #5000	; 0x1388
 8002996:	4293      	cmp	r3, r2
 8002998:	d901      	bls.n	800299e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	e0b5      	b.n	8002b0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800299e:	4b3e      	ldr	r3, [pc, #248]	; (8002a98 <HAL_RCC_OscConfig+0x470>)
 80029a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029a2:	f003 0302 	and.w	r3, r3, #2
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d1ee      	bne.n	8002988 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029aa:	7dfb      	ldrb	r3, [r7, #23]
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d105      	bne.n	80029bc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029b0:	4b39      	ldr	r3, [pc, #228]	; (8002a98 <HAL_RCC_OscConfig+0x470>)
 80029b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b4:	4a38      	ldr	r2, [pc, #224]	; (8002a98 <HAL_RCC_OscConfig+0x470>)
 80029b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029ba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	699b      	ldr	r3, [r3, #24]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	f000 80a1 	beq.w	8002b08 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029c6:	4b34      	ldr	r3, [pc, #208]	; (8002a98 <HAL_RCC_OscConfig+0x470>)
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	f003 030c 	and.w	r3, r3, #12
 80029ce:	2b08      	cmp	r3, #8
 80029d0:	d05c      	beq.n	8002a8c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	699b      	ldr	r3, [r3, #24]
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	d141      	bne.n	8002a5e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029da:	4b31      	ldr	r3, [pc, #196]	; (8002aa0 <HAL_RCC_OscConfig+0x478>)
 80029dc:	2200      	movs	r2, #0
 80029de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e0:	f7fe f8dc 	bl	8000b9c <HAL_GetTick>
 80029e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029e6:	e008      	b.n	80029fa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029e8:	f7fe f8d8 	bl	8000b9c <HAL_GetTick>
 80029ec:	4602      	mov	r2, r0
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d901      	bls.n	80029fa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e087      	b.n	8002b0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029fa:	4b27      	ldr	r3, [pc, #156]	; (8002a98 <HAL_RCC_OscConfig+0x470>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d1f0      	bne.n	80029e8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	69da      	ldr	r2, [r3, #28]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6a1b      	ldr	r3, [r3, #32]
 8002a0e:	431a      	orrs	r2, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a14:	019b      	lsls	r3, r3, #6
 8002a16:	431a      	orrs	r2, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a1c:	085b      	lsrs	r3, r3, #1
 8002a1e:	3b01      	subs	r3, #1
 8002a20:	041b      	lsls	r3, r3, #16
 8002a22:	431a      	orrs	r2, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a28:	061b      	lsls	r3, r3, #24
 8002a2a:	491b      	ldr	r1, [pc, #108]	; (8002a98 <HAL_RCC_OscConfig+0x470>)
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a30:	4b1b      	ldr	r3, [pc, #108]	; (8002aa0 <HAL_RCC_OscConfig+0x478>)
 8002a32:	2201      	movs	r2, #1
 8002a34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a36:	f7fe f8b1 	bl	8000b9c <HAL_GetTick>
 8002a3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a3c:	e008      	b.n	8002a50 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a3e:	f7fe f8ad 	bl	8000b9c <HAL_GetTick>
 8002a42:	4602      	mov	r2, r0
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	1ad3      	subs	r3, r2, r3
 8002a48:	2b02      	cmp	r3, #2
 8002a4a:	d901      	bls.n	8002a50 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a4c:	2303      	movs	r3, #3
 8002a4e:	e05c      	b.n	8002b0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a50:	4b11      	ldr	r3, [pc, #68]	; (8002a98 <HAL_RCC_OscConfig+0x470>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d0f0      	beq.n	8002a3e <HAL_RCC_OscConfig+0x416>
 8002a5c:	e054      	b.n	8002b08 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a5e:	4b10      	ldr	r3, [pc, #64]	; (8002aa0 <HAL_RCC_OscConfig+0x478>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a64:	f7fe f89a 	bl	8000b9c <HAL_GetTick>
 8002a68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a6a:	e008      	b.n	8002a7e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a6c:	f7fe f896 	bl	8000b9c <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d901      	bls.n	8002a7e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e045      	b.n	8002b0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a7e:	4b06      	ldr	r3, [pc, #24]	; (8002a98 <HAL_RCC_OscConfig+0x470>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d1f0      	bne.n	8002a6c <HAL_RCC_OscConfig+0x444>
 8002a8a:	e03d      	b.n	8002b08 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	699b      	ldr	r3, [r3, #24]
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d107      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e038      	b.n	8002b0a <HAL_RCC_OscConfig+0x4e2>
 8002a98:	40023800 	.word	0x40023800
 8002a9c:	40007000 	.word	0x40007000
 8002aa0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002aa4:	4b1b      	ldr	r3, [pc, #108]	; (8002b14 <HAL_RCC_OscConfig+0x4ec>)
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	699b      	ldr	r3, [r3, #24]
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d028      	beq.n	8002b04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d121      	bne.n	8002b04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d11a      	bne.n	8002b04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ace:	68fa      	ldr	r2, [r7, #12]
 8002ad0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ada:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d111      	bne.n	8002b04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aea:	085b      	lsrs	r3, r3, #1
 8002aec:	3b01      	subs	r3, #1
 8002aee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d107      	bne.n	8002b04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002afe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d001      	beq.n	8002b08 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e000      	b.n	8002b0a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002b08:	2300      	movs	r3, #0
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3718      	adds	r7, #24
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	40023800 	.word	0x40023800

08002b18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d101      	bne.n	8002b2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e0cc      	b.n	8002cc6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b2c:	4b68      	ldr	r3, [pc, #416]	; (8002cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0307 	and.w	r3, r3, #7
 8002b34:	683a      	ldr	r2, [r7, #0]
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d90c      	bls.n	8002b54 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b3a:	4b65      	ldr	r3, [pc, #404]	; (8002cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b3c:	683a      	ldr	r2, [r7, #0]
 8002b3e:	b2d2      	uxtb	r2, r2
 8002b40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b42:	4b63      	ldr	r3, [pc, #396]	; (8002cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0307 	and.w	r3, r3, #7
 8002b4a:	683a      	ldr	r2, [r7, #0]
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d001      	beq.n	8002b54 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e0b8      	b.n	8002cc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0302 	and.w	r3, r3, #2
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d020      	beq.n	8002ba2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0304 	and.w	r3, r3, #4
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d005      	beq.n	8002b78 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b6c:	4b59      	ldr	r3, [pc, #356]	; (8002cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	4a58      	ldr	r2, [pc, #352]	; (8002cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b72:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b76:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0308 	and.w	r3, r3, #8
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d005      	beq.n	8002b90 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b84:	4b53      	ldr	r3, [pc, #332]	; (8002cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	4a52      	ldr	r2, [pc, #328]	; (8002cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b8a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b8e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b90:	4b50      	ldr	r3, [pc, #320]	; (8002cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	494d      	ldr	r1, [pc, #308]	; (8002cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0301 	and.w	r3, r3, #1
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d044      	beq.n	8002c38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d107      	bne.n	8002bc6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bb6:	4b47      	ldr	r3, [pc, #284]	; (8002cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d119      	bne.n	8002bf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e07f      	b.n	8002cc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d003      	beq.n	8002bd6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bd2:	2b03      	cmp	r3, #3
 8002bd4:	d107      	bne.n	8002be6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bd6:	4b3f      	ldr	r3, [pc, #252]	; (8002cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d109      	bne.n	8002bf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e06f      	b.n	8002cc6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002be6:	4b3b      	ldr	r3, [pc, #236]	; (8002cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0302 	and.w	r3, r3, #2
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d101      	bne.n	8002bf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e067      	b.n	8002cc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bf6:	4b37      	ldr	r3, [pc, #220]	; (8002cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	f023 0203 	bic.w	r2, r3, #3
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	4934      	ldr	r1, [pc, #208]	; (8002cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c04:	4313      	orrs	r3, r2
 8002c06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c08:	f7fd ffc8 	bl	8000b9c <HAL_GetTick>
 8002c0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c0e:	e00a      	b.n	8002c26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c10:	f7fd ffc4 	bl	8000b9c <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d901      	bls.n	8002c26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e04f      	b.n	8002cc6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c26:	4b2b      	ldr	r3, [pc, #172]	; (8002cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	f003 020c 	and.w	r2, r3, #12
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d1eb      	bne.n	8002c10 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c38:	4b25      	ldr	r3, [pc, #148]	; (8002cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0307 	and.w	r3, r3, #7
 8002c40:	683a      	ldr	r2, [r7, #0]
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d20c      	bcs.n	8002c60 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c46:	4b22      	ldr	r3, [pc, #136]	; (8002cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c48:	683a      	ldr	r2, [r7, #0]
 8002c4a:	b2d2      	uxtb	r2, r2
 8002c4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c4e:	4b20      	ldr	r3, [pc, #128]	; (8002cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0307 	and.w	r3, r3, #7
 8002c56:	683a      	ldr	r2, [r7, #0]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d001      	beq.n	8002c60 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e032      	b.n	8002cc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0304 	and.w	r3, r3, #4
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d008      	beq.n	8002c7e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c6c:	4b19      	ldr	r3, [pc, #100]	; (8002cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	4916      	ldr	r1, [pc, #88]	; (8002cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0308 	and.w	r3, r3, #8
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d009      	beq.n	8002c9e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c8a:	4b12      	ldr	r3, [pc, #72]	; (8002cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	691b      	ldr	r3, [r3, #16]
 8002c96:	00db      	lsls	r3, r3, #3
 8002c98:	490e      	ldr	r1, [pc, #56]	; (8002cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c9e:	f000 f821 	bl	8002ce4 <HAL_RCC_GetSysClockFreq>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	4b0b      	ldr	r3, [pc, #44]	; (8002cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	091b      	lsrs	r3, r3, #4
 8002caa:	f003 030f 	and.w	r3, r3, #15
 8002cae:	490a      	ldr	r1, [pc, #40]	; (8002cd8 <HAL_RCC_ClockConfig+0x1c0>)
 8002cb0:	5ccb      	ldrb	r3, [r1, r3]
 8002cb2:	fa22 f303 	lsr.w	r3, r2, r3
 8002cb6:	4a09      	ldr	r2, [pc, #36]	; (8002cdc <HAL_RCC_ClockConfig+0x1c4>)
 8002cb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002cba:	4b09      	ldr	r3, [pc, #36]	; (8002ce0 <HAL_RCC_ClockConfig+0x1c8>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f7fd ff28 	bl	8000b14 <HAL_InitTick>

  return HAL_OK;
 8002cc4:	2300      	movs	r3, #0
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3710      	adds	r7, #16
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	40023c00 	.word	0x40023c00
 8002cd4:	40023800 	.word	0x40023800
 8002cd8:	080080d4 	.word	0x080080d4
 8002cdc:	20000000 	.word	0x20000000
 8002ce0:	20000004 	.word	0x20000004

08002ce4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ce4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ce8:	b094      	sub	sp, #80	; 0x50
 8002cea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002cec:	2300      	movs	r3, #0
 8002cee:	647b      	str	r3, [r7, #68]	; 0x44
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002cfc:	4b79      	ldr	r3, [pc, #484]	; (8002ee4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	f003 030c 	and.w	r3, r3, #12
 8002d04:	2b08      	cmp	r3, #8
 8002d06:	d00d      	beq.n	8002d24 <HAL_RCC_GetSysClockFreq+0x40>
 8002d08:	2b08      	cmp	r3, #8
 8002d0a:	f200 80e1 	bhi.w	8002ed0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d002      	beq.n	8002d18 <HAL_RCC_GetSysClockFreq+0x34>
 8002d12:	2b04      	cmp	r3, #4
 8002d14:	d003      	beq.n	8002d1e <HAL_RCC_GetSysClockFreq+0x3a>
 8002d16:	e0db      	b.n	8002ed0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d18:	4b73      	ldr	r3, [pc, #460]	; (8002ee8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002d1a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002d1c:	e0db      	b.n	8002ed6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d1e:	4b73      	ldr	r3, [pc, #460]	; (8002eec <HAL_RCC_GetSysClockFreq+0x208>)
 8002d20:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d22:	e0d8      	b.n	8002ed6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d24:	4b6f      	ldr	r3, [pc, #444]	; (8002ee4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d2c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d2e:	4b6d      	ldr	r3, [pc, #436]	; (8002ee4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d063      	beq.n	8002e02 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d3a:	4b6a      	ldr	r3, [pc, #424]	; (8002ee4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	099b      	lsrs	r3, r3, #6
 8002d40:	2200      	movs	r2, #0
 8002d42:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d44:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d4c:	633b      	str	r3, [r7, #48]	; 0x30
 8002d4e:	2300      	movs	r3, #0
 8002d50:	637b      	str	r3, [r7, #52]	; 0x34
 8002d52:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002d56:	4622      	mov	r2, r4
 8002d58:	462b      	mov	r3, r5
 8002d5a:	f04f 0000 	mov.w	r0, #0
 8002d5e:	f04f 0100 	mov.w	r1, #0
 8002d62:	0159      	lsls	r1, r3, #5
 8002d64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d68:	0150      	lsls	r0, r2, #5
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	460b      	mov	r3, r1
 8002d6e:	4621      	mov	r1, r4
 8002d70:	1a51      	subs	r1, r2, r1
 8002d72:	6139      	str	r1, [r7, #16]
 8002d74:	4629      	mov	r1, r5
 8002d76:	eb63 0301 	sbc.w	r3, r3, r1
 8002d7a:	617b      	str	r3, [r7, #20]
 8002d7c:	f04f 0200 	mov.w	r2, #0
 8002d80:	f04f 0300 	mov.w	r3, #0
 8002d84:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d88:	4659      	mov	r1, fp
 8002d8a:	018b      	lsls	r3, r1, #6
 8002d8c:	4651      	mov	r1, sl
 8002d8e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d92:	4651      	mov	r1, sl
 8002d94:	018a      	lsls	r2, r1, #6
 8002d96:	4651      	mov	r1, sl
 8002d98:	ebb2 0801 	subs.w	r8, r2, r1
 8002d9c:	4659      	mov	r1, fp
 8002d9e:	eb63 0901 	sbc.w	r9, r3, r1
 8002da2:	f04f 0200 	mov.w	r2, #0
 8002da6:	f04f 0300 	mov.w	r3, #0
 8002daa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002dae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002db2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002db6:	4690      	mov	r8, r2
 8002db8:	4699      	mov	r9, r3
 8002dba:	4623      	mov	r3, r4
 8002dbc:	eb18 0303 	adds.w	r3, r8, r3
 8002dc0:	60bb      	str	r3, [r7, #8]
 8002dc2:	462b      	mov	r3, r5
 8002dc4:	eb49 0303 	adc.w	r3, r9, r3
 8002dc8:	60fb      	str	r3, [r7, #12]
 8002dca:	f04f 0200 	mov.w	r2, #0
 8002dce:	f04f 0300 	mov.w	r3, #0
 8002dd2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002dd6:	4629      	mov	r1, r5
 8002dd8:	024b      	lsls	r3, r1, #9
 8002dda:	4621      	mov	r1, r4
 8002ddc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002de0:	4621      	mov	r1, r4
 8002de2:	024a      	lsls	r2, r1, #9
 8002de4:	4610      	mov	r0, r2
 8002de6:	4619      	mov	r1, r3
 8002de8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dea:	2200      	movs	r2, #0
 8002dec:	62bb      	str	r3, [r7, #40]	; 0x28
 8002dee:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002df0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002df4:	f7fd fa44 	bl	8000280 <__aeabi_uldivmod>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	460b      	mov	r3, r1
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e00:	e058      	b.n	8002eb4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e02:	4b38      	ldr	r3, [pc, #224]	; (8002ee4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	099b      	lsrs	r3, r3, #6
 8002e08:	2200      	movs	r2, #0
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	4611      	mov	r1, r2
 8002e0e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002e12:	623b      	str	r3, [r7, #32]
 8002e14:	2300      	movs	r3, #0
 8002e16:	627b      	str	r3, [r7, #36]	; 0x24
 8002e18:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002e1c:	4642      	mov	r2, r8
 8002e1e:	464b      	mov	r3, r9
 8002e20:	f04f 0000 	mov.w	r0, #0
 8002e24:	f04f 0100 	mov.w	r1, #0
 8002e28:	0159      	lsls	r1, r3, #5
 8002e2a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e2e:	0150      	lsls	r0, r2, #5
 8002e30:	4602      	mov	r2, r0
 8002e32:	460b      	mov	r3, r1
 8002e34:	4641      	mov	r1, r8
 8002e36:	ebb2 0a01 	subs.w	sl, r2, r1
 8002e3a:	4649      	mov	r1, r9
 8002e3c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002e40:	f04f 0200 	mov.w	r2, #0
 8002e44:	f04f 0300 	mov.w	r3, #0
 8002e48:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002e4c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002e50:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002e54:	ebb2 040a 	subs.w	r4, r2, sl
 8002e58:	eb63 050b 	sbc.w	r5, r3, fp
 8002e5c:	f04f 0200 	mov.w	r2, #0
 8002e60:	f04f 0300 	mov.w	r3, #0
 8002e64:	00eb      	lsls	r3, r5, #3
 8002e66:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e6a:	00e2      	lsls	r2, r4, #3
 8002e6c:	4614      	mov	r4, r2
 8002e6e:	461d      	mov	r5, r3
 8002e70:	4643      	mov	r3, r8
 8002e72:	18e3      	adds	r3, r4, r3
 8002e74:	603b      	str	r3, [r7, #0]
 8002e76:	464b      	mov	r3, r9
 8002e78:	eb45 0303 	adc.w	r3, r5, r3
 8002e7c:	607b      	str	r3, [r7, #4]
 8002e7e:	f04f 0200 	mov.w	r2, #0
 8002e82:	f04f 0300 	mov.w	r3, #0
 8002e86:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e8a:	4629      	mov	r1, r5
 8002e8c:	028b      	lsls	r3, r1, #10
 8002e8e:	4621      	mov	r1, r4
 8002e90:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e94:	4621      	mov	r1, r4
 8002e96:	028a      	lsls	r2, r1, #10
 8002e98:	4610      	mov	r0, r2
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	61bb      	str	r3, [r7, #24]
 8002ea2:	61fa      	str	r2, [r7, #28]
 8002ea4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ea8:	f7fd f9ea 	bl	8000280 <__aeabi_uldivmod>
 8002eac:	4602      	mov	r2, r0
 8002eae:	460b      	mov	r3, r1
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002eb4:	4b0b      	ldr	r3, [pc, #44]	; (8002ee4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	0c1b      	lsrs	r3, r3, #16
 8002eba:	f003 0303 	and.w	r3, r3, #3
 8002ebe:	3301      	adds	r3, #1
 8002ec0:	005b      	lsls	r3, r3, #1
 8002ec2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002ec4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002ec6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ec8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ecc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ece:	e002      	b.n	8002ed6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ed0:	4b05      	ldr	r3, [pc, #20]	; (8002ee8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002ed2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ed4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ed6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3750      	adds	r7, #80	; 0x50
 8002edc:	46bd      	mov	sp, r7
 8002ede:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ee2:	bf00      	nop
 8002ee4:	40023800 	.word	0x40023800
 8002ee8:	00f42400 	.word	0x00f42400
 8002eec:	007a1200 	.word	0x007a1200

08002ef0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ef4:	4b03      	ldr	r3, [pc, #12]	; (8002f04 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr
 8002f02:	bf00      	nop
 8002f04:	20000000 	.word	0x20000000

08002f08 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b086      	sub	sp, #24
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d101      	bne.n	8002f1c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e097      	b.n	800304c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d106      	bne.n	8002f36 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f7fd fcaf 	bl	8000894 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2202      	movs	r2, #2
 8002f3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	6812      	ldr	r2, [r2, #0]
 8002f48:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f4c:	f023 0307 	bic.w	r3, r3, #7
 8002f50:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	3304      	adds	r3, #4
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	4610      	mov	r0, r2
 8002f5e:	f000 fa29 	bl	80033b4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	699b      	ldr	r3, [r3, #24]
 8002f70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	6a1b      	ldr	r3, [r3, #32]
 8002f78:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	697a      	ldr	r2, [r7, #20]
 8002f80:	4313      	orrs	r3, r2
 8002f82:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f8a:	f023 0303 	bic.w	r3, r3, #3
 8002f8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	689a      	ldr	r2, [r3, #8]
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	699b      	ldr	r3, [r3, #24]
 8002f98:	021b      	lsls	r3, r3, #8
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	693a      	ldr	r2, [r7, #16]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002fa8:	f023 030c 	bic.w	r3, r3, #12
 8002fac:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002fb4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002fb8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	68da      	ldr	r2, [r3, #12]
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	69db      	ldr	r3, [r3, #28]
 8002fc2:	021b      	lsls	r3, r3, #8
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	693a      	ldr	r2, [r7, #16]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	691b      	ldr	r3, [r3, #16]
 8002fd0:	011a      	lsls	r2, r3, #4
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	6a1b      	ldr	r3, [r3, #32]
 8002fd6:	031b      	lsls	r3, r3, #12
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	693a      	ldr	r2, [r7, #16]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002fe6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8002fee:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	685a      	ldr	r2, [r3, #4]
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	695b      	ldr	r3, [r3, #20]
 8002ff8:	011b      	lsls	r3, r3, #4
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	68fa      	ldr	r2, [r7, #12]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	697a      	ldr	r2, [r7, #20]
 8003008:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	693a      	ldr	r2, [r7, #16]
 8003010:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	68fa      	ldr	r2, [r7, #12]
 8003018:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2201      	movs	r2, #1
 800301e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2201      	movs	r2, #1
 8003026:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2201      	movs	r2, #1
 800302e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2201      	movs	r2, #1
 8003036:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2201      	movs	r2, #1
 800303e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2201      	movs	r2, #1
 8003046:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800304a:	2300      	movs	r3, #0
}
 800304c:	4618      	mov	r0, r3
 800304e:	3718      	adds	r7, #24
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}

08003054 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b084      	sub	sp, #16
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003064:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800306c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003074:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800307c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d110      	bne.n	80030a6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003084:	7bfb      	ldrb	r3, [r7, #15]
 8003086:	2b01      	cmp	r3, #1
 8003088:	d102      	bne.n	8003090 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800308a:	7b7b      	ldrb	r3, [r7, #13]
 800308c:	2b01      	cmp	r3, #1
 800308e:	d001      	beq.n	8003094 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e069      	b.n	8003168 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2202      	movs	r2, #2
 8003098:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2202      	movs	r2, #2
 80030a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80030a4:	e031      	b.n	800310a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	2b04      	cmp	r3, #4
 80030aa:	d110      	bne.n	80030ce <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80030ac:	7bbb      	ldrb	r3, [r7, #14]
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d102      	bne.n	80030b8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80030b2:	7b3b      	ldrb	r3, [r7, #12]
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d001      	beq.n	80030bc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e055      	b.n	8003168 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2202      	movs	r2, #2
 80030c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2202      	movs	r2, #2
 80030c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80030cc:	e01d      	b.n	800310a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80030ce:	7bfb      	ldrb	r3, [r7, #15]
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d108      	bne.n	80030e6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80030d4:	7bbb      	ldrb	r3, [r7, #14]
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d105      	bne.n	80030e6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80030da:	7b7b      	ldrb	r3, [r7, #13]
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d102      	bne.n	80030e6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80030e0:	7b3b      	ldrb	r3, [r7, #12]
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d001      	beq.n	80030ea <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e03e      	b.n	8003168 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2202      	movs	r2, #2
 80030ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2202      	movs	r2, #2
 80030f6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2202      	movs	r2, #2
 80030fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2202      	movs	r2, #2
 8003106:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d003      	beq.n	8003118 <HAL_TIM_Encoder_Start+0xc4>
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	2b04      	cmp	r3, #4
 8003114:	d008      	beq.n	8003128 <HAL_TIM_Encoder_Start+0xd4>
 8003116:	e00f      	b.n	8003138 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	2201      	movs	r2, #1
 800311e:	2100      	movs	r1, #0
 8003120:	4618      	mov	r0, r3
 8003122:	f000 f9f3 	bl	800350c <TIM_CCxChannelCmd>
      break;
 8003126:	e016      	b.n	8003156 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2201      	movs	r2, #1
 800312e:	2104      	movs	r1, #4
 8003130:	4618      	mov	r0, r3
 8003132:	f000 f9eb 	bl	800350c <TIM_CCxChannelCmd>
      break;
 8003136:	e00e      	b.n	8003156 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2201      	movs	r2, #1
 800313e:	2100      	movs	r1, #0
 8003140:	4618      	mov	r0, r3
 8003142:	f000 f9e3 	bl	800350c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	2201      	movs	r2, #1
 800314c:	2104      	movs	r1, #4
 800314e:	4618      	mov	r0, r3
 8003150:	f000 f9dc 	bl	800350c <TIM_CCxChannelCmd>
      break;
 8003154:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f042 0201 	orr.w	r2, r2, #1
 8003164:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003166:	2300      	movs	r3, #0
}
 8003168:	4618      	mov	r0, r3
 800316a:	3710      	adds	r7, #16
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}

08003170 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b084      	sub	sp, #16
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	68db      	ldr	r3, [r3, #12]
 800317e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	691b      	ldr	r3, [r3, #16]
 8003186:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	f003 0302 	and.w	r3, r3, #2
 800318e:	2b00      	cmp	r3, #0
 8003190:	d020      	beq.n	80031d4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	f003 0302 	and.w	r3, r3, #2
 8003198:	2b00      	cmp	r3, #0
 800319a:	d01b      	beq.n	80031d4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f06f 0202 	mvn.w	r2, #2
 80031a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2201      	movs	r2, #1
 80031aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	699b      	ldr	r3, [r3, #24]
 80031b2:	f003 0303 	and.w	r3, r3, #3
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d003      	beq.n	80031c2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f000 f8dc 	bl	8003378 <HAL_TIM_IC_CaptureCallback>
 80031c0:	e005      	b.n	80031ce <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f000 f8ce 	bl	8003364 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f000 f8df 	bl	800338c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	f003 0304 	and.w	r3, r3, #4
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d020      	beq.n	8003220 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	f003 0304 	and.w	r3, r3, #4
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d01b      	beq.n	8003220 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f06f 0204 	mvn.w	r2, #4
 80031f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2202      	movs	r2, #2
 80031f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	699b      	ldr	r3, [r3, #24]
 80031fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003202:	2b00      	cmp	r3, #0
 8003204:	d003      	beq.n	800320e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f000 f8b6 	bl	8003378 <HAL_TIM_IC_CaptureCallback>
 800320c:	e005      	b.n	800321a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f000 f8a8 	bl	8003364 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f000 f8b9 	bl	800338c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	f003 0308 	and.w	r3, r3, #8
 8003226:	2b00      	cmp	r3, #0
 8003228:	d020      	beq.n	800326c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	f003 0308 	and.w	r3, r3, #8
 8003230:	2b00      	cmp	r3, #0
 8003232:	d01b      	beq.n	800326c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f06f 0208 	mvn.w	r2, #8
 800323c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2204      	movs	r2, #4
 8003242:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	69db      	ldr	r3, [r3, #28]
 800324a:	f003 0303 	and.w	r3, r3, #3
 800324e:	2b00      	cmp	r3, #0
 8003250:	d003      	beq.n	800325a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f000 f890 	bl	8003378 <HAL_TIM_IC_CaptureCallback>
 8003258:	e005      	b.n	8003266 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f000 f882 	bl	8003364 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	f000 f893 	bl	800338c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2200      	movs	r2, #0
 800326a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	f003 0310 	and.w	r3, r3, #16
 8003272:	2b00      	cmp	r3, #0
 8003274:	d020      	beq.n	80032b8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	f003 0310 	and.w	r3, r3, #16
 800327c:	2b00      	cmp	r3, #0
 800327e:	d01b      	beq.n	80032b8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f06f 0210 	mvn.w	r2, #16
 8003288:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2208      	movs	r2, #8
 800328e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	69db      	ldr	r3, [r3, #28]
 8003296:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800329a:	2b00      	cmp	r3, #0
 800329c:	d003      	beq.n	80032a6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f000 f86a 	bl	8003378 <HAL_TIM_IC_CaptureCallback>
 80032a4:	e005      	b.n	80032b2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f000 f85c 	bl	8003364 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	f000 f86d 	bl	800338c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	f003 0301 	and.w	r3, r3, #1
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d00c      	beq.n	80032dc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	f003 0301 	and.w	r3, r3, #1
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d007      	beq.n	80032dc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f06f 0201 	mvn.w	r2, #1
 80032d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f000 f83a 	bl	8003350 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d00c      	beq.n	8003300 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d007      	beq.n	8003300 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80032f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f000 f9b2 	bl	8003664 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003306:	2b00      	cmp	r3, #0
 8003308:	d00c      	beq.n	8003324 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003310:	2b00      	cmp	r3, #0
 8003312:	d007      	beq.n	8003324 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800331c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f000 f83e 	bl	80033a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	f003 0320 	and.w	r3, r3, #32
 800332a:	2b00      	cmp	r3, #0
 800332c:	d00c      	beq.n	8003348 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	f003 0320 	and.w	r3, r3, #32
 8003334:	2b00      	cmp	r3, #0
 8003336:	d007      	beq.n	8003348 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f06f 0220 	mvn.w	r2, #32
 8003340:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f000 f984 	bl	8003650 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003348:	bf00      	nop
 800334a:	3710      	adds	r7, #16
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}

08003350 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003358:	bf00      	nop
 800335a:	370c      	adds	r7, #12
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr

08003364 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800336c:	bf00      	nop
 800336e:	370c      	adds	r7, #12
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr

08003378 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003380:	bf00      	nop
 8003382:	370c      	adds	r7, #12
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr

0800338c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003394:	bf00      	nop
 8003396:	370c      	adds	r7, #12
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr

080033a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80033a8:	bf00      	nop
 80033aa:	370c      	adds	r7, #12
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr

080033b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b085      	sub	sp, #20
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	4a46      	ldr	r2, [pc, #280]	; (80034e0 <TIM_Base_SetConfig+0x12c>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d013      	beq.n	80033f4 <TIM_Base_SetConfig+0x40>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033d2:	d00f      	beq.n	80033f4 <TIM_Base_SetConfig+0x40>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	4a43      	ldr	r2, [pc, #268]	; (80034e4 <TIM_Base_SetConfig+0x130>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d00b      	beq.n	80033f4 <TIM_Base_SetConfig+0x40>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	4a42      	ldr	r2, [pc, #264]	; (80034e8 <TIM_Base_SetConfig+0x134>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d007      	beq.n	80033f4 <TIM_Base_SetConfig+0x40>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	4a41      	ldr	r2, [pc, #260]	; (80034ec <TIM_Base_SetConfig+0x138>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d003      	beq.n	80033f4 <TIM_Base_SetConfig+0x40>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	4a40      	ldr	r2, [pc, #256]	; (80034f0 <TIM_Base_SetConfig+0x13c>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d108      	bne.n	8003406 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	68fa      	ldr	r2, [r7, #12]
 8003402:	4313      	orrs	r3, r2
 8003404:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a35      	ldr	r2, [pc, #212]	; (80034e0 <TIM_Base_SetConfig+0x12c>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d02b      	beq.n	8003466 <TIM_Base_SetConfig+0xb2>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003414:	d027      	beq.n	8003466 <TIM_Base_SetConfig+0xb2>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4a32      	ldr	r2, [pc, #200]	; (80034e4 <TIM_Base_SetConfig+0x130>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d023      	beq.n	8003466 <TIM_Base_SetConfig+0xb2>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4a31      	ldr	r2, [pc, #196]	; (80034e8 <TIM_Base_SetConfig+0x134>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d01f      	beq.n	8003466 <TIM_Base_SetConfig+0xb2>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a30      	ldr	r2, [pc, #192]	; (80034ec <TIM_Base_SetConfig+0x138>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d01b      	beq.n	8003466 <TIM_Base_SetConfig+0xb2>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4a2f      	ldr	r2, [pc, #188]	; (80034f0 <TIM_Base_SetConfig+0x13c>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d017      	beq.n	8003466 <TIM_Base_SetConfig+0xb2>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4a2e      	ldr	r2, [pc, #184]	; (80034f4 <TIM_Base_SetConfig+0x140>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d013      	beq.n	8003466 <TIM_Base_SetConfig+0xb2>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4a2d      	ldr	r2, [pc, #180]	; (80034f8 <TIM_Base_SetConfig+0x144>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d00f      	beq.n	8003466 <TIM_Base_SetConfig+0xb2>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4a2c      	ldr	r2, [pc, #176]	; (80034fc <TIM_Base_SetConfig+0x148>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d00b      	beq.n	8003466 <TIM_Base_SetConfig+0xb2>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	4a2b      	ldr	r2, [pc, #172]	; (8003500 <TIM_Base_SetConfig+0x14c>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d007      	beq.n	8003466 <TIM_Base_SetConfig+0xb2>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4a2a      	ldr	r2, [pc, #168]	; (8003504 <TIM_Base_SetConfig+0x150>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d003      	beq.n	8003466 <TIM_Base_SetConfig+0xb2>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	4a29      	ldr	r2, [pc, #164]	; (8003508 <TIM_Base_SetConfig+0x154>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d108      	bne.n	8003478 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800346c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	68fa      	ldr	r2, [r7, #12]
 8003474:	4313      	orrs	r3, r2
 8003476:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	695b      	ldr	r3, [r3, #20]
 8003482:	4313      	orrs	r3, r2
 8003484:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	68fa      	ldr	r2, [r7, #12]
 800348a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	689a      	ldr	r2, [r3, #8]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	4a10      	ldr	r2, [pc, #64]	; (80034e0 <TIM_Base_SetConfig+0x12c>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d003      	beq.n	80034ac <TIM_Base_SetConfig+0xf8>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	4a12      	ldr	r2, [pc, #72]	; (80034f0 <TIM_Base_SetConfig+0x13c>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d103      	bne.n	80034b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	691a      	ldr	r2, [r3, #16]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2201      	movs	r2, #1
 80034b8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	691b      	ldr	r3, [r3, #16]
 80034be:	f003 0301 	and.w	r3, r3, #1
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d105      	bne.n	80034d2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	691b      	ldr	r3, [r3, #16]
 80034ca:	f023 0201 	bic.w	r2, r3, #1
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	611a      	str	r2, [r3, #16]
  }
}
 80034d2:	bf00      	nop
 80034d4:	3714      	adds	r7, #20
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr
 80034de:	bf00      	nop
 80034e0:	40010000 	.word	0x40010000
 80034e4:	40000400 	.word	0x40000400
 80034e8:	40000800 	.word	0x40000800
 80034ec:	40000c00 	.word	0x40000c00
 80034f0:	40010400 	.word	0x40010400
 80034f4:	40014000 	.word	0x40014000
 80034f8:	40014400 	.word	0x40014400
 80034fc:	40014800 	.word	0x40014800
 8003500:	40001800 	.word	0x40001800
 8003504:	40001c00 	.word	0x40001c00
 8003508:	40002000 	.word	0x40002000

0800350c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800350c:	b480      	push	{r7}
 800350e:	b087      	sub	sp, #28
 8003510:	af00      	add	r7, sp, #0
 8003512:	60f8      	str	r0, [r7, #12]
 8003514:	60b9      	str	r1, [r7, #8]
 8003516:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	f003 031f 	and.w	r3, r3, #31
 800351e:	2201      	movs	r2, #1
 8003520:	fa02 f303 	lsl.w	r3, r2, r3
 8003524:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	6a1a      	ldr	r2, [r3, #32]
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	43db      	mvns	r3, r3
 800352e:	401a      	ands	r2, r3
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	6a1a      	ldr	r2, [r3, #32]
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	f003 031f 	and.w	r3, r3, #31
 800353e:	6879      	ldr	r1, [r7, #4]
 8003540:	fa01 f303 	lsl.w	r3, r1, r3
 8003544:	431a      	orrs	r2, r3
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	621a      	str	r2, [r3, #32]
}
 800354a:	bf00      	nop
 800354c:	371c      	adds	r7, #28
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr
	...

08003558 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003558:	b480      	push	{r7}
 800355a:	b085      	sub	sp, #20
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003568:	2b01      	cmp	r3, #1
 800356a:	d101      	bne.n	8003570 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800356c:	2302      	movs	r3, #2
 800356e:	e05a      	b.n	8003626 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2202      	movs	r2, #2
 800357c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003596:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	68fa      	ldr	r2, [r7, #12]
 800359e:	4313      	orrs	r3, r2
 80035a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	68fa      	ldr	r2, [r7, #12]
 80035a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a21      	ldr	r2, [pc, #132]	; (8003634 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d022      	beq.n	80035fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035bc:	d01d      	beq.n	80035fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a1d      	ldr	r2, [pc, #116]	; (8003638 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d018      	beq.n	80035fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a1b      	ldr	r2, [pc, #108]	; (800363c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d013      	beq.n	80035fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a1a      	ldr	r2, [pc, #104]	; (8003640 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d00e      	beq.n	80035fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a18      	ldr	r2, [pc, #96]	; (8003644 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d009      	beq.n	80035fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a17      	ldr	r2, [pc, #92]	; (8003648 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d004      	beq.n	80035fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a15      	ldr	r2, [pc, #84]	; (800364c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d10c      	bne.n	8003614 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003600:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	68ba      	ldr	r2, [r7, #8]
 8003608:	4313      	orrs	r3, r2
 800360a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	68ba      	ldr	r2, [r7, #8]
 8003612:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003624:	2300      	movs	r3, #0
}
 8003626:	4618      	mov	r0, r3
 8003628:	3714      	adds	r7, #20
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr
 8003632:	bf00      	nop
 8003634:	40010000 	.word	0x40010000
 8003638:	40000400 	.word	0x40000400
 800363c:	40000800 	.word	0x40000800
 8003640:	40000c00 	.word	0x40000c00
 8003644:	40010400 	.word	0x40010400
 8003648:	40014000 	.word	0x40014000
 800364c:	40001800 	.word	0x40001800

08003650 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003650:	b480      	push	{r7}
 8003652:	b083      	sub	sp, #12
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003658:	bf00      	nop
 800365a:	370c      	adds	r7, #12
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr

08003664 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003664:	b480      	push	{r7}
 8003666:	b083      	sub	sp, #12
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800366c:	bf00      	nop
 800366e:	370c      	adds	r7, #12
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr

08003678 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003678:	b084      	sub	sp, #16
 800367a:	b580      	push	{r7, lr}
 800367c:	b084      	sub	sp, #16
 800367e:	af00      	add	r7, sp, #0
 8003680:	6078      	str	r0, [r7, #4]
 8003682:	f107 001c 	add.w	r0, r7, #28
 8003686:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800368a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800368e:	2b01      	cmp	r3, #1
 8003690:	d123      	bne.n	80036da <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003696:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80036a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036aa:	687a      	ldr	r2, [r7, #4]
 80036ac:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80036ba:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d105      	bne.n	80036ce <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f001 fae2 	bl	8004c98 <USB_CoreReset>
 80036d4:	4603      	mov	r3, r0
 80036d6:	73fb      	strb	r3, [r7, #15]
 80036d8:	e01b      	b.n	8003712 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f001 fad6 	bl	8004c98 <USB_CoreReset>
 80036ec:	4603      	mov	r3, r0
 80036ee:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80036f0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d106      	bne.n	8003706 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036fc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	639a      	str	r2, [r3, #56]	; 0x38
 8003704:	e005      	b.n	8003712 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800370a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003712:	7fbb      	ldrb	r3, [r7, #30]
 8003714:	2b01      	cmp	r3, #1
 8003716:	d10b      	bne.n	8003730 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	f043 0206 	orr.w	r2, r3, #6
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	f043 0220 	orr.w	r2, r3, #32
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003730:	7bfb      	ldrb	r3, [r7, #15]
}
 8003732:	4618      	mov	r0, r3
 8003734:	3710      	adds	r7, #16
 8003736:	46bd      	mov	sp, r7
 8003738:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800373c:	b004      	add	sp, #16
 800373e:	4770      	bx	lr

08003740 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003740:	b480      	push	{r7}
 8003742:	b087      	sub	sp, #28
 8003744:	af00      	add	r7, sp, #0
 8003746:	60f8      	str	r0, [r7, #12]
 8003748:	60b9      	str	r1, [r7, #8]
 800374a:	4613      	mov	r3, r2
 800374c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800374e:	79fb      	ldrb	r3, [r7, #7]
 8003750:	2b02      	cmp	r3, #2
 8003752:	d165      	bne.n	8003820 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	4a41      	ldr	r2, [pc, #260]	; (800385c <USB_SetTurnaroundTime+0x11c>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d906      	bls.n	800376a <USB_SetTurnaroundTime+0x2a>
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	4a40      	ldr	r2, [pc, #256]	; (8003860 <USB_SetTurnaroundTime+0x120>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d202      	bcs.n	800376a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003764:	230f      	movs	r3, #15
 8003766:	617b      	str	r3, [r7, #20]
 8003768:	e062      	b.n	8003830 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	4a3c      	ldr	r2, [pc, #240]	; (8003860 <USB_SetTurnaroundTime+0x120>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d306      	bcc.n	8003780 <USB_SetTurnaroundTime+0x40>
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	4a3b      	ldr	r2, [pc, #236]	; (8003864 <USB_SetTurnaroundTime+0x124>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d202      	bcs.n	8003780 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800377a:	230e      	movs	r3, #14
 800377c:	617b      	str	r3, [r7, #20]
 800377e:	e057      	b.n	8003830 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	4a38      	ldr	r2, [pc, #224]	; (8003864 <USB_SetTurnaroundTime+0x124>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d306      	bcc.n	8003796 <USB_SetTurnaroundTime+0x56>
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	4a37      	ldr	r2, [pc, #220]	; (8003868 <USB_SetTurnaroundTime+0x128>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d202      	bcs.n	8003796 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003790:	230d      	movs	r3, #13
 8003792:	617b      	str	r3, [r7, #20]
 8003794:	e04c      	b.n	8003830 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	4a33      	ldr	r2, [pc, #204]	; (8003868 <USB_SetTurnaroundTime+0x128>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d306      	bcc.n	80037ac <USB_SetTurnaroundTime+0x6c>
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	4a32      	ldr	r2, [pc, #200]	; (800386c <USB_SetTurnaroundTime+0x12c>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d802      	bhi.n	80037ac <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80037a6:	230c      	movs	r3, #12
 80037a8:	617b      	str	r3, [r7, #20]
 80037aa:	e041      	b.n	8003830 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	4a2f      	ldr	r2, [pc, #188]	; (800386c <USB_SetTurnaroundTime+0x12c>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d906      	bls.n	80037c2 <USB_SetTurnaroundTime+0x82>
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	4a2e      	ldr	r2, [pc, #184]	; (8003870 <USB_SetTurnaroundTime+0x130>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d802      	bhi.n	80037c2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80037bc:	230b      	movs	r3, #11
 80037be:	617b      	str	r3, [r7, #20]
 80037c0:	e036      	b.n	8003830 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	4a2a      	ldr	r2, [pc, #168]	; (8003870 <USB_SetTurnaroundTime+0x130>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d906      	bls.n	80037d8 <USB_SetTurnaroundTime+0x98>
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	4a29      	ldr	r2, [pc, #164]	; (8003874 <USB_SetTurnaroundTime+0x134>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d802      	bhi.n	80037d8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80037d2:	230a      	movs	r3, #10
 80037d4:	617b      	str	r3, [r7, #20]
 80037d6:	e02b      	b.n	8003830 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	4a26      	ldr	r2, [pc, #152]	; (8003874 <USB_SetTurnaroundTime+0x134>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d906      	bls.n	80037ee <USB_SetTurnaroundTime+0xae>
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	4a25      	ldr	r2, [pc, #148]	; (8003878 <USB_SetTurnaroundTime+0x138>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d202      	bcs.n	80037ee <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80037e8:	2309      	movs	r3, #9
 80037ea:	617b      	str	r3, [r7, #20]
 80037ec:	e020      	b.n	8003830 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	4a21      	ldr	r2, [pc, #132]	; (8003878 <USB_SetTurnaroundTime+0x138>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d306      	bcc.n	8003804 <USB_SetTurnaroundTime+0xc4>
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	4a20      	ldr	r2, [pc, #128]	; (800387c <USB_SetTurnaroundTime+0x13c>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d802      	bhi.n	8003804 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80037fe:	2308      	movs	r3, #8
 8003800:	617b      	str	r3, [r7, #20]
 8003802:	e015      	b.n	8003830 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	4a1d      	ldr	r2, [pc, #116]	; (800387c <USB_SetTurnaroundTime+0x13c>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d906      	bls.n	800381a <USB_SetTurnaroundTime+0xda>
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	4a1c      	ldr	r2, [pc, #112]	; (8003880 <USB_SetTurnaroundTime+0x140>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d202      	bcs.n	800381a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003814:	2307      	movs	r3, #7
 8003816:	617b      	str	r3, [r7, #20]
 8003818:	e00a      	b.n	8003830 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800381a:	2306      	movs	r3, #6
 800381c:	617b      	str	r3, [r7, #20]
 800381e:	e007      	b.n	8003830 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003820:	79fb      	ldrb	r3, [r7, #7]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d102      	bne.n	800382c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003826:	2309      	movs	r3, #9
 8003828:	617b      	str	r3, [r7, #20]
 800382a:	e001      	b.n	8003830 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800382c:	2309      	movs	r3, #9
 800382e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	68da      	ldr	r2, [r3, #12]
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	029b      	lsls	r3, r3, #10
 8003844:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003848:	431a      	orrs	r2, r3
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800384e:	2300      	movs	r3, #0
}
 8003850:	4618      	mov	r0, r3
 8003852:	371c      	adds	r7, #28
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr
 800385c:	00d8acbf 	.word	0x00d8acbf
 8003860:	00e4e1c0 	.word	0x00e4e1c0
 8003864:	00f42400 	.word	0x00f42400
 8003868:	01067380 	.word	0x01067380
 800386c:	011a499f 	.word	0x011a499f
 8003870:	01312cff 	.word	0x01312cff
 8003874:	014ca43f 	.word	0x014ca43f
 8003878:	016e3600 	.word	0x016e3600
 800387c:	01a6ab1f 	.word	0x01a6ab1f
 8003880:	01e84800 	.word	0x01e84800

08003884 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003884:	b480      	push	{r7}
 8003886:	b083      	sub	sp, #12
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	f043 0201 	orr.w	r2, r3, #1
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003898:	2300      	movs	r3, #0
}
 800389a:	4618      	mov	r0, r3
 800389c:	370c      	adds	r7, #12
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr

080038a6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80038a6:	b480      	push	{r7}
 80038a8:	b083      	sub	sp, #12
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	f023 0201 	bic.w	r2, r3, #1
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80038ba:	2300      	movs	r3, #0
}
 80038bc:	4618      	mov	r0, r3
 80038be:	370c      	adds	r7, #12
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr

080038c8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b084      	sub	sp, #16
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	460b      	mov	r3, r1
 80038d2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80038d4:	2300      	movs	r3, #0
 80038d6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80038e4:	78fb      	ldrb	r3, [r7, #3]
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d115      	bne.n	8003916 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80038f6:	200a      	movs	r0, #10
 80038f8:	f7fd f95c 	bl	8000bb4 <HAL_Delay>
      ms += 10U;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	330a      	adds	r3, #10
 8003900:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f001 f939 	bl	8004b7a <USB_GetMode>
 8003908:	4603      	mov	r3, r0
 800390a:	2b01      	cmp	r3, #1
 800390c:	d01e      	beq.n	800394c <USB_SetCurrentMode+0x84>
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2bc7      	cmp	r3, #199	; 0xc7
 8003912:	d9f0      	bls.n	80038f6 <USB_SetCurrentMode+0x2e>
 8003914:	e01a      	b.n	800394c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003916:	78fb      	ldrb	r3, [r7, #3]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d115      	bne.n	8003948 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003928:	200a      	movs	r0, #10
 800392a:	f7fd f943 	bl	8000bb4 <HAL_Delay>
      ms += 10U;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	330a      	adds	r3, #10
 8003932:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	f001 f920 	bl	8004b7a <USB_GetMode>
 800393a:	4603      	mov	r3, r0
 800393c:	2b00      	cmp	r3, #0
 800393e:	d005      	beq.n	800394c <USB_SetCurrentMode+0x84>
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2bc7      	cmp	r3, #199	; 0xc7
 8003944:	d9f0      	bls.n	8003928 <USB_SetCurrentMode+0x60>
 8003946:	e001      	b.n	800394c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e005      	b.n	8003958 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2bc8      	cmp	r3, #200	; 0xc8
 8003950:	d101      	bne.n	8003956 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e000      	b.n	8003958 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003956:	2300      	movs	r3, #0
}
 8003958:	4618      	mov	r0, r3
 800395a:	3710      	adds	r7, #16
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}

08003960 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003960:	b084      	sub	sp, #16
 8003962:	b580      	push	{r7, lr}
 8003964:	b086      	sub	sp, #24
 8003966:	af00      	add	r7, sp, #0
 8003968:	6078      	str	r0, [r7, #4]
 800396a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800396e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003972:	2300      	movs	r3, #0
 8003974:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800397a:	2300      	movs	r3, #0
 800397c:	613b      	str	r3, [r7, #16]
 800397e:	e009      	b.n	8003994 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	3340      	adds	r3, #64	; 0x40
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	4413      	add	r3, r2
 800398a:	2200      	movs	r2, #0
 800398c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	3301      	adds	r3, #1
 8003992:	613b      	str	r3, [r7, #16]
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	2b0e      	cmp	r3, #14
 8003998:	d9f2      	bls.n	8003980 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800399a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d11c      	bne.n	80039dc <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	68fa      	ldr	r2, [r7, #12]
 80039ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039b0:	f043 0302 	orr.w	r3, r3, #2
 80039b4:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ba:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039c6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039d2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	639a      	str	r2, [r3, #56]	; 0x38
 80039da:	e00b      	b.n	80039f4 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039e0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ec:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80039fa:	461a      	mov	r2, r3
 80039fc:	2300      	movs	r3, #0
 80039fe:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003a00:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d10d      	bne.n	8003a24 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003a08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d104      	bne.n	8003a1a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003a10:	2100      	movs	r1, #0
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f000 f968 	bl	8003ce8 <USB_SetDevSpeed>
 8003a18:	e008      	b.n	8003a2c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003a1a:	2101      	movs	r1, #1
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f000 f963 	bl	8003ce8 <USB_SetDevSpeed>
 8003a22:	e003      	b.n	8003a2c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003a24:	2103      	movs	r1, #3
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f000 f95e 	bl	8003ce8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003a2c:	2110      	movs	r1, #16
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f000 f8fa 	bl	8003c28 <USB_FlushTxFifo>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d001      	beq.n	8003a3e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f000 f924 	bl	8003c8c <USB_FlushRxFifo>
 8003a44:	4603      	mov	r3, r0
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d001      	beq.n	8003a4e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a54:	461a      	mov	r2, r3
 8003a56:	2300      	movs	r3, #0
 8003a58:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a60:	461a      	mov	r2, r3
 8003a62:	2300      	movs	r3, #0
 8003a64:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	2300      	movs	r3, #0
 8003a70:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a72:	2300      	movs	r3, #0
 8003a74:	613b      	str	r3, [r7, #16]
 8003a76:	e043      	b.n	8003b00 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	015a      	lsls	r2, r3, #5
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	4413      	add	r3, r2
 8003a80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003a8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a8e:	d118      	bne.n	8003ac2 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d10a      	bne.n	8003aac <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	015a      	lsls	r2, r3, #5
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	4413      	add	r3, r2
 8003a9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003aa8:	6013      	str	r3, [r2, #0]
 8003aaa:	e013      	b.n	8003ad4 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	015a      	lsls	r2, r3, #5
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	4413      	add	r3, r2
 8003ab4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ab8:	461a      	mov	r2, r3
 8003aba:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003abe:	6013      	str	r3, [r2, #0]
 8003ac0:	e008      	b.n	8003ad4 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	015a      	lsls	r2, r3, #5
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	4413      	add	r3, r2
 8003aca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ace:	461a      	mov	r2, r3
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	015a      	lsls	r2, r3, #5
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	4413      	add	r3, r2
 8003adc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	015a      	lsls	r2, r3, #5
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	4413      	add	r3, r2
 8003aee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003af2:	461a      	mov	r2, r3
 8003af4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003af8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	3301      	adds	r3, #1
 8003afe:	613b      	str	r3, [r7, #16]
 8003b00:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003b04:	461a      	mov	r2, r3
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d3b5      	bcc.n	8003a78 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	613b      	str	r3, [r7, #16]
 8003b10:	e043      	b.n	8003b9a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	015a      	lsls	r2, r3, #5
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	4413      	add	r3, r2
 8003b1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b28:	d118      	bne.n	8003b5c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d10a      	bne.n	8003b46 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	015a      	lsls	r2, r3, #5
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	4413      	add	r3, r2
 8003b38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003b42:	6013      	str	r3, [r2, #0]
 8003b44:	e013      	b.n	8003b6e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	015a      	lsls	r2, r3, #5
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	4413      	add	r3, r2
 8003b4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b52:	461a      	mov	r2, r3
 8003b54:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003b58:	6013      	str	r3, [r2, #0]
 8003b5a:	e008      	b.n	8003b6e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	015a      	lsls	r2, r3, #5
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	4413      	add	r3, r2
 8003b64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b68:	461a      	mov	r2, r3
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	015a      	lsls	r2, r3, #5
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	4413      	add	r3, r2
 8003b76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	015a      	lsls	r2, r3, #5
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	4413      	add	r3, r2
 8003b88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003b92:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	3301      	adds	r3, #1
 8003b98:	613b      	str	r3, [r7, #16]
 8003b9a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d3b5      	bcc.n	8003b12 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bac:	691b      	ldr	r3, [r3, #16]
 8003bae:	68fa      	ldr	r2, [r7, #12]
 8003bb0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003bb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bb8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003bc6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003bc8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d105      	bne.n	8003bdc <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	699b      	ldr	r3, [r3, #24]
 8003bd4:	f043 0210 	orr.w	r2, r3, #16
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	699a      	ldr	r2, [r3, #24]
 8003be0:	4b10      	ldr	r3, [pc, #64]	; (8003c24 <USB_DevInit+0x2c4>)
 8003be2:	4313      	orrs	r3, r2
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003be8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d005      	beq.n	8003bfc <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	699b      	ldr	r3, [r3, #24]
 8003bf4:	f043 0208 	orr.w	r2, r3, #8
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003bfc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d107      	bne.n	8003c14 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	699b      	ldr	r3, [r3, #24]
 8003c08:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003c0c:	f043 0304 	orr.w	r3, r3, #4
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003c14:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3718      	adds	r7, #24
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003c20:	b004      	add	sp, #16
 8003c22:	4770      	bx	lr
 8003c24:	803c3800 	.word	0x803c3800

08003c28 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b085      	sub	sp, #20
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003c32:	2300      	movs	r3, #0
 8003c34:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	3301      	adds	r3, #1
 8003c3a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003c42:	d901      	bls.n	8003c48 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003c44:	2303      	movs	r3, #3
 8003c46:	e01b      	b.n	8003c80 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	691b      	ldr	r3, [r3, #16]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	daf2      	bge.n	8003c36 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003c50:	2300      	movs	r3, #0
 8003c52:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	019b      	lsls	r3, r3, #6
 8003c58:	f043 0220 	orr.w	r2, r3, #32
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	3301      	adds	r3, #1
 8003c64:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003c6c:	d901      	bls.n	8003c72 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003c6e:	2303      	movs	r3, #3
 8003c70:	e006      	b.n	8003c80 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	691b      	ldr	r3, [r3, #16]
 8003c76:	f003 0320 	and.w	r3, r3, #32
 8003c7a:	2b20      	cmp	r3, #32
 8003c7c:	d0f0      	beq.n	8003c60 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003c7e:	2300      	movs	r3, #0
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3714      	adds	r7, #20
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr

08003c8c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b085      	sub	sp, #20
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003c94:	2300      	movs	r3, #0
 8003c96:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	3301      	adds	r3, #1
 8003c9c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003ca4:	d901      	bls.n	8003caa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	e018      	b.n	8003cdc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	691b      	ldr	r3, [r3, #16]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	daf2      	bge.n	8003c98 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2210      	movs	r2, #16
 8003cba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	3301      	adds	r3, #1
 8003cc0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003cc8:	d901      	bls.n	8003cce <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	e006      	b.n	8003cdc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	f003 0310 	and.w	r3, r3, #16
 8003cd6:	2b10      	cmp	r3, #16
 8003cd8:	d0f0      	beq.n	8003cbc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003cda:	2300      	movs	r3, #0
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3714      	adds	r7, #20
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr

08003ce8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b085      	sub	sp, #20
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	460b      	mov	r3, r1
 8003cf2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	78fb      	ldrb	r3, [r7, #3]
 8003d02:	68f9      	ldr	r1, [r7, #12]
 8003d04:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003d0c:	2300      	movs	r3, #0
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3714      	adds	r7, #20
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr

08003d1a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8003d1a:	b480      	push	{r7}
 8003d1c:	b087      	sub	sp, #28
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	f003 0306 	and.w	r3, r3, #6
 8003d32:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d102      	bne.n	8003d40 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	75fb      	strb	r3, [r7, #23]
 8003d3e:	e00a      	b.n	8003d56 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2b02      	cmp	r3, #2
 8003d44:	d002      	beq.n	8003d4c <USB_GetDevSpeed+0x32>
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2b06      	cmp	r3, #6
 8003d4a:	d102      	bne.n	8003d52 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003d4c:	2302      	movs	r3, #2
 8003d4e:	75fb      	strb	r3, [r7, #23]
 8003d50:	e001      	b.n	8003d56 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003d52:	230f      	movs	r3, #15
 8003d54:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003d56:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	371c      	adds	r7, #28
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr

08003d64 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b085      	sub	sp, #20
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	781b      	ldrb	r3, [r3, #0]
 8003d76:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	785b      	ldrb	r3, [r3, #1]
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d13a      	bne.n	8003df6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d86:	69da      	ldr	r2, [r3, #28]
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	781b      	ldrb	r3, [r3, #0]
 8003d8c:	f003 030f 	and.w	r3, r3, #15
 8003d90:	2101      	movs	r1, #1
 8003d92:	fa01 f303 	lsl.w	r3, r1, r3
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	68f9      	ldr	r1, [r7, #12]
 8003d9a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	015a      	lsls	r2, r3, #5
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	4413      	add	r3, r2
 8003daa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d155      	bne.n	8003e64 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	015a      	lsls	r2, r3, #5
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	4413      	add	r3, r2
 8003dc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	791b      	ldrb	r3, [r3, #4]
 8003dd2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003dd4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	059b      	lsls	r3, r3, #22
 8003dda:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	68ba      	ldr	r2, [r7, #8]
 8003de0:	0151      	lsls	r1, r2, #5
 8003de2:	68fa      	ldr	r2, [r7, #12]
 8003de4:	440a      	add	r2, r1
 8003de6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003dea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003df2:	6013      	str	r3, [r2, #0]
 8003df4:	e036      	b.n	8003e64 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dfc:	69da      	ldr	r2, [r3, #28]
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	781b      	ldrb	r3, [r3, #0]
 8003e02:	f003 030f 	and.w	r3, r3, #15
 8003e06:	2101      	movs	r1, #1
 8003e08:	fa01 f303 	lsl.w	r3, r1, r3
 8003e0c:	041b      	lsls	r3, r3, #16
 8003e0e:	68f9      	ldr	r1, [r7, #12]
 8003e10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e14:	4313      	orrs	r3, r2
 8003e16:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	015a      	lsls	r2, r3, #5
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	4413      	add	r3, r2
 8003e20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d11a      	bne.n	8003e64 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	015a      	lsls	r2, r3, #5
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	4413      	add	r3, r2
 8003e36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	791b      	ldrb	r3, [r3, #4]
 8003e48:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003e4a:	430b      	orrs	r3, r1
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	68ba      	ldr	r2, [r7, #8]
 8003e50:	0151      	lsls	r1, r2, #5
 8003e52:	68fa      	ldr	r2, [r7, #12]
 8003e54:	440a      	add	r2, r1
 8003e56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e62:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003e64:	2300      	movs	r3, #0
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3714      	adds	r7, #20
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr
	...

08003e74 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b085      	sub	sp, #20
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	781b      	ldrb	r3, [r3, #0]
 8003e86:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	785b      	ldrb	r3, [r3, #1]
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d161      	bne.n	8003f54 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	015a      	lsls	r2, r3, #5
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	4413      	add	r3, r2
 8003e98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ea2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ea6:	d11f      	bne.n	8003ee8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	015a      	lsls	r2, r3, #5
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	4413      	add	r3, r2
 8003eb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	68ba      	ldr	r2, [r7, #8]
 8003eb8:	0151      	lsls	r1, r2, #5
 8003eba:	68fa      	ldr	r2, [r7, #12]
 8003ebc:	440a      	add	r2, r1
 8003ebe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ec2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003ec6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	015a      	lsls	r2, r3, #5
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	4413      	add	r3, r2
 8003ed0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	68ba      	ldr	r2, [r7, #8]
 8003ed8:	0151      	lsls	r1, r2, #5
 8003eda:	68fa      	ldr	r2, [r7, #12]
 8003edc:	440a      	add	r2, r1
 8003ede:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ee2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003ee6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	781b      	ldrb	r3, [r3, #0]
 8003ef4:	f003 030f 	and.w	r3, r3, #15
 8003ef8:	2101      	movs	r1, #1
 8003efa:	fa01 f303 	lsl.w	r3, r1, r3
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	43db      	mvns	r3, r3
 8003f02:	68f9      	ldr	r1, [r7, #12]
 8003f04:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f08:	4013      	ands	r3, r2
 8003f0a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f12:	69da      	ldr	r2, [r3, #28]
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	781b      	ldrb	r3, [r3, #0]
 8003f18:	f003 030f 	and.w	r3, r3, #15
 8003f1c:	2101      	movs	r1, #1
 8003f1e:	fa01 f303 	lsl.w	r3, r1, r3
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	43db      	mvns	r3, r3
 8003f26:	68f9      	ldr	r1, [r7, #12]
 8003f28:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	015a      	lsls	r2, r3, #5
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	4413      	add	r3, r2
 8003f38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	0159      	lsls	r1, r3, #5
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	440b      	add	r3, r1
 8003f46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f4a:	4619      	mov	r1, r3
 8003f4c:	4b35      	ldr	r3, [pc, #212]	; (8004024 <USB_DeactivateEndpoint+0x1b0>)
 8003f4e:	4013      	ands	r3, r2
 8003f50:	600b      	str	r3, [r1, #0]
 8003f52:	e060      	b.n	8004016 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	015a      	lsls	r2, r3, #5
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	4413      	add	r3, r2
 8003f5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f6a:	d11f      	bne.n	8003fac <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	015a      	lsls	r2, r3, #5
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	4413      	add	r3, r2
 8003f74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	68ba      	ldr	r2, [r7, #8]
 8003f7c:	0151      	lsls	r1, r2, #5
 8003f7e:	68fa      	ldr	r2, [r7, #12]
 8003f80:	440a      	add	r2, r1
 8003f82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f86:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003f8a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	015a      	lsls	r2, r3, #5
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	4413      	add	r3, r2
 8003f94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	68ba      	ldr	r2, [r7, #8]
 8003f9c:	0151      	lsls	r1, r2, #5
 8003f9e:	68fa      	ldr	r2, [r7, #12]
 8003fa0:	440a      	add	r2, r1
 8003fa2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003fa6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003faa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fb2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	781b      	ldrb	r3, [r3, #0]
 8003fb8:	f003 030f 	and.w	r3, r3, #15
 8003fbc:	2101      	movs	r1, #1
 8003fbe:	fa01 f303 	lsl.w	r3, r1, r3
 8003fc2:	041b      	lsls	r3, r3, #16
 8003fc4:	43db      	mvns	r3, r3
 8003fc6:	68f9      	ldr	r1, [r7, #12]
 8003fc8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003fcc:	4013      	ands	r3, r2
 8003fce:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fd6:	69da      	ldr	r2, [r3, #28]
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	781b      	ldrb	r3, [r3, #0]
 8003fdc:	f003 030f 	and.w	r3, r3, #15
 8003fe0:	2101      	movs	r1, #1
 8003fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8003fe6:	041b      	lsls	r3, r3, #16
 8003fe8:	43db      	mvns	r3, r3
 8003fea:	68f9      	ldr	r1, [r7, #12]
 8003fec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	015a      	lsls	r2, r3, #5
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	4413      	add	r3, r2
 8003ffc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	0159      	lsls	r1, r3, #5
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	440b      	add	r3, r1
 800400a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800400e:	4619      	mov	r1, r3
 8004010:	4b05      	ldr	r3, [pc, #20]	; (8004028 <USB_DeactivateEndpoint+0x1b4>)
 8004012:	4013      	ands	r3, r2
 8004014:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004016:	2300      	movs	r3, #0
}
 8004018:	4618      	mov	r0, r3
 800401a:	3714      	adds	r7, #20
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr
 8004024:	ec337800 	.word	0xec337800
 8004028:	eff37800 	.word	0xeff37800

0800402c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b08a      	sub	sp, #40	; 0x28
 8004030:	af02      	add	r7, sp, #8
 8004032:	60f8      	str	r0, [r7, #12]
 8004034:	60b9      	str	r1, [r7, #8]
 8004036:	4613      	mov	r3, r2
 8004038:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	781b      	ldrb	r3, [r3, #0]
 8004042:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	785b      	ldrb	r3, [r3, #1]
 8004048:	2b01      	cmp	r3, #1
 800404a:	f040 817a 	bne.w	8004342 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	691b      	ldr	r3, [r3, #16]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d132      	bne.n	80040bc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004056:	69bb      	ldr	r3, [r7, #24]
 8004058:	015a      	lsls	r2, r3, #5
 800405a:	69fb      	ldr	r3, [r7, #28]
 800405c:	4413      	add	r3, r2
 800405e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004062:	691b      	ldr	r3, [r3, #16]
 8004064:	69ba      	ldr	r2, [r7, #24]
 8004066:	0151      	lsls	r1, r2, #5
 8004068:	69fa      	ldr	r2, [r7, #28]
 800406a:	440a      	add	r2, r1
 800406c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004070:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004074:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004078:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800407a:	69bb      	ldr	r3, [r7, #24]
 800407c:	015a      	lsls	r2, r3, #5
 800407e:	69fb      	ldr	r3, [r7, #28]
 8004080:	4413      	add	r3, r2
 8004082:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004086:	691b      	ldr	r3, [r3, #16]
 8004088:	69ba      	ldr	r2, [r7, #24]
 800408a:	0151      	lsls	r1, r2, #5
 800408c:	69fa      	ldr	r2, [r7, #28]
 800408e:	440a      	add	r2, r1
 8004090:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004094:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004098:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800409a:	69bb      	ldr	r3, [r7, #24]
 800409c:	015a      	lsls	r2, r3, #5
 800409e:	69fb      	ldr	r3, [r7, #28]
 80040a0:	4413      	add	r3, r2
 80040a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040a6:	691b      	ldr	r3, [r3, #16]
 80040a8:	69ba      	ldr	r2, [r7, #24]
 80040aa:	0151      	lsls	r1, r2, #5
 80040ac:	69fa      	ldr	r2, [r7, #28]
 80040ae:	440a      	add	r2, r1
 80040b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040b4:	0cdb      	lsrs	r3, r3, #19
 80040b6:	04db      	lsls	r3, r3, #19
 80040b8:	6113      	str	r3, [r2, #16]
 80040ba:	e092      	b.n	80041e2 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80040bc:	69bb      	ldr	r3, [r7, #24]
 80040be:	015a      	lsls	r2, r3, #5
 80040c0:	69fb      	ldr	r3, [r7, #28]
 80040c2:	4413      	add	r3, r2
 80040c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040c8:	691b      	ldr	r3, [r3, #16]
 80040ca:	69ba      	ldr	r2, [r7, #24]
 80040cc:	0151      	lsls	r1, r2, #5
 80040ce:	69fa      	ldr	r2, [r7, #28]
 80040d0:	440a      	add	r2, r1
 80040d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040d6:	0cdb      	lsrs	r3, r3, #19
 80040d8:	04db      	lsls	r3, r3, #19
 80040da:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80040dc:	69bb      	ldr	r3, [r7, #24]
 80040de:	015a      	lsls	r2, r3, #5
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	4413      	add	r3, r2
 80040e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040e8:	691b      	ldr	r3, [r3, #16]
 80040ea:	69ba      	ldr	r2, [r7, #24]
 80040ec:	0151      	lsls	r1, r2, #5
 80040ee:	69fa      	ldr	r2, [r7, #28]
 80040f0:	440a      	add	r2, r1
 80040f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040f6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80040fa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80040fe:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8004100:	69bb      	ldr	r3, [r7, #24]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d11a      	bne.n	800413c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	691a      	ldr	r2, [r3, #16]
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	429a      	cmp	r2, r3
 8004110:	d903      	bls.n	800411a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	689a      	ldr	r2, [r3, #8]
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800411a:	69bb      	ldr	r3, [r7, #24]
 800411c:	015a      	lsls	r2, r3, #5
 800411e:	69fb      	ldr	r3, [r7, #28]
 8004120:	4413      	add	r3, r2
 8004122:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004126:	691b      	ldr	r3, [r3, #16]
 8004128:	69ba      	ldr	r2, [r7, #24]
 800412a:	0151      	lsls	r1, r2, #5
 800412c:	69fa      	ldr	r2, [r7, #28]
 800412e:	440a      	add	r2, r1
 8004130:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004134:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004138:	6113      	str	r3, [r2, #16]
 800413a:	e01b      	b.n	8004174 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800413c:	69bb      	ldr	r3, [r7, #24]
 800413e:	015a      	lsls	r2, r3, #5
 8004140:	69fb      	ldr	r3, [r7, #28]
 8004142:	4413      	add	r3, r2
 8004144:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004148:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	6919      	ldr	r1, [r3, #16]
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	440b      	add	r3, r1
 8004154:	1e59      	subs	r1, r3, #1
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	fbb1 f3f3 	udiv	r3, r1, r3
 800415e:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004160:	4ba2      	ldr	r3, [pc, #648]	; (80043ec <USB_EPStartXfer+0x3c0>)
 8004162:	400b      	ands	r3, r1
 8004164:	69b9      	ldr	r1, [r7, #24]
 8004166:	0148      	lsls	r0, r1, #5
 8004168:	69f9      	ldr	r1, [r7, #28]
 800416a:	4401      	add	r1, r0
 800416c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004170:	4313      	orrs	r3, r2
 8004172:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004174:	69bb      	ldr	r3, [r7, #24]
 8004176:	015a      	lsls	r2, r3, #5
 8004178:	69fb      	ldr	r3, [r7, #28]
 800417a:	4413      	add	r3, r2
 800417c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004180:	691a      	ldr	r2, [r3, #16]
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	691b      	ldr	r3, [r3, #16]
 8004186:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800418a:	69b9      	ldr	r1, [r7, #24]
 800418c:	0148      	lsls	r0, r1, #5
 800418e:	69f9      	ldr	r1, [r7, #28]
 8004190:	4401      	add	r1, r0
 8004192:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004196:	4313      	orrs	r3, r2
 8004198:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	791b      	ldrb	r3, [r3, #4]
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d11f      	bne.n	80041e2 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80041a2:	69bb      	ldr	r3, [r7, #24]
 80041a4:	015a      	lsls	r2, r3, #5
 80041a6:	69fb      	ldr	r3, [r7, #28]
 80041a8:	4413      	add	r3, r2
 80041aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041ae:	691b      	ldr	r3, [r3, #16]
 80041b0:	69ba      	ldr	r2, [r7, #24]
 80041b2:	0151      	lsls	r1, r2, #5
 80041b4:	69fa      	ldr	r2, [r7, #28]
 80041b6:	440a      	add	r2, r1
 80041b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041bc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80041c0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80041c2:	69bb      	ldr	r3, [r7, #24]
 80041c4:	015a      	lsls	r2, r3, #5
 80041c6:	69fb      	ldr	r3, [r7, #28]
 80041c8:	4413      	add	r3, r2
 80041ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041ce:	691b      	ldr	r3, [r3, #16]
 80041d0:	69ba      	ldr	r2, [r7, #24]
 80041d2:	0151      	lsls	r1, r2, #5
 80041d4:	69fa      	ldr	r2, [r7, #28]
 80041d6:	440a      	add	r2, r1
 80041d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041dc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80041e0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80041e2:	79fb      	ldrb	r3, [r7, #7]
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d14b      	bne.n	8004280 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	69db      	ldr	r3, [r3, #28]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d009      	beq.n	8004204 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80041f0:	69bb      	ldr	r3, [r7, #24]
 80041f2:	015a      	lsls	r2, r3, #5
 80041f4:	69fb      	ldr	r3, [r7, #28]
 80041f6:	4413      	add	r3, r2
 80041f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041fc:	461a      	mov	r2, r3
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	69db      	ldr	r3, [r3, #28]
 8004202:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	791b      	ldrb	r3, [r3, #4]
 8004208:	2b01      	cmp	r3, #1
 800420a:	d128      	bne.n	800425e <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800420c:	69fb      	ldr	r3, [r7, #28]
 800420e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004218:	2b00      	cmp	r3, #0
 800421a:	d110      	bne.n	800423e <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800421c:	69bb      	ldr	r3, [r7, #24]
 800421e:	015a      	lsls	r2, r3, #5
 8004220:	69fb      	ldr	r3, [r7, #28]
 8004222:	4413      	add	r3, r2
 8004224:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	69ba      	ldr	r2, [r7, #24]
 800422c:	0151      	lsls	r1, r2, #5
 800422e:	69fa      	ldr	r2, [r7, #28]
 8004230:	440a      	add	r2, r1
 8004232:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004236:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800423a:	6013      	str	r3, [r2, #0]
 800423c:	e00f      	b.n	800425e <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800423e:	69bb      	ldr	r3, [r7, #24]
 8004240:	015a      	lsls	r2, r3, #5
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	4413      	add	r3, r2
 8004246:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	69ba      	ldr	r2, [r7, #24]
 800424e:	0151      	lsls	r1, r2, #5
 8004250:	69fa      	ldr	r2, [r7, #28]
 8004252:	440a      	add	r2, r1
 8004254:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004258:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800425c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800425e:	69bb      	ldr	r3, [r7, #24]
 8004260:	015a      	lsls	r2, r3, #5
 8004262:	69fb      	ldr	r3, [r7, #28]
 8004264:	4413      	add	r3, r2
 8004266:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	69ba      	ldr	r2, [r7, #24]
 800426e:	0151      	lsls	r1, r2, #5
 8004270:	69fa      	ldr	r2, [r7, #28]
 8004272:	440a      	add	r2, r1
 8004274:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004278:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800427c:	6013      	str	r3, [r2, #0]
 800427e:	e165      	b.n	800454c <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004280:	69bb      	ldr	r3, [r7, #24]
 8004282:	015a      	lsls	r2, r3, #5
 8004284:	69fb      	ldr	r3, [r7, #28]
 8004286:	4413      	add	r3, r2
 8004288:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	69ba      	ldr	r2, [r7, #24]
 8004290:	0151      	lsls	r1, r2, #5
 8004292:	69fa      	ldr	r2, [r7, #28]
 8004294:	440a      	add	r2, r1
 8004296:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800429a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800429e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	791b      	ldrb	r3, [r3, #4]
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d015      	beq.n	80042d4 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	691b      	ldr	r3, [r3, #16]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	f000 814d 	beq.w	800454c <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80042b2:	69fb      	ldr	r3, [r7, #28]
 80042b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	781b      	ldrb	r3, [r3, #0]
 80042be:	f003 030f 	and.w	r3, r3, #15
 80042c2:	2101      	movs	r1, #1
 80042c4:	fa01 f303 	lsl.w	r3, r1, r3
 80042c8:	69f9      	ldr	r1, [r7, #28]
 80042ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80042ce:	4313      	orrs	r3, r2
 80042d0:	634b      	str	r3, [r1, #52]	; 0x34
 80042d2:	e13b      	b.n	800454c <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80042d4:	69fb      	ldr	r3, [r7, #28]
 80042d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d110      	bne.n	8004306 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80042e4:	69bb      	ldr	r3, [r7, #24]
 80042e6:	015a      	lsls	r2, r3, #5
 80042e8:	69fb      	ldr	r3, [r7, #28]
 80042ea:	4413      	add	r3, r2
 80042ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	69ba      	ldr	r2, [r7, #24]
 80042f4:	0151      	lsls	r1, r2, #5
 80042f6:	69fa      	ldr	r2, [r7, #28]
 80042f8:	440a      	add	r2, r1
 80042fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042fe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004302:	6013      	str	r3, [r2, #0]
 8004304:	e00f      	b.n	8004326 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004306:	69bb      	ldr	r3, [r7, #24]
 8004308:	015a      	lsls	r2, r3, #5
 800430a:	69fb      	ldr	r3, [r7, #28]
 800430c:	4413      	add	r3, r2
 800430e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	69ba      	ldr	r2, [r7, #24]
 8004316:	0151      	lsls	r1, r2, #5
 8004318:	69fa      	ldr	r2, [r7, #28]
 800431a:	440a      	add	r2, r1
 800431c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004320:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004324:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	68d9      	ldr	r1, [r3, #12]
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	781a      	ldrb	r2, [r3, #0]
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	691b      	ldr	r3, [r3, #16]
 8004332:	b298      	uxth	r0, r3
 8004334:	79fb      	ldrb	r3, [r7, #7]
 8004336:	9300      	str	r3, [sp, #0]
 8004338:	4603      	mov	r3, r0
 800433a:	68f8      	ldr	r0, [r7, #12]
 800433c:	f000 f9b8 	bl	80046b0 <USB_WritePacket>
 8004340:	e104      	b.n	800454c <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004342:	69bb      	ldr	r3, [r7, #24]
 8004344:	015a      	lsls	r2, r3, #5
 8004346:	69fb      	ldr	r3, [r7, #28]
 8004348:	4413      	add	r3, r2
 800434a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800434e:	691b      	ldr	r3, [r3, #16]
 8004350:	69ba      	ldr	r2, [r7, #24]
 8004352:	0151      	lsls	r1, r2, #5
 8004354:	69fa      	ldr	r2, [r7, #28]
 8004356:	440a      	add	r2, r1
 8004358:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800435c:	0cdb      	lsrs	r3, r3, #19
 800435e:	04db      	lsls	r3, r3, #19
 8004360:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004362:	69bb      	ldr	r3, [r7, #24]
 8004364:	015a      	lsls	r2, r3, #5
 8004366:	69fb      	ldr	r3, [r7, #28]
 8004368:	4413      	add	r3, r2
 800436a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800436e:	691b      	ldr	r3, [r3, #16]
 8004370:	69ba      	ldr	r2, [r7, #24]
 8004372:	0151      	lsls	r1, r2, #5
 8004374:	69fa      	ldr	r2, [r7, #28]
 8004376:	440a      	add	r2, r1
 8004378:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800437c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004380:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004384:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8004386:	69bb      	ldr	r3, [r7, #24]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d131      	bne.n	80043f0 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	691b      	ldr	r3, [r3, #16]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d003      	beq.n	800439c <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	689a      	ldr	r2, [r3, #8]
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	689a      	ldr	r2, [r3, #8]
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80043a4:	69bb      	ldr	r3, [r7, #24]
 80043a6:	015a      	lsls	r2, r3, #5
 80043a8:	69fb      	ldr	r3, [r7, #28]
 80043aa:	4413      	add	r3, r2
 80043ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043b0:	691a      	ldr	r2, [r3, #16]
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	6a1b      	ldr	r3, [r3, #32]
 80043b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043ba:	69b9      	ldr	r1, [r7, #24]
 80043bc:	0148      	lsls	r0, r1, #5
 80043be:	69f9      	ldr	r1, [r7, #28]
 80043c0:	4401      	add	r1, r0
 80043c2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80043c6:	4313      	orrs	r3, r2
 80043c8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80043ca:	69bb      	ldr	r3, [r7, #24]
 80043cc:	015a      	lsls	r2, r3, #5
 80043ce:	69fb      	ldr	r3, [r7, #28]
 80043d0:	4413      	add	r3, r2
 80043d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043d6:	691b      	ldr	r3, [r3, #16]
 80043d8:	69ba      	ldr	r2, [r7, #24]
 80043da:	0151      	lsls	r1, r2, #5
 80043dc:	69fa      	ldr	r2, [r7, #28]
 80043de:	440a      	add	r2, r1
 80043e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80043e8:	6113      	str	r3, [r2, #16]
 80043ea:	e061      	b.n	80044b0 <USB_EPStartXfer+0x484>
 80043ec:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	691b      	ldr	r3, [r3, #16]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d123      	bne.n	8004440 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80043f8:	69bb      	ldr	r3, [r7, #24]
 80043fa:	015a      	lsls	r2, r3, #5
 80043fc:	69fb      	ldr	r3, [r7, #28]
 80043fe:	4413      	add	r3, r2
 8004400:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004404:	691a      	ldr	r2, [r3, #16]
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800440e:	69b9      	ldr	r1, [r7, #24]
 8004410:	0148      	lsls	r0, r1, #5
 8004412:	69f9      	ldr	r1, [r7, #28]
 8004414:	4401      	add	r1, r0
 8004416:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800441a:	4313      	orrs	r3, r2
 800441c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800441e:	69bb      	ldr	r3, [r7, #24]
 8004420:	015a      	lsls	r2, r3, #5
 8004422:	69fb      	ldr	r3, [r7, #28]
 8004424:	4413      	add	r3, r2
 8004426:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800442a:	691b      	ldr	r3, [r3, #16]
 800442c:	69ba      	ldr	r2, [r7, #24]
 800442e:	0151      	lsls	r1, r2, #5
 8004430:	69fa      	ldr	r2, [r7, #28]
 8004432:	440a      	add	r2, r1
 8004434:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004438:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800443c:	6113      	str	r3, [r2, #16]
 800443e:	e037      	b.n	80044b0 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	691a      	ldr	r2, [r3, #16]
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	4413      	add	r3, r2
 800444a:	1e5a      	subs	r2, r3, #1
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	fbb2 f3f3 	udiv	r3, r2, r3
 8004454:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	8afa      	ldrh	r2, [r7, #22]
 800445c:	fb03 f202 	mul.w	r2, r3, r2
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004464:	69bb      	ldr	r3, [r7, #24]
 8004466:	015a      	lsls	r2, r3, #5
 8004468:	69fb      	ldr	r3, [r7, #28]
 800446a:	4413      	add	r3, r2
 800446c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004470:	691a      	ldr	r2, [r3, #16]
 8004472:	8afb      	ldrh	r3, [r7, #22]
 8004474:	04d9      	lsls	r1, r3, #19
 8004476:	4b38      	ldr	r3, [pc, #224]	; (8004558 <USB_EPStartXfer+0x52c>)
 8004478:	400b      	ands	r3, r1
 800447a:	69b9      	ldr	r1, [r7, #24]
 800447c:	0148      	lsls	r0, r1, #5
 800447e:	69f9      	ldr	r1, [r7, #28]
 8004480:	4401      	add	r1, r0
 8004482:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004486:	4313      	orrs	r3, r2
 8004488:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800448a:	69bb      	ldr	r3, [r7, #24]
 800448c:	015a      	lsls	r2, r3, #5
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	4413      	add	r3, r2
 8004492:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004496:	691a      	ldr	r2, [r3, #16]
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	6a1b      	ldr	r3, [r3, #32]
 800449c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044a0:	69b9      	ldr	r1, [r7, #24]
 80044a2:	0148      	lsls	r0, r1, #5
 80044a4:	69f9      	ldr	r1, [r7, #28]
 80044a6:	4401      	add	r1, r0
 80044a8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80044ac:	4313      	orrs	r3, r2
 80044ae:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80044b0:	79fb      	ldrb	r3, [r7, #7]
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d10d      	bne.n	80044d2 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	68db      	ldr	r3, [r3, #12]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d009      	beq.n	80044d2 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	68d9      	ldr	r1, [r3, #12]
 80044c2:	69bb      	ldr	r3, [r7, #24]
 80044c4:	015a      	lsls	r2, r3, #5
 80044c6:	69fb      	ldr	r3, [r7, #28]
 80044c8:	4413      	add	r3, r2
 80044ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044ce:	460a      	mov	r2, r1
 80044d0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	791b      	ldrb	r3, [r3, #4]
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d128      	bne.n	800452c <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80044da:	69fb      	ldr	r3, [r7, #28]
 80044dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d110      	bne.n	800450c <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80044ea:	69bb      	ldr	r3, [r7, #24]
 80044ec:	015a      	lsls	r2, r3, #5
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	4413      	add	r3, r2
 80044f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	69ba      	ldr	r2, [r7, #24]
 80044fa:	0151      	lsls	r1, r2, #5
 80044fc:	69fa      	ldr	r2, [r7, #28]
 80044fe:	440a      	add	r2, r1
 8004500:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004504:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004508:	6013      	str	r3, [r2, #0]
 800450a:	e00f      	b.n	800452c <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800450c:	69bb      	ldr	r3, [r7, #24]
 800450e:	015a      	lsls	r2, r3, #5
 8004510:	69fb      	ldr	r3, [r7, #28]
 8004512:	4413      	add	r3, r2
 8004514:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	69ba      	ldr	r2, [r7, #24]
 800451c:	0151      	lsls	r1, r2, #5
 800451e:	69fa      	ldr	r2, [r7, #28]
 8004520:	440a      	add	r2, r1
 8004522:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004526:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800452a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800452c:	69bb      	ldr	r3, [r7, #24]
 800452e:	015a      	lsls	r2, r3, #5
 8004530:	69fb      	ldr	r3, [r7, #28]
 8004532:	4413      	add	r3, r2
 8004534:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	69ba      	ldr	r2, [r7, #24]
 800453c:	0151      	lsls	r1, r2, #5
 800453e:	69fa      	ldr	r2, [r7, #28]
 8004540:	440a      	add	r2, r1
 8004542:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004546:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800454a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800454c:	2300      	movs	r3, #0
}
 800454e:	4618      	mov	r0, r3
 8004550:	3720      	adds	r7, #32
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}
 8004556:	bf00      	nop
 8004558:	1ff80000 	.word	0x1ff80000

0800455c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800455c:	b480      	push	{r7}
 800455e:	b087      	sub	sp, #28
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004566:	2300      	movs	r3, #0
 8004568:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800456a:	2300      	movs	r3, #0
 800456c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	785b      	ldrb	r3, [r3, #1]
 8004576:	2b01      	cmp	r3, #1
 8004578:	d14a      	bne.n	8004610 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	781b      	ldrb	r3, [r3, #0]
 800457e:	015a      	lsls	r2, r3, #5
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	4413      	add	r3, r2
 8004584:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800458e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004592:	f040 8086 	bne.w	80046a2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	781b      	ldrb	r3, [r3, #0]
 800459a:	015a      	lsls	r2, r3, #5
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	4413      	add	r3, r2
 80045a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	683a      	ldr	r2, [r7, #0]
 80045a8:	7812      	ldrb	r2, [r2, #0]
 80045aa:	0151      	lsls	r1, r2, #5
 80045ac:	693a      	ldr	r2, [r7, #16]
 80045ae:	440a      	add	r2, r1
 80045b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045b4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80045b8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	781b      	ldrb	r3, [r3, #0]
 80045be:	015a      	lsls	r2, r3, #5
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	4413      	add	r3, r2
 80045c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	683a      	ldr	r2, [r7, #0]
 80045cc:	7812      	ldrb	r2, [r2, #0]
 80045ce:	0151      	lsls	r1, r2, #5
 80045d0:	693a      	ldr	r2, [r7, #16]
 80045d2:	440a      	add	r2, r1
 80045d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80045dc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	3301      	adds	r3, #1
 80045e2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f242 7210 	movw	r2, #10000	; 0x2710
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d902      	bls.n	80045f4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	75fb      	strb	r3, [r7, #23]
          break;
 80045f2:	e056      	b.n	80046a2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	781b      	ldrb	r3, [r3, #0]
 80045f8:	015a      	lsls	r2, r3, #5
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	4413      	add	r3, r2
 80045fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004608:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800460c:	d0e7      	beq.n	80045de <USB_EPStopXfer+0x82>
 800460e:	e048      	b.n	80046a2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	781b      	ldrb	r3, [r3, #0]
 8004614:	015a      	lsls	r2, r3, #5
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	4413      	add	r3, r2
 800461a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004624:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004628:	d13b      	bne.n	80046a2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	781b      	ldrb	r3, [r3, #0]
 800462e:	015a      	lsls	r2, r3, #5
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	4413      	add	r3, r2
 8004634:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	683a      	ldr	r2, [r7, #0]
 800463c:	7812      	ldrb	r2, [r2, #0]
 800463e:	0151      	lsls	r1, r2, #5
 8004640:	693a      	ldr	r2, [r7, #16]
 8004642:	440a      	add	r2, r1
 8004644:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004648:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800464c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	781b      	ldrb	r3, [r3, #0]
 8004652:	015a      	lsls	r2, r3, #5
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	4413      	add	r3, r2
 8004658:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	683a      	ldr	r2, [r7, #0]
 8004660:	7812      	ldrb	r2, [r2, #0]
 8004662:	0151      	lsls	r1, r2, #5
 8004664:	693a      	ldr	r2, [r7, #16]
 8004666:	440a      	add	r2, r1
 8004668:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800466c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004670:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	3301      	adds	r3, #1
 8004676:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f242 7210 	movw	r2, #10000	; 0x2710
 800467e:	4293      	cmp	r3, r2
 8004680:	d902      	bls.n	8004688 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	75fb      	strb	r3, [r7, #23]
          break;
 8004686:	e00c      	b.n	80046a2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	781b      	ldrb	r3, [r3, #0]
 800468c:	015a      	lsls	r2, r3, #5
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	4413      	add	r3, r2
 8004692:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800469c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80046a0:	d0e7      	beq.n	8004672 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80046a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	371c      	adds	r7, #28
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr

080046b0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b089      	sub	sp, #36	; 0x24
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	60f8      	str	r0, [r7, #12]
 80046b8:	60b9      	str	r1, [r7, #8]
 80046ba:	4611      	mov	r1, r2
 80046bc:	461a      	mov	r2, r3
 80046be:	460b      	mov	r3, r1
 80046c0:	71fb      	strb	r3, [r7, #7]
 80046c2:	4613      	mov	r3, r2
 80046c4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80046ce:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d123      	bne.n	800471e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80046d6:	88bb      	ldrh	r3, [r7, #4]
 80046d8:	3303      	adds	r3, #3
 80046da:	089b      	lsrs	r3, r3, #2
 80046dc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80046de:	2300      	movs	r3, #0
 80046e0:	61bb      	str	r3, [r7, #24]
 80046e2:	e018      	b.n	8004716 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80046e4:	79fb      	ldrb	r3, [r7, #7]
 80046e6:	031a      	lsls	r2, r3, #12
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	4413      	add	r3, r2
 80046ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046f0:	461a      	mov	r2, r3
 80046f2:	69fb      	ldr	r3, [r7, #28]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80046f8:	69fb      	ldr	r3, [r7, #28]
 80046fa:	3301      	adds	r3, #1
 80046fc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80046fe:	69fb      	ldr	r3, [r7, #28]
 8004700:	3301      	adds	r3, #1
 8004702:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004704:	69fb      	ldr	r3, [r7, #28]
 8004706:	3301      	adds	r3, #1
 8004708:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800470a:	69fb      	ldr	r3, [r7, #28]
 800470c:	3301      	adds	r3, #1
 800470e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004710:	69bb      	ldr	r3, [r7, #24]
 8004712:	3301      	adds	r3, #1
 8004714:	61bb      	str	r3, [r7, #24]
 8004716:	69ba      	ldr	r2, [r7, #24]
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	429a      	cmp	r2, r3
 800471c:	d3e2      	bcc.n	80046e4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800471e:	2300      	movs	r3, #0
}
 8004720:	4618      	mov	r0, r3
 8004722:	3724      	adds	r7, #36	; 0x24
 8004724:	46bd      	mov	sp, r7
 8004726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472a:	4770      	bx	lr

0800472c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800472c:	b480      	push	{r7}
 800472e:	b08b      	sub	sp, #44	; 0x2c
 8004730:	af00      	add	r7, sp, #0
 8004732:	60f8      	str	r0, [r7, #12]
 8004734:	60b9      	str	r1, [r7, #8]
 8004736:	4613      	mov	r3, r2
 8004738:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004742:	88fb      	ldrh	r3, [r7, #6]
 8004744:	089b      	lsrs	r3, r3, #2
 8004746:	b29b      	uxth	r3, r3
 8004748:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800474a:	88fb      	ldrh	r3, [r7, #6]
 800474c:	f003 0303 	and.w	r3, r3, #3
 8004750:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004752:	2300      	movs	r3, #0
 8004754:	623b      	str	r3, [r7, #32]
 8004756:	e014      	b.n	8004782 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004758:	69bb      	ldr	r3, [r7, #24]
 800475a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004762:	601a      	str	r2, [r3, #0]
    pDest++;
 8004764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004766:	3301      	adds	r3, #1
 8004768:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800476a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476c:	3301      	adds	r3, #1
 800476e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004772:	3301      	adds	r3, #1
 8004774:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004778:	3301      	adds	r3, #1
 800477a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800477c:	6a3b      	ldr	r3, [r7, #32]
 800477e:	3301      	adds	r3, #1
 8004780:	623b      	str	r3, [r7, #32]
 8004782:	6a3a      	ldr	r2, [r7, #32]
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	429a      	cmp	r2, r3
 8004788:	d3e6      	bcc.n	8004758 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800478a:	8bfb      	ldrh	r3, [r7, #30]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d01e      	beq.n	80047ce <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004790:	2300      	movs	r3, #0
 8004792:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004794:	69bb      	ldr	r3, [r7, #24]
 8004796:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800479a:	461a      	mov	r2, r3
 800479c:	f107 0310 	add.w	r3, r7, #16
 80047a0:	6812      	ldr	r2, [r2, #0]
 80047a2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80047a4:	693a      	ldr	r2, [r7, #16]
 80047a6:	6a3b      	ldr	r3, [r7, #32]
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	00db      	lsls	r3, r3, #3
 80047ac:	fa22 f303 	lsr.w	r3, r2, r3
 80047b0:	b2da      	uxtb	r2, r3
 80047b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b4:	701a      	strb	r2, [r3, #0]
      i++;
 80047b6:	6a3b      	ldr	r3, [r7, #32]
 80047b8:	3301      	adds	r3, #1
 80047ba:	623b      	str	r3, [r7, #32]
      pDest++;
 80047bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047be:	3301      	adds	r3, #1
 80047c0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80047c2:	8bfb      	ldrh	r3, [r7, #30]
 80047c4:	3b01      	subs	r3, #1
 80047c6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80047c8:	8bfb      	ldrh	r3, [r7, #30]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d1ea      	bne.n	80047a4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80047ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	372c      	adds	r7, #44	; 0x2c
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr

080047dc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80047dc:	b480      	push	{r7}
 80047de:	b085      	sub	sp, #20
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
 80047e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	781b      	ldrb	r3, [r3, #0]
 80047ee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	785b      	ldrb	r3, [r3, #1]
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	d12c      	bne.n	8004852 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	015a      	lsls	r2, r3, #5
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	4413      	add	r3, r2
 8004800:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	2b00      	cmp	r3, #0
 8004808:	db12      	blt.n	8004830 <USB_EPSetStall+0x54>
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d00f      	beq.n	8004830 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	015a      	lsls	r2, r3, #5
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	4413      	add	r3, r2
 8004818:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	68ba      	ldr	r2, [r7, #8]
 8004820:	0151      	lsls	r1, r2, #5
 8004822:	68fa      	ldr	r2, [r7, #12]
 8004824:	440a      	add	r2, r1
 8004826:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800482a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800482e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	015a      	lsls	r2, r3, #5
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	4413      	add	r3, r2
 8004838:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	68ba      	ldr	r2, [r7, #8]
 8004840:	0151      	lsls	r1, r2, #5
 8004842:	68fa      	ldr	r2, [r7, #12]
 8004844:	440a      	add	r2, r1
 8004846:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800484a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800484e:	6013      	str	r3, [r2, #0]
 8004850:	e02b      	b.n	80048aa <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	015a      	lsls	r2, r3, #5
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	4413      	add	r3, r2
 800485a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2b00      	cmp	r3, #0
 8004862:	db12      	blt.n	800488a <USB_EPSetStall+0xae>
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d00f      	beq.n	800488a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	015a      	lsls	r2, r3, #5
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	4413      	add	r3, r2
 8004872:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	68ba      	ldr	r2, [r7, #8]
 800487a:	0151      	lsls	r1, r2, #5
 800487c:	68fa      	ldr	r2, [r7, #12]
 800487e:	440a      	add	r2, r1
 8004880:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004884:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004888:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	015a      	lsls	r2, r3, #5
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	4413      	add	r3, r2
 8004892:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	68ba      	ldr	r2, [r7, #8]
 800489a:	0151      	lsls	r1, r2, #5
 800489c:	68fa      	ldr	r2, [r7, #12]
 800489e:	440a      	add	r2, r1
 80048a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80048a8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80048aa:	2300      	movs	r3, #0
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	3714      	adds	r7, #20
 80048b0:	46bd      	mov	sp, r7
 80048b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b6:	4770      	bx	lr

080048b8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b085      	sub	sp, #20
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	781b      	ldrb	r3, [r3, #0]
 80048ca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	785b      	ldrb	r3, [r3, #1]
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d128      	bne.n	8004926 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	015a      	lsls	r2, r3, #5
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	4413      	add	r3, r2
 80048dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	68ba      	ldr	r2, [r7, #8]
 80048e4:	0151      	lsls	r1, r2, #5
 80048e6:	68fa      	ldr	r2, [r7, #12]
 80048e8:	440a      	add	r2, r1
 80048ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048ee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80048f2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	791b      	ldrb	r3, [r3, #4]
 80048f8:	2b03      	cmp	r3, #3
 80048fa:	d003      	beq.n	8004904 <USB_EPClearStall+0x4c>
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	791b      	ldrb	r3, [r3, #4]
 8004900:	2b02      	cmp	r3, #2
 8004902:	d138      	bne.n	8004976 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	015a      	lsls	r2, r3, #5
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	4413      	add	r3, r2
 800490c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	68ba      	ldr	r2, [r7, #8]
 8004914:	0151      	lsls	r1, r2, #5
 8004916:	68fa      	ldr	r2, [r7, #12]
 8004918:	440a      	add	r2, r1
 800491a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800491e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004922:	6013      	str	r3, [r2, #0]
 8004924:	e027      	b.n	8004976 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	015a      	lsls	r2, r3, #5
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	4413      	add	r3, r2
 800492e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	68ba      	ldr	r2, [r7, #8]
 8004936:	0151      	lsls	r1, r2, #5
 8004938:	68fa      	ldr	r2, [r7, #12]
 800493a:	440a      	add	r2, r1
 800493c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004940:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004944:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	791b      	ldrb	r3, [r3, #4]
 800494a:	2b03      	cmp	r3, #3
 800494c:	d003      	beq.n	8004956 <USB_EPClearStall+0x9e>
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	791b      	ldrb	r3, [r3, #4]
 8004952:	2b02      	cmp	r3, #2
 8004954:	d10f      	bne.n	8004976 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	015a      	lsls	r2, r3, #5
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	4413      	add	r3, r2
 800495e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	68ba      	ldr	r2, [r7, #8]
 8004966:	0151      	lsls	r1, r2, #5
 8004968:	68fa      	ldr	r2, [r7, #12]
 800496a:	440a      	add	r2, r1
 800496c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004970:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004974:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004976:	2300      	movs	r3, #0
}
 8004978:	4618      	mov	r0, r3
 800497a:	3714      	adds	r7, #20
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr

08004984 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004984:	b480      	push	{r7}
 8004986:	b085      	sub	sp, #20
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	460b      	mov	r3, r1
 800498e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	68fa      	ldr	r2, [r7, #12]
 800499e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80049a2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80049a6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	78fb      	ldrb	r3, [r7, #3]
 80049b2:	011b      	lsls	r3, r3, #4
 80049b4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80049b8:	68f9      	ldr	r1, [r7, #12]
 80049ba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80049be:	4313      	orrs	r3, r2
 80049c0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80049c2:	2300      	movs	r3, #0
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3714      	adds	r7, #20
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr

080049d0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b085      	sub	sp, #20
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	68fa      	ldr	r2, [r7, #12]
 80049e6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80049ea:	f023 0303 	bic.w	r3, r3, #3
 80049ee:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	68fa      	ldr	r2, [r7, #12]
 80049fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80049fe:	f023 0302 	bic.w	r3, r3, #2
 8004a02:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004a04:	2300      	movs	r3, #0
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3714      	adds	r7, #20
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a10:	4770      	bx	lr

08004a12 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004a12:	b480      	push	{r7}
 8004a14:	b085      	sub	sp, #20
 8004a16:	af00      	add	r7, sp, #0
 8004a18:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	68fa      	ldr	r2, [r7, #12]
 8004a28:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004a2c:	f023 0303 	bic.w	r3, r3, #3
 8004a30:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	68fa      	ldr	r2, [r7, #12]
 8004a3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a40:	f043 0302 	orr.w	r3, r3, #2
 8004a44:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004a46:	2300      	movs	r3, #0
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3714      	adds	r7, #20
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr

08004a54 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b085      	sub	sp, #20
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	695b      	ldr	r3, [r3, #20]
 8004a60:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	699b      	ldr	r3, [r3, #24]
 8004a66:	68fa      	ldr	r2, [r7, #12]
 8004a68:	4013      	ands	r3, r2
 8004a6a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3714      	adds	r7, #20
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr

08004a7a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004a7a:	b480      	push	{r7}
 8004a7c:	b085      	sub	sp, #20
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a8c:	699b      	ldr	r3, [r3, #24]
 8004a8e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a96:	69db      	ldr	r3, [r3, #28]
 8004a98:	68ba      	ldr	r2, [r7, #8]
 8004a9a:	4013      	ands	r3, r2
 8004a9c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	0c1b      	lsrs	r3, r3, #16
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3714      	adds	r7, #20
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr

08004aae <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004aae:	b480      	push	{r7}
 8004ab0:	b085      	sub	sp, #20
 8004ab2:	af00      	add	r7, sp, #0
 8004ab4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ac0:	699b      	ldr	r3, [r3, #24]
 8004ac2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004aca:	69db      	ldr	r3, [r3, #28]
 8004acc:	68ba      	ldr	r2, [r7, #8]
 8004ace:	4013      	ands	r3, r2
 8004ad0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	b29b      	uxth	r3, r3
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3714      	adds	r7, #20
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr

08004ae2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004ae2:	b480      	push	{r7}
 8004ae4:	b085      	sub	sp, #20
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	6078      	str	r0, [r7, #4]
 8004aea:	460b      	mov	r3, r1
 8004aec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004af2:	78fb      	ldrb	r3, [r7, #3]
 8004af4:	015a      	lsls	r2, r3, #5
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	4413      	add	r3, r2
 8004afa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b08:	695b      	ldr	r3, [r3, #20]
 8004b0a:	68ba      	ldr	r2, [r7, #8]
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004b10:	68bb      	ldr	r3, [r7, #8]
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3714      	adds	r7, #20
 8004b16:	46bd      	mov	sp, r7
 8004b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1c:	4770      	bx	lr

08004b1e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004b1e:	b480      	push	{r7}
 8004b20:	b087      	sub	sp, #28
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	6078      	str	r0, [r7, #4]
 8004b26:	460b      	mov	r3, r1
 8004b28:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b34:	691b      	ldr	r3, [r3, #16]
 8004b36:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b40:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004b42:	78fb      	ldrb	r3, [r7, #3]
 8004b44:	f003 030f 	and.w	r3, r3, #15
 8004b48:	68fa      	ldr	r2, [r7, #12]
 8004b4a:	fa22 f303 	lsr.w	r3, r2, r3
 8004b4e:	01db      	lsls	r3, r3, #7
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	693a      	ldr	r2, [r7, #16]
 8004b54:	4313      	orrs	r3, r2
 8004b56:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004b58:	78fb      	ldrb	r3, [r7, #3]
 8004b5a:	015a      	lsls	r2, r3, #5
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	4413      	add	r3, r2
 8004b60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	693a      	ldr	r2, [r7, #16]
 8004b68:	4013      	ands	r3, r2
 8004b6a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004b6c:	68bb      	ldr	r3, [r7, #8]
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	371c      	adds	r7, #28
 8004b72:	46bd      	mov	sp, r7
 8004b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b78:	4770      	bx	lr

08004b7a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004b7a:	b480      	push	{r7}
 8004b7c:	b083      	sub	sp, #12
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	695b      	ldr	r3, [r3, #20]
 8004b86:	f003 0301 	and.w	r3, r3, #1
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	370c      	adds	r7, #12
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr

08004b96 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8004b96:	b480      	push	{r7}
 8004b98:	b085      	sub	sp, #20
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	68fa      	ldr	r2, [r7, #12]
 8004bac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bb0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004bb4:	f023 0307 	bic.w	r3, r3, #7
 8004bb8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	68fa      	ldr	r2, [r7, #12]
 8004bc4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004bc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bcc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004bce:	2300      	movs	r3, #0
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3714      	adds	r7, #20
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr

08004bdc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b087      	sub	sp, #28
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	60f8      	str	r0, [r7, #12]
 8004be4:	460b      	mov	r3, r1
 8004be6:	607a      	str	r2, [r7, #4]
 8004be8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	333c      	adds	r3, #60	; 0x3c
 8004bf2:	3304      	adds	r3, #4
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	4a26      	ldr	r2, [pc, #152]	; (8004c94 <USB_EP0_OutStart+0xb8>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d90a      	bls.n	8004c16 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c10:	d101      	bne.n	8004c16 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004c12:	2300      	movs	r3, #0
 8004c14:	e037      	b.n	8004c86 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c1c:	461a      	mov	r2, r3
 8004c1e:	2300      	movs	r3, #0
 8004c20:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c28:	691b      	ldr	r3, [r3, #16]
 8004c2a:	697a      	ldr	r2, [r7, #20]
 8004c2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c30:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c34:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c3c:	691b      	ldr	r3, [r3, #16]
 8004c3e:	697a      	ldr	r2, [r7, #20]
 8004c40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c44:	f043 0318 	orr.w	r3, r3, #24
 8004c48:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c50:	691b      	ldr	r3, [r3, #16]
 8004c52:	697a      	ldr	r2, [r7, #20]
 8004c54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c58:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004c5c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004c5e:	7afb      	ldrb	r3, [r7, #11]
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	d10f      	bne.n	8004c84 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c6a:	461a      	mov	r2, r3
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	697a      	ldr	r2, [r7, #20]
 8004c7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c7e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004c82:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004c84:	2300      	movs	r3, #0
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	371c      	adds	r7, #28
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr
 8004c92:	bf00      	nop
 8004c94:	4f54300a 	.word	0x4f54300a

08004c98 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b085      	sub	sp, #20
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	3301      	adds	r3, #1
 8004ca8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004cb0:	d901      	bls.n	8004cb6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	e01b      	b.n	8004cee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	691b      	ldr	r3, [r3, #16]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	daf2      	bge.n	8004ca4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	691b      	ldr	r3, [r3, #16]
 8004cc6:	f043 0201 	orr.w	r2, r3, #1
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	3301      	adds	r3, #1
 8004cd2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004cda:	d901      	bls.n	8004ce0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004cdc:	2303      	movs	r3, #3
 8004cde:	e006      	b.n	8004cee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	691b      	ldr	r3, [r3, #16]
 8004ce4:	f003 0301 	and.w	r3, r3, #1
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d0f0      	beq.n	8004cce <USB_CoreReset+0x36>

  return HAL_OK;
 8004cec:	2300      	movs	r3, #0
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3714      	adds	r7, #20
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf8:	4770      	bx	lr
	...

08004cfc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b084      	sub	sp, #16
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	460b      	mov	r3, r1
 8004d06:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004d08:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004d0c:	f002 fc9a 	bl	8007644 <USBD_static_malloc>
 8004d10:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d109      	bne.n	8004d2c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	32b0      	adds	r2, #176	; 0xb0
 8004d22:	2100      	movs	r1, #0
 8004d24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004d28:	2302      	movs	r3, #2
 8004d2a:	e0d4      	b.n	8004ed6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8004d2c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8004d30:	2100      	movs	r1, #0
 8004d32:	68f8      	ldr	r0, [r7, #12]
 8004d34:	f002 fcea 	bl	800770c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	32b0      	adds	r2, #176	; 0xb0
 8004d42:	68f9      	ldr	r1, [r7, #12]
 8004d44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	32b0      	adds	r2, #176	; 0xb0
 8004d52:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	7c1b      	ldrb	r3, [r3, #16]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d138      	bne.n	8004dd6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004d64:	4b5e      	ldr	r3, [pc, #376]	; (8004ee0 <USBD_CDC_Init+0x1e4>)
 8004d66:	7819      	ldrb	r1, [r3, #0]
 8004d68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d6c:	2202      	movs	r2, #2
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f002 fb45 	bl	80073fe <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004d74:	4b5a      	ldr	r3, [pc, #360]	; (8004ee0 <USBD_CDC_Init+0x1e4>)
 8004d76:	781b      	ldrb	r3, [r3, #0]
 8004d78:	f003 020f 	and.w	r2, r3, #15
 8004d7c:	6879      	ldr	r1, [r7, #4]
 8004d7e:	4613      	mov	r3, r2
 8004d80:	009b      	lsls	r3, r3, #2
 8004d82:	4413      	add	r3, r2
 8004d84:	009b      	lsls	r3, r3, #2
 8004d86:	440b      	add	r3, r1
 8004d88:	3324      	adds	r3, #36	; 0x24
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004d8e:	4b55      	ldr	r3, [pc, #340]	; (8004ee4 <USBD_CDC_Init+0x1e8>)
 8004d90:	7819      	ldrb	r1, [r3, #0]
 8004d92:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d96:	2202      	movs	r2, #2
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f002 fb30 	bl	80073fe <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004d9e:	4b51      	ldr	r3, [pc, #324]	; (8004ee4 <USBD_CDC_Init+0x1e8>)
 8004da0:	781b      	ldrb	r3, [r3, #0]
 8004da2:	f003 020f 	and.w	r2, r3, #15
 8004da6:	6879      	ldr	r1, [r7, #4]
 8004da8:	4613      	mov	r3, r2
 8004daa:	009b      	lsls	r3, r3, #2
 8004dac:	4413      	add	r3, r2
 8004dae:	009b      	lsls	r3, r3, #2
 8004db0:	440b      	add	r3, r1
 8004db2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004db6:	2201      	movs	r2, #1
 8004db8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004dba:	4b4b      	ldr	r3, [pc, #300]	; (8004ee8 <USBD_CDC_Init+0x1ec>)
 8004dbc:	781b      	ldrb	r3, [r3, #0]
 8004dbe:	f003 020f 	and.w	r2, r3, #15
 8004dc2:	6879      	ldr	r1, [r7, #4]
 8004dc4:	4613      	mov	r3, r2
 8004dc6:	009b      	lsls	r3, r3, #2
 8004dc8:	4413      	add	r3, r2
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	440b      	add	r3, r1
 8004dce:	3326      	adds	r3, #38	; 0x26
 8004dd0:	2210      	movs	r2, #16
 8004dd2:	801a      	strh	r2, [r3, #0]
 8004dd4:	e035      	b.n	8004e42 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004dd6:	4b42      	ldr	r3, [pc, #264]	; (8004ee0 <USBD_CDC_Init+0x1e4>)
 8004dd8:	7819      	ldrb	r1, [r3, #0]
 8004dda:	2340      	movs	r3, #64	; 0x40
 8004ddc:	2202      	movs	r2, #2
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f002 fb0d 	bl	80073fe <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004de4:	4b3e      	ldr	r3, [pc, #248]	; (8004ee0 <USBD_CDC_Init+0x1e4>)
 8004de6:	781b      	ldrb	r3, [r3, #0]
 8004de8:	f003 020f 	and.w	r2, r3, #15
 8004dec:	6879      	ldr	r1, [r7, #4]
 8004dee:	4613      	mov	r3, r2
 8004df0:	009b      	lsls	r3, r3, #2
 8004df2:	4413      	add	r3, r2
 8004df4:	009b      	lsls	r3, r3, #2
 8004df6:	440b      	add	r3, r1
 8004df8:	3324      	adds	r3, #36	; 0x24
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004dfe:	4b39      	ldr	r3, [pc, #228]	; (8004ee4 <USBD_CDC_Init+0x1e8>)
 8004e00:	7819      	ldrb	r1, [r3, #0]
 8004e02:	2340      	movs	r3, #64	; 0x40
 8004e04:	2202      	movs	r2, #2
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f002 faf9 	bl	80073fe <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004e0c:	4b35      	ldr	r3, [pc, #212]	; (8004ee4 <USBD_CDC_Init+0x1e8>)
 8004e0e:	781b      	ldrb	r3, [r3, #0]
 8004e10:	f003 020f 	and.w	r2, r3, #15
 8004e14:	6879      	ldr	r1, [r7, #4]
 8004e16:	4613      	mov	r3, r2
 8004e18:	009b      	lsls	r3, r3, #2
 8004e1a:	4413      	add	r3, r2
 8004e1c:	009b      	lsls	r3, r3, #2
 8004e1e:	440b      	add	r3, r1
 8004e20:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004e24:	2201      	movs	r2, #1
 8004e26:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004e28:	4b2f      	ldr	r3, [pc, #188]	; (8004ee8 <USBD_CDC_Init+0x1ec>)
 8004e2a:	781b      	ldrb	r3, [r3, #0]
 8004e2c:	f003 020f 	and.w	r2, r3, #15
 8004e30:	6879      	ldr	r1, [r7, #4]
 8004e32:	4613      	mov	r3, r2
 8004e34:	009b      	lsls	r3, r3, #2
 8004e36:	4413      	add	r3, r2
 8004e38:	009b      	lsls	r3, r3, #2
 8004e3a:	440b      	add	r3, r1
 8004e3c:	3326      	adds	r3, #38	; 0x26
 8004e3e:	2210      	movs	r2, #16
 8004e40:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004e42:	4b29      	ldr	r3, [pc, #164]	; (8004ee8 <USBD_CDC_Init+0x1ec>)
 8004e44:	7819      	ldrb	r1, [r3, #0]
 8004e46:	2308      	movs	r3, #8
 8004e48:	2203      	movs	r2, #3
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f002 fad7 	bl	80073fe <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8004e50:	4b25      	ldr	r3, [pc, #148]	; (8004ee8 <USBD_CDC_Init+0x1ec>)
 8004e52:	781b      	ldrb	r3, [r3, #0]
 8004e54:	f003 020f 	and.w	r2, r3, #15
 8004e58:	6879      	ldr	r1, [r7, #4]
 8004e5a:	4613      	mov	r3, r2
 8004e5c:	009b      	lsls	r3, r3, #2
 8004e5e:	4413      	add	r3, r2
 8004e60:	009b      	lsls	r3, r3, #2
 8004e62:	440b      	add	r3, r1
 8004e64:	3324      	adds	r3, #36	; 0x24
 8004e66:	2201      	movs	r2, #1
 8004e68:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004e78:	687a      	ldr	r2, [r7, #4]
 8004e7a:	33b0      	adds	r3, #176	; 0xb0
 8004e7c:	009b      	lsls	r3, r3, #2
 8004e7e:	4413      	add	r3, r2
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2200      	movs	r2, #0
 8004e92:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d101      	bne.n	8004ea4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8004ea0:	2302      	movs	r3, #2
 8004ea2:	e018      	b.n	8004ed6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	7c1b      	ldrb	r3, [r3, #16]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d10a      	bne.n	8004ec2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004eac:	4b0d      	ldr	r3, [pc, #52]	; (8004ee4 <USBD_CDC_Init+0x1e8>)
 8004eae:	7819      	ldrb	r1, [r3, #0]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004eb6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f002 fb8e 	bl	80075dc <USBD_LL_PrepareReceive>
 8004ec0:	e008      	b.n	8004ed4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004ec2:	4b08      	ldr	r3, [pc, #32]	; (8004ee4 <USBD_CDC_Init+0x1e8>)
 8004ec4:	7819      	ldrb	r1, [r3, #0]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004ecc:	2340      	movs	r3, #64	; 0x40
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f002 fb84 	bl	80075dc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004ed4:	2300      	movs	r3, #0
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3710      	adds	r7, #16
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}
 8004ede:	bf00      	nop
 8004ee0:	20000093 	.word	0x20000093
 8004ee4:	20000094 	.word	0x20000094
 8004ee8:	20000095 	.word	0x20000095

08004eec <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b082      	sub	sp, #8
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
 8004ef4:	460b      	mov	r3, r1
 8004ef6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8004ef8:	4b3a      	ldr	r3, [pc, #232]	; (8004fe4 <USBD_CDC_DeInit+0xf8>)
 8004efa:	781b      	ldrb	r3, [r3, #0]
 8004efc:	4619      	mov	r1, r3
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f002 faa3 	bl	800744a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8004f04:	4b37      	ldr	r3, [pc, #220]	; (8004fe4 <USBD_CDC_DeInit+0xf8>)
 8004f06:	781b      	ldrb	r3, [r3, #0]
 8004f08:	f003 020f 	and.w	r2, r3, #15
 8004f0c:	6879      	ldr	r1, [r7, #4]
 8004f0e:	4613      	mov	r3, r2
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	4413      	add	r3, r2
 8004f14:	009b      	lsls	r3, r3, #2
 8004f16:	440b      	add	r3, r1
 8004f18:	3324      	adds	r3, #36	; 0x24
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8004f1e:	4b32      	ldr	r3, [pc, #200]	; (8004fe8 <USBD_CDC_DeInit+0xfc>)
 8004f20:	781b      	ldrb	r3, [r3, #0]
 8004f22:	4619      	mov	r1, r3
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	f002 fa90 	bl	800744a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8004f2a:	4b2f      	ldr	r3, [pc, #188]	; (8004fe8 <USBD_CDC_DeInit+0xfc>)
 8004f2c:	781b      	ldrb	r3, [r3, #0]
 8004f2e:	f003 020f 	and.w	r2, r3, #15
 8004f32:	6879      	ldr	r1, [r7, #4]
 8004f34:	4613      	mov	r3, r2
 8004f36:	009b      	lsls	r3, r3, #2
 8004f38:	4413      	add	r3, r2
 8004f3a:	009b      	lsls	r3, r3, #2
 8004f3c:	440b      	add	r3, r1
 8004f3e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004f42:	2200      	movs	r2, #0
 8004f44:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8004f46:	4b29      	ldr	r3, [pc, #164]	; (8004fec <USBD_CDC_DeInit+0x100>)
 8004f48:	781b      	ldrb	r3, [r3, #0]
 8004f4a:	4619      	mov	r1, r3
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f002 fa7c 	bl	800744a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8004f52:	4b26      	ldr	r3, [pc, #152]	; (8004fec <USBD_CDC_DeInit+0x100>)
 8004f54:	781b      	ldrb	r3, [r3, #0]
 8004f56:	f003 020f 	and.w	r2, r3, #15
 8004f5a:	6879      	ldr	r1, [r7, #4]
 8004f5c:	4613      	mov	r3, r2
 8004f5e:	009b      	lsls	r3, r3, #2
 8004f60:	4413      	add	r3, r2
 8004f62:	009b      	lsls	r3, r3, #2
 8004f64:	440b      	add	r3, r1
 8004f66:	3324      	adds	r3, #36	; 0x24
 8004f68:	2200      	movs	r2, #0
 8004f6a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8004f6c:	4b1f      	ldr	r3, [pc, #124]	; (8004fec <USBD_CDC_DeInit+0x100>)
 8004f6e:	781b      	ldrb	r3, [r3, #0]
 8004f70:	f003 020f 	and.w	r2, r3, #15
 8004f74:	6879      	ldr	r1, [r7, #4]
 8004f76:	4613      	mov	r3, r2
 8004f78:	009b      	lsls	r3, r3, #2
 8004f7a:	4413      	add	r3, r2
 8004f7c:	009b      	lsls	r3, r3, #2
 8004f7e:	440b      	add	r3, r1
 8004f80:	3326      	adds	r3, #38	; 0x26
 8004f82:	2200      	movs	r2, #0
 8004f84:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	32b0      	adds	r2, #176	; 0xb0
 8004f90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d01f      	beq.n	8004fd8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004f9e:	687a      	ldr	r2, [r7, #4]
 8004fa0:	33b0      	adds	r3, #176	; 0xb0
 8004fa2:	009b      	lsls	r3, r3, #2
 8004fa4:	4413      	add	r3, r2
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	32b0      	adds	r2, #176	; 0xb0
 8004fb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f002 fb50 	bl	8007660 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	32b0      	adds	r2, #176	; 0xb0
 8004fca:	2100      	movs	r1, #0
 8004fcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004fd8:	2300      	movs	r3, #0
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3708      	adds	r7, #8
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop
 8004fe4:	20000093 	.word	0x20000093
 8004fe8:	20000094 	.word	0x20000094
 8004fec:	20000095 	.word	0x20000095

08004ff0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b086      	sub	sp, #24
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	32b0      	adds	r2, #176	; 0xb0
 8005004:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005008:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800500a:	2300      	movs	r3, #0
 800500c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800500e:	2300      	movs	r3, #0
 8005010:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005012:	2300      	movs	r3, #0
 8005014:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d101      	bne.n	8005020 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800501c:	2303      	movs	r3, #3
 800501e:	e0bf      	b.n	80051a0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	781b      	ldrb	r3, [r3, #0]
 8005024:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005028:	2b00      	cmp	r3, #0
 800502a:	d050      	beq.n	80050ce <USBD_CDC_Setup+0xde>
 800502c:	2b20      	cmp	r3, #32
 800502e:	f040 80af 	bne.w	8005190 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	88db      	ldrh	r3, [r3, #6]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d03a      	beq.n	80050b0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	781b      	ldrb	r3, [r3, #0]
 800503e:	b25b      	sxtb	r3, r3
 8005040:	2b00      	cmp	r3, #0
 8005042:	da1b      	bge.n	800507c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800504a:	687a      	ldr	r2, [r7, #4]
 800504c:	33b0      	adds	r3, #176	; 0xb0
 800504e:	009b      	lsls	r3, r3, #2
 8005050:	4413      	add	r3, r2
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	683a      	ldr	r2, [r7, #0]
 8005058:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800505a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800505c:	683a      	ldr	r2, [r7, #0]
 800505e:	88d2      	ldrh	r2, [r2, #6]
 8005060:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	88db      	ldrh	r3, [r3, #6]
 8005066:	2b07      	cmp	r3, #7
 8005068:	bf28      	it	cs
 800506a:	2307      	movcs	r3, #7
 800506c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	89fa      	ldrh	r2, [r7, #14]
 8005072:	4619      	mov	r1, r3
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	f001 fd89 	bl	8006b8c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800507a:	e090      	b.n	800519e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	785a      	ldrb	r2, [r3, #1]
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	88db      	ldrh	r3, [r3, #6]
 800508a:	2b3f      	cmp	r3, #63	; 0x3f
 800508c:	d803      	bhi.n	8005096 <USBD_CDC_Setup+0xa6>
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	88db      	ldrh	r3, [r3, #6]
 8005092:	b2da      	uxtb	r2, r3
 8005094:	e000      	b.n	8005098 <USBD_CDC_Setup+0xa8>
 8005096:	2240      	movs	r2, #64	; 0x40
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800509e:	6939      	ldr	r1, [r7, #16]
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80050a6:	461a      	mov	r2, r3
 80050a8:	6878      	ldr	r0, [r7, #4]
 80050aa:	f001 fd9b 	bl	8006be4 <USBD_CtlPrepareRx>
      break;
 80050ae:	e076      	b.n	800519e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80050b6:	687a      	ldr	r2, [r7, #4]
 80050b8:	33b0      	adds	r3, #176	; 0xb0
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	4413      	add	r3, r2
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	683a      	ldr	r2, [r7, #0]
 80050c4:	7850      	ldrb	r0, [r2, #1]
 80050c6:	2200      	movs	r2, #0
 80050c8:	6839      	ldr	r1, [r7, #0]
 80050ca:	4798      	blx	r3
      break;
 80050cc:	e067      	b.n	800519e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	785b      	ldrb	r3, [r3, #1]
 80050d2:	2b0b      	cmp	r3, #11
 80050d4:	d851      	bhi.n	800517a <USBD_CDC_Setup+0x18a>
 80050d6:	a201      	add	r2, pc, #4	; (adr r2, 80050dc <USBD_CDC_Setup+0xec>)
 80050d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050dc:	0800510d 	.word	0x0800510d
 80050e0:	08005189 	.word	0x08005189
 80050e4:	0800517b 	.word	0x0800517b
 80050e8:	0800517b 	.word	0x0800517b
 80050ec:	0800517b 	.word	0x0800517b
 80050f0:	0800517b 	.word	0x0800517b
 80050f4:	0800517b 	.word	0x0800517b
 80050f8:	0800517b 	.word	0x0800517b
 80050fc:	0800517b 	.word	0x0800517b
 8005100:	0800517b 	.word	0x0800517b
 8005104:	08005137 	.word	0x08005137
 8005108:	08005161 	.word	0x08005161
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005112:	b2db      	uxtb	r3, r3
 8005114:	2b03      	cmp	r3, #3
 8005116:	d107      	bne.n	8005128 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005118:	f107 030a 	add.w	r3, r7, #10
 800511c:	2202      	movs	r2, #2
 800511e:	4619      	mov	r1, r3
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f001 fd33 	bl	8006b8c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005126:	e032      	b.n	800518e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005128:	6839      	ldr	r1, [r7, #0]
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f001 fcbd 	bl	8006aaa <USBD_CtlError>
            ret = USBD_FAIL;
 8005130:	2303      	movs	r3, #3
 8005132:	75fb      	strb	r3, [r7, #23]
          break;
 8005134:	e02b      	b.n	800518e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800513c:	b2db      	uxtb	r3, r3
 800513e:	2b03      	cmp	r3, #3
 8005140:	d107      	bne.n	8005152 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005142:	f107 030d 	add.w	r3, r7, #13
 8005146:	2201      	movs	r2, #1
 8005148:	4619      	mov	r1, r3
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f001 fd1e 	bl	8006b8c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005150:	e01d      	b.n	800518e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005152:	6839      	ldr	r1, [r7, #0]
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	f001 fca8 	bl	8006aaa <USBD_CtlError>
            ret = USBD_FAIL;
 800515a:	2303      	movs	r3, #3
 800515c:	75fb      	strb	r3, [r7, #23]
          break;
 800515e:	e016      	b.n	800518e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005166:	b2db      	uxtb	r3, r3
 8005168:	2b03      	cmp	r3, #3
 800516a:	d00f      	beq.n	800518c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800516c:	6839      	ldr	r1, [r7, #0]
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f001 fc9b 	bl	8006aaa <USBD_CtlError>
            ret = USBD_FAIL;
 8005174:	2303      	movs	r3, #3
 8005176:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005178:	e008      	b.n	800518c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800517a:	6839      	ldr	r1, [r7, #0]
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	f001 fc94 	bl	8006aaa <USBD_CtlError>
          ret = USBD_FAIL;
 8005182:	2303      	movs	r3, #3
 8005184:	75fb      	strb	r3, [r7, #23]
          break;
 8005186:	e002      	b.n	800518e <USBD_CDC_Setup+0x19e>
          break;
 8005188:	bf00      	nop
 800518a:	e008      	b.n	800519e <USBD_CDC_Setup+0x1ae>
          break;
 800518c:	bf00      	nop
      }
      break;
 800518e:	e006      	b.n	800519e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005190:	6839      	ldr	r1, [r7, #0]
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f001 fc89 	bl	8006aaa <USBD_CtlError>
      ret = USBD_FAIL;
 8005198:	2303      	movs	r3, #3
 800519a:	75fb      	strb	r3, [r7, #23]
      break;
 800519c:	bf00      	nop
  }

  return (uint8_t)ret;
 800519e:	7dfb      	ldrb	r3, [r7, #23]
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	3718      	adds	r7, #24
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}

080051a8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b084      	sub	sp, #16
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	460b      	mov	r3, r1
 80051b2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80051ba:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	32b0      	adds	r2, #176	; 0xb0
 80051c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d101      	bne.n	80051d2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80051ce:	2303      	movs	r3, #3
 80051d0:	e065      	b.n	800529e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	32b0      	adds	r2, #176	; 0xb0
 80051dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051e0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80051e2:	78fb      	ldrb	r3, [r7, #3]
 80051e4:	f003 020f 	and.w	r2, r3, #15
 80051e8:	6879      	ldr	r1, [r7, #4]
 80051ea:	4613      	mov	r3, r2
 80051ec:	009b      	lsls	r3, r3, #2
 80051ee:	4413      	add	r3, r2
 80051f0:	009b      	lsls	r3, r3, #2
 80051f2:	440b      	add	r3, r1
 80051f4:	3318      	adds	r3, #24
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d02f      	beq.n	800525c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80051fc:	78fb      	ldrb	r3, [r7, #3]
 80051fe:	f003 020f 	and.w	r2, r3, #15
 8005202:	6879      	ldr	r1, [r7, #4]
 8005204:	4613      	mov	r3, r2
 8005206:	009b      	lsls	r3, r3, #2
 8005208:	4413      	add	r3, r2
 800520a:	009b      	lsls	r3, r3, #2
 800520c:	440b      	add	r3, r1
 800520e:	3318      	adds	r3, #24
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	78fb      	ldrb	r3, [r7, #3]
 8005214:	f003 010f 	and.w	r1, r3, #15
 8005218:	68f8      	ldr	r0, [r7, #12]
 800521a:	460b      	mov	r3, r1
 800521c:	00db      	lsls	r3, r3, #3
 800521e:	440b      	add	r3, r1
 8005220:	009b      	lsls	r3, r3, #2
 8005222:	4403      	add	r3, r0
 8005224:	331c      	adds	r3, #28
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	fbb2 f1f3 	udiv	r1, r2, r3
 800522c:	fb01 f303 	mul.w	r3, r1, r3
 8005230:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005232:	2b00      	cmp	r3, #0
 8005234:	d112      	bne.n	800525c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005236:	78fb      	ldrb	r3, [r7, #3]
 8005238:	f003 020f 	and.w	r2, r3, #15
 800523c:	6879      	ldr	r1, [r7, #4]
 800523e:	4613      	mov	r3, r2
 8005240:	009b      	lsls	r3, r3, #2
 8005242:	4413      	add	r3, r2
 8005244:	009b      	lsls	r3, r3, #2
 8005246:	440b      	add	r3, r1
 8005248:	3318      	adds	r3, #24
 800524a:	2200      	movs	r2, #0
 800524c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800524e:	78f9      	ldrb	r1, [r7, #3]
 8005250:	2300      	movs	r3, #0
 8005252:	2200      	movs	r2, #0
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f002 f9a0 	bl	800759a <USBD_LL_Transmit>
 800525a:	e01f      	b.n	800529c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	2200      	movs	r2, #0
 8005260:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800526a:	687a      	ldr	r2, [r7, #4]
 800526c:	33b0      	adds	r3, #176	; 0xb0
 800526e:	009b      	lsls	r3, r3, #2
 8005270:	4413      	add	r3, r2
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	691b      	ldr	r3, [r3, #16]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d010      	beq.n	800529c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	33b0      	adds	r3, #176	; 0xb0
 8005284:	009b      	lsls	r3, r3, #2
 8005286:	4413      	add	r3, r2
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	691b      	ldr	r3, [r3, #16]
 800528c:	68ba      	ldr	r2, [r7, #8]
 800528e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005292:	68ba      	ldr	r2, [r7, #8]
 8005294:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005298:	78fa      	ldrb	r2, [r7, #3]
 800529a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800529c:	2300      	movs	r3, #0
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3710      	adds	r7, #16
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}

080052a6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80052a6:	b580      	push	{r7, lr}
 80052a8:	b084      	sub	sp, #16
 80052aa:	af00      	add	r7, sp, #0
 80052ac:	6078      	str	r0, [r7, #4]
 80052ae:	460b      	mov	r3, r1
 80052b0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	32b0      	adds	r2, #176	; 0xb0
 80052bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052c0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	32b0      	adds	r2, #176	; 0xb0
 80052cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d101      	bne.n	80052d8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80052d4:	2303      	movs	r3, #3
 80052d6:	e01a      	b.n	800530e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80052d8:	78fb      	ldrb	r3, [r7, #3]
 80052da:	4619      	mov	r1, r3
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f002 f99e 	bl	800761e <USBD_LL_GetRxDataSize>
 80052e2:	4602      	mov	r2, r0
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80052f0:	687a      	ldr	r2, [r7, #4]
 80052f2:	33b0      	adds	r3, #176	; 0xb0
 80052f4:	009b      	lsls	r3, r3, #2
 80052f6:	4413      	add	r3, r2
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	68db      	ldr	r3, [r3, #12]
 80052fc:	68fa      	ldr	r2, [r7, #12]
 80052fe:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005302:	68fa      	ldr	r2, [r7, #12]
 8005304:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005308:	4611      	mov	r1, r2
 800530a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800530c:	2300      	movs	r3, #0
}
 800530e:	4618      	mov	r0, r3
 8005310:	3710      	adds	r7, #16
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}

08005316 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005316:	b580      	push	{r7, lr}
 8005318:	b084      	sub	sp, #16
 800531a:	af00      	add	r7, sp, #0
 800531c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	32b0      	adds	r2, #176	; 0xb0
 8005328:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800532c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d101      	bne.n	8005338 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005334:	2303      	movs	r3, #3
 8005336:	e025      	b.n	8005384 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	33b0      	adds	r3, #176	; 0xb0
 8005342:	009b      	lsls	r3, r3, #2
 8005344:	4413      	add	r3, r2
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d01a      	beq.n	8005382 <USBD_CDC_EP0_RxReady+0x6c>
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005352:	2bff      	cmp	r3, #255	; 0xff
 8005354:	d015      	beq.n	8005382 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800535c:	687a      	ldr	r2, [r7, #4]
 800535e:	33b0      	adds	r3, #176	; 0xb0
 8005360:	009b      	lsls	r3, r3, #2
 8005362:	4413      	add	r3, r2
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	68fa      	ldr	r2, [r7, #12]
 800536a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800536e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005370:	68fa      	ldr	r2, [r7, #12]
 8005372:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005376:	b292      	uxth	r2, r2
 8005378:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	22ff      	movs	r2, #255	; 0xff
 800537e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005382:	2300      	movs	r3, #0
}
 8005384:	4618      	mov	r0, r3
 8005386:	3710      	adds	r7, #16
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}

0800538c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b086      	sub	sp, #24
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005394:	2182      	movs	r1, #130	; 0x82
 8005396:	4818      	ldr	r0, [pc, #96]	; (80053f8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005398:	f000 fd4f 	bl	8005e3a <USBD_GetEpDesc>
 800539c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800539e:	2101      	movs	r1, #1
 80053a0:	4815      	ldr	r0, [pc, #84]	; (80053f8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80053a2:	f000 fd4a 	bl	8005e3a <USBD_GetEpDesc>
 80053a6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80053a8:	2181      	movs	r1, #129	; 0x81
 80053aa:	4813      	ldr	r0, [pc, #76]	; (80053f8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80053ac:	f000 fd45 	bl	8005e3a <USBD_GetEpDesc>
 80053b0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d002      	beq.n	80053be <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	2210      	movs	r2, #16
 80053bc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d006      	beq.n	80053d2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	2200      	movs	r2, #0
 80053c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053cc:	711a      	strb	r2, [r3, #4]
 80053ce:	2200      	movs	r2, #0
 80053d0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d006      	beq.n	80053e6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2200      	movs	r2, #0
 80053dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053e0:	711a      	strb	r2, [r3, #4]
 80053e2:	2200      	movs	r2, #0
 80053e4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2243      	movs	r2, #67	; 0x43
 80053ea:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80053ec:	4b02      	ldr	r3, [pc, #8]	; (80053f8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	3718      	adds	r7, #24
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}
 80053f6:	bf00      	nop
 80053f8:	20000050 	.word	0x20000050

080053fc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b086      	sub	sp, #24
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005404:	2182      	movs	r1, #130	; 0x82
 8005406:	4818      	ldr	r0, [pc, #96]	; (8005468 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005408:	f000 fd17 	bl	8005e3a <USBD_GetEpDesc>
 800540c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800540e:	2101      	movs	r1, #1
 8005410:	4815      	ldr	r0, [pc, #84]	; (8005468 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005412:	f000 fd12 	bl	8005e3a <USBD_GetEpDesc>
 8005416:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005418:	2181      	movs	r1, #129	; 0x81
 800541a:	4813      	ldr	r0, [pc, #76]	; (8005468 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800541c:	f000 fd0d 	bl	8005e3a <USBD_GetEpDesc>
 8005420:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d002      	beq.n	800542e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	2210      	movs	r2, #16
 800542c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d006      	beq.n	8005442 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	2200      	movs	r2, #0
 8005438:	711a      	strb	r2, [r3, #4]
 800543a:	2200      	movs	r2, #0
 800543c:	f042 0202 	orr.w	r2, r2, #2
 8005440:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d006      	beq.n	8005456 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2200      	movs	r2, #0
 800544c:	711a      	strb	r2, [r3, #4]
 800544e:	2200      	movs	r2, #0
 8005450:	f042 0202 	orr.w	r2, r2, #2
 8005454:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2243      	movs	r2, #67	; 0x43
 800545a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800545c:	4b02      	ldr	r3, [pc, #8]	; (8005468 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800545e:	4618      	mov	r0, r3
 8005460:	3718      	adds	r7, #24
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}
 8005466:	bf00      	nop
 8005468:	20000050 	.word	0x20000050

0800546c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b086      	sub	sp, #24
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005474:	2182      	movs	r1, #130	; 0x82
 8005476:	4818      	ldr	r0, [pc, #96]	; (80054d8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005478:	f000 fcdf 	bl	8005e3a <USBD_GetEpDesc>
 800547c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800547e:	2101      	movs	r1, #1
 8005480:	4815      	ldr	r0, [pc, #84]	; (80054d8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005482:	f000 fcda 	bl	8005e3a <USBD_GetEpDesc>
 8005486:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005488:	2181      	movs	r1, #129	; 0x81
 800548a:	4813      	ldr	r0, [pc, #76]	; (80054d8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800548c:	f000 fcd5 	bl	8005e3a <USBD_GetEpDesc>
 8005490:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d002      	beq.n	800549e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	2210      	movs	r2, #16
 800549c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d006      	beq.n	80054b2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	2200      	movs	r2, #0
 80054a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80054ac:	711a      	strb	r2, [r3, #4]
 80054ae:	2200      	movs	r2, #0
 80054b0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d006      	beq.n	80054c6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2200      	movs	r2, #0
 80054bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80054c0:	711a      	strb	r2, [r3, #4]
 80054c2:	2200      	movs	r2, #0
 80054c4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2243      	movs	r2, #67	; 0x43
 80054ca:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80054cc:	4b02      	ldr	r3, [pc, #8]	; (80054d8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3718      	adds	r7, #24
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}
 80054d6:	bf00      	nop
 80054d8:	20000050 	.word	0x20000050

080054dc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80054dc:	b480      	push	{r7}
 80054de:	b083      	sub	sp, #12
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	220a      	movs	r2, #10
 80054e8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80054ea:	4b03      	ldr	r3, [pc, #12]	; (80054f8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	370c      	adds	r7, #12
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr
 80054f8:	2000000c 	.word	0x2000000c

080054fc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b083      	sub	sp, #12
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
 8005504:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d101      	bne.n	8005510 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800550c:	2303      	movs	r3, #3
 800550e:	e009      	b.n	8005524 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005516:	687a      	ldr	r2, [r7, #4]
 8005518:	33b0      	adds	r3, #176	; 0xb0
 800551a:	009b      	lsls	r3, r3, #2
 800551c:	4413      	add	r3, r2
 800551e:	683a      	ldr	r2, [r7, #0]
 8005520:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005522:	2300      	movs	r3, #0
}
 8005524:	4618      	mov	r0, r3
 8005526:	370c      	adds	r7, #12
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr

08005530 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005530:	b480      	push	{r7}
 8005532:	b087      	sub	sp, #28
 8005534:	af00      	add	r7, sp, #0
 8005536:	60f8      	str	r0, [r7, #12]
 8005538:	60b9      	str	r1, [r7, #8]
 800553a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	32b0      	adds	r2, #176	; 0xb0
 8005546:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800554a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d101      	bne.n	8005556 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005552:	2303      	movs	r3, #3
 8005554:	e008      	b.n	8005568 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	68ba      	ldr	r2, [r7, #8]
 800555a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	687a      	ldr	r2, [r7, #4]
 8005562:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005566:	2300      	movs	r3, #0
}
 8005568:	4618      	mov	r0, r3
 800556a:	371c      	adds	r7, #28
 800556c:	46bd      	mov	sp, r7
 800556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005572:	4770      	bx	lr

08005574 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005574:	b480      	push	{r7}
 8005576:	b085      	sub	sp, #20
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
 800557c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	32b0      	adds	r2, #176	; 0xb0
 8005588:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800558c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d101      	bne.n	8005598 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005594:	2303      	movs	r3, #3
 8005596:	e004      	b.n	80055a2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	683a      	ldr	r2, [r7, #0]
 800559c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80055a0:	2300      	movs	r3, #0
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	3714      	adds	r7, #20
 80055a6:	46bd      	mov	sp, r7
 80055a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ac:	4770      	bx	lr
	...

080055b0 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b084      	sub	sp, #16
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	32b0      	adds	r2, #176	; 0xb0
 80055c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055c6:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80055c8:	2301      	movs	r3, #1
 80055ca:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d101      	bne.n	80055d6 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80055d2:	2303      	movs	r3, #3
 80055d4:	e025      	b.n	8005622 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d11f      	bne.n	8005620 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	2201      	movs	r2, #1
 80055e4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80055e8:	4b10      	ldr	r3, [pc, #64]	; (800562c <USBD_CDC_TransmitPacket+0x7c>)
 80055ea:	781b      	ldrb	r3, [r3, #0]
 80055ec:	f003 020f 	and.w	r2, r3, #15
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	4613      	mov	r3, r2
 80055fa:	009b      	lsls	r3, r3, #2
 80055fc:	4413      	add	r3, r2
 80055fe:	009b      	lsls	r3, r3, #2
 8005600:	4403      	add	r3, r0
 8005602:	3318      	adds	r3, #24
 8005604:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8005606:	4b09      	ldr	r3, [pc, #36]	; (800562c <USBD_CDC_TransmitPacket+0x7c>)
 8005608:	7819      	ldrb	r1, [r3, #0]
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f001 ffbf 	bl	800759a <USBD_LL_Transmit>

    ret = USBD_OK;
 800561c:	2300      	movs	r3, #0
 800561e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005620:	7bfb      	ldrb	r3, [r7, #15]
}
 8005622:	4618      	mov	r0, r3
 8005624:	3710      	adds	r7, #16
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}
 800562a:	bf00      	nop
 800562c:	20000093 	.word	0x20000093

08005630 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b084      	sub	sp, #16
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	32b0      	adds	r2, #176	; 0xb0
 8005642:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005646:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	32b0      	adds	r2, #176	; 0xb0
 8005652:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d101      	bne.n	800565e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800565a:	2303      	movs	r3, #3
 800565c:	e018      	b.n	8005690 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	7c1b      	ldrb	r3, [r3, #16]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d10a      	bne.n	800567c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005666:	4b0c      	ldr	r3, [pc, #48]	; (8005698 <USBD_CDC_ReceivePacket+0x68>)
 8005668:	7819      	ldrb	r1, [r3, #0]
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005670:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f001 ffb1 	bl	80075dc <USBD_LL_PrepareReceive>
 800567a:	e008      	b.n	800568e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800567c:	4b06      	ldr	r3, [pc, #24]	; (8005698 <USBD_CDC_ReceivePacket+0x68>)
 800567e:	7819      	ldrb	r1, [r3, #0]
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005686:	2340      	movs	r3, #64	; 0x40
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f001 ffa7 	bl	80075dc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800568e:	2300      	movs	r3, #0
}
 8005690:	4618      	mov	r0, r3
 8005692:	3710      	adds	r7, #16
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}
 8005698:	20000094 	.word	0x20000094

0800569c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b086      	sub	sp, #24
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	60f8      	str	r0, [r7, #12]
 80056a4:	60b9      	str	r1, [r7, #8]
 80056a6:	4613      	mov	r3, r2
 80056a8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d101      	bne.n	80056b4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80056b0:	2303      	movs	r3, #3
 80056b2:	e01f      	b.n	80056f4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2200      	movs	r2, #0
 80056b8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2200      	movs	r2, #0
 80056c0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2200      	movs	r2, #0
 80056c8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d003      	beq.n	80056da <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	68ba      	ldr	r2, [r7, #8]
 80056d6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2201      	movs	r2, #1
 80056de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	79fa      	ldrb	r2, [r7, #7]
 80056e6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80056e8:	68f8      	ldr	r0, [r7, #12]
 80056ea:	f001 fe21 	bl	8007330 <USBD_LL_Init>
 80056ee:	4603      	mov	r3, r0
 80056f0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80056f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3718      	adds	r7, #24
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}

080056fc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b084      	sub	sp, #16
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
 8005704:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005706:	2300      	movs	r3, #0
 8005708:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d101      	bne.n	8005714 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005710:	2303      	movs	r3, #3
 8005712:	e025      	b.n	8005760 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	683a      	ldr	r2, [r7, #0]
 8005718:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	32ae      	adds	r2, #174	; 0xae
 8005726:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800572a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800572c:	2b00      	cmp	r3, #0
 800572e:	d00f      	beq.n	8005750 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	32ae      	adds	r2, #174	; 0xae
 800573a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800573e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005740:	f107 020e 	add.w	r2, r7, #14
 8005744:	4610      	mov	r0, r2
 8005746:	4798      	blx	r3
 8005748:	4602      	mov	r2, r0
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8005756:	1c5a      	adds	r2, r3, #1
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800575e:	2300      	movs	r3, #0
}
 8005760:	4618      	mov	r0, r3
 8005762:	3710      	adds	r7, #16
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}

08005768 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b082      	sub	sp, #8
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	f001 fe29 	bl	80073c8 <USBD_LL_Start>
 8005776:	4603      	mov	r3, r0
}
 8005778:	4618      	mov	r0, r3
 800577a:	3708      	adds	r7, #8
 800577c:	46bd      	mov	sp, r7
 800577e:	bd80      	pop	{r7, pc}

08005780 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005780:	b480      	push	{r7}
 8005782:	b083      	sub	sp, #12
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005788:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800578a:	4618      	mov	r0, r3
 800578c:	370c      	adds	r7, #12
 800578e:	46bd      	mov	sp, r7
 8005790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005794:	4770      	bx	lr

08005796 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005796:	b580      	push	{r7, lr}
 8005798:	b084      	sub	sp, #16
 800579a:	af00      	add	r7, sp, #0
 800579c:	6078      	str	r0, [r7, #4]
 800579e:	460b      	mov	r3, r1
 80057a0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80057a2:	2300      	movs	r3, #0
 80057a4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d009      	beq.n	80057c4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	78fa      	ldrb	r2, [r7, #3]
 80057ba:	4611      	mov	r1, r2
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	4798      	blx	r3
 80057c0:	4603      	mov	r3, r0
 80057c2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80057c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3710      	adds	r7, #16
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}

080057ce <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80057ce:	b580      	push	{r7, lr}
 80057d0:	b084      	sub	sp, #16
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	6078      	str	r0, [r7, #4]
 80057d6:	460b      	mov	r3, r1
 80057d8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80057da:	2300      	movs	r3, #0
 80057dc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	78fa      	ldrb	r2, [r7, #3]
 80057e8:	4611      	mov	r1, r2
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	4798      	blx	r3
 80057ee:	4603      	mov	r3, r0
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d001      	beq.n	80057f8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80057f4:	2303      	movs	r3, #3
 80057f6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80057f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3710      	adds	r7, #16
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}

08005802 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005802:	b580      	push	{r7, lr}
 8005804:	b084      	sub	sp, #16
 8005806:	af00      	add	r7, sp, #0
 8005808:	6078      	str	r0, [r7, #4]
 800580a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005812:	6839      	ldr	r1, [r7, #0]
 8005814:	4618      	mov	r0, r3
 8005816:	f001 f90e 	bl	8006a36 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2201      	movs	r2, #1
 800581e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005828:	461a      	mov	r2, r3
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005836:	f003 031f 	and.w	r3, r3, #31
 800583a:	2b02      	cmp	r3, #2
 800583c:	d01a      	beq.n	8005874 <USBD_LL_SetupStage+0x72>
 800583e:	2b02      	cmp	r3, #2
 8005840:	d822      	bhi.n	8005888 <USBD_LL_SetupStage+0x86>
 8005842:	2b00      	cmp	r3, #0
 8005844:	d002      	beq.n	800584c <USBD_LL_SetupStage+0x4a>
 8005846:	2b01      	cmp	r3, #1
 8005848:	d00a      	beq.n	8005860 <USBD_LL_SetupStage+0x5e>
 800584a:	e01d      	b.n	8005888 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005852:	4619      	mov	r1, r3
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	f000 fb65 	bl	8005f24 <USBD_StdDevReq>
 800585a:	4603      	mov	r3, r0
 800585c:	73fb      	strb	r3, [r7, #15]
      break;
 800585e:	e020      	b.n	80058a2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005866:	4619      	mov	r1, r3
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	f000 fbcd 	bl	8006008 <USBD_StdItfReq>
 800586e:	4603      	mov	r3, r0
 8005870:	73fb      	strb	r3, [r7, #15]
      break;
 8005872:	e016      	b.n	80058a2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800587a:	4619      	mov	r1, r3
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	f000 fc2f 	bl	80060e0 <USBD_StdEPReq>
 8005882:	4603      	mov	r3, r0
 8005884:	73fb      	strb	r3, [r7, #15]
      break;
 8005886:	e00c      	b.n	80058a2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800588e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005892:	b2db      	uxtb	r3, r3
 8005894:	4619      	mov	r1, r3
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f001 fdf6 	bl	8007488 <USBD_LL_StallEP>
 800589c:	4603      	mov	r3, r0
 800589e:	73fb      	strb	r3, [r7, #15]
      break;
 80058a0:	bf00      	nop
  }

  return ret;
 80058a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	3710      	adds	r7, #16
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}

080058ac <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b086      	sub	sp, #24
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	60f8      	str	r0, [r7, #12]
 80058b4:	460b      	mov	r3, r1
 80058b6:	607a      	str	r2, [r7, #4]
 80058b8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80058ba:	2300      	movs	r3, #0
 80058bc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80058be:	7afb      	ldrb	r3, [r7, #11]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d16e      	bne.n	80059a2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80058ca:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80058d2:	2b03      	cmp	r3, #3
 80058d4:	f040 8098 	bne.w	8005a08 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	689a      	ldr	r2, [r3, #8]
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	68db      	ldr	r3, [r3, #12]
 80058e0:	429a      	cmp	r2, r3
 80058e2:	d913      	bls.n	800590c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	689a      	ldr	r2, [r3, #8]
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	68db      	ldr	r3, [r3, #12]
 80058ec:	1ad2      	subs	r2, r2, r3
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	68da      	ldr	r2, [r3, #12]
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	4293      	cmp	r3, r2
 80058fc:	bf28      	it	cs
 80058fe:	4613      	movcs	r3, r2
 8005900:	461a      	mov	r2, r3
 8005902:	6879      	ldr	r1, [r7, #4]
 8005904:	68f8      	ldr	r0, [r7, #12]
 8005906:	f001 f98a 	bl	8006c1e <USBD_CtlContinueRx>
 800590a:	e07d      	b.n	8005a08 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005912:	f003 031f 	and.w	r3, r3, #31
 8005916:	2b02      	cmp	r3, #2
 8005918:	d014      	beq.n	8005944 <USBD_LL_DataOutStage+0x98>
 800591a:	2b02      	cmp	r3, #2
 800591c:	d81d      	bhi.n	800595a <USBD_LL_DataOutStage+0xae>
 800591e:	2b00      	cmp	r3, #0
 8005920:	d002      	beq.n	8005928 <USBD_LL_DataOutStage+0x7c>
 8005922:	2b01      	cmp	r3, #1
 8005924:	d003      	beq.n	800592e <USBD_LL_DataOutStage+0x82>
 8005926:	e018      	b.n	800595a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005928:	2300      	movs	r3, #0
 800592a:	75bb      	strb	r3, [r7, #22]
            break;
 800592c:	e018      	b.n	8005960 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005934:	b2db      	uxtb	r3, r3
 8005936:	4619      	mov	r1, r3
 8005938:	68f8      	ldr	r0, [r7, #12]
 800593a:	f000 fa64 	bl	8005e06 <USBD_CoreFindIF>
 800593e:	4603      	mov	r3, r0
 8005940:	75bb      	strb	r3, [r7, #22]
            break;
 8005942:	e00d      	b.n	8005960 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800594a:	b2db      	uxtb	r3, r3
 800594c:	4619      	mov	r1, r3
 800594e:	68f8      	ldr	r0, [r7, #12]
 8005950:	f000 fa66 	bl	8005e20 <USBD_CoreFindEP>
 8005954:	4603      	mov	r3, r0
 8005956:	75bb      	strb	r3, [r7, #22]
            break;
 8005958:	e002      	b.n	8005960 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800595a:	2300      	movs	r3, #0
 800595c:	75bb      	strb	r3, [r7, #22]
            break;
 800595e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005960:	7dbb      	ldrb	r3, [r7, #22]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d119      	bne.n	800599a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800596c:	b2db      	uxtb	r3, r3
 800596e:	2b03      	cmp	r3, #3
 8005970:	d113      	bne.n	800599a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005972:	7dba      	ldrb	r2, [r7, #22]
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	32ae      	adds	r2, #174	; 0xae
 8005978:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800597c:	691b      	ldr	r3, [r3, #16]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d00b      	beq.n	800599a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005982:	7dba      	ldrb	r2, [r7, #22]
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800598a:	7dba      	ldrb	r2, [r7, #22]
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	32ae      	adds	r2, #174	; 0xae
 8005990:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005994:	691b      	ldr	r3, [r3, #16]
 8005996:	68f8      	ldr	r0, [r7, #12]
 8005998:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800599a:	68f8      	ldr	r0, [r7, #12]
 800599c:	f001 f950 	bl	8006c40 <USBD_CtlSendStatus>
 80059a0:	e032      	b.n	8005a08 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80059a2:	7afb      	ldrb	r3, [r7, #11]
 80059a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059a8:	b2db      	uxtb	r3, r3
 80059aa:	4619      	mov	r1, r3
 80059ac:	68f8      	ldr	r0, [r7, #12]
 80059ae:	f000 fa37 	bl	8005e20 <USBD_CoreFindEP>
 80059b2:	4603      	mov	r3, r0
 80059b4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80059b6:	7dbb      	ldrb	r3, [r7, #22]
 80059b8:	2bff      	cmp	r3, #255	; 0xff
 80059ba:	d025      	beq.n	8005a08 <USBD_LL_DataOutStage+0x15c>
 80059bc:	7dbb      	ldrb	r3, [r7, #22]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d122      	bne.n	8005a08 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059c8:	b2db      	uxtb	r3, r3
 80059ca:	2b03      	cmp	r3, #3
 80059cc:	d117      	bne.n	80059fe <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80059ce:	7dba      	ldrb	r2, [r7, #22]
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	32ae      	adds	r2, #174	; 0xae
 80059d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059d8:	699b      	ldr	r3, [r3, #24]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d00f      	beq.n	80059fe <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80059de:	7dba      	ldrb	r2, [r7, #22]
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80059e6:	7dba      	ldrb	r2, [r7, #22]
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	32ae      	adds	r2, #174	; 0xae
 80059ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059f0:	699b      	ldr	r3, [r3, #24]
 80059f2:	7afa      	ldrb	r2, [r7, #11]
 80059f4:	4611      	mov	r1, r2
 80059f6:	68f8      	ldr	r0, [r7, #12]
 80059f8:	4798      	blx	r3
 80059fa:	4603      	mov	r3, r0
 80059fc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80059fe:	7dfb      	ldrb	r3, [r7, #23]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d001      	beq.n	8005a08 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005a04:	7dfb      	ldrb	r3, [r7, #23]
 8005a06:	e000      	b.n	8005a0a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005a08:	2300      	movs	r3, #0
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3718      	adds	r7, #24
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}

08005a12 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005a12:	b580      	push	{r7, lr}
 8005a14:	b086      	sub	sp, #24
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	60f8      	str	r0, [r7, #12]
 8005a1a:	460b      	mov	r3, r1
 8005a1c:	607a      	str	r2, [r7, #4]
 8005a1e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005a20:	7afb      	ldrb	r3, [r7, #11]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d16f      	bne.n	8005b06 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	3314      	adds	r3, #20
 8005a2a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005a32:	2b02      	cmp	r3, #2
 8005a34:	d15a      	bne.n	8005aec <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	689a      	ldr	r2, [r3, #8]
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	68db      	ldr	r3, [r3, #12]
 8005a3e:	429a      	cmp	r2, r3
 8005a40:	d914      	bls.n	8005a6c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	689a      	ldr	r2, [r3, #8]
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	68db      	ldr	r3, [r3, #12]
 8005a4a:	1ad2      	subs	r2, r2, r3
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	689b      	ldr	r3, [r3, #8]
 8005a54:	461a      	mov	r2, r3
 8005a56:	6879      	ldr	r1, [r7, #4]
 8005a58:	68f8      	ldr	r0, [r7, #12]
 8005a5a:	f001 f8b2 	bl	8006bc2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005a5e:	2300      	movs	r3, #0
 8005a60:	2200      	movs	r2, #0
 8005a62:	2100      	movs	r1, #0
 8005a64:	68f8      	ldr	r0, [r7, #12]
 8005a66:	f001 fdb9 	bl	80075dc <USBD_LL_PrepareReceive>
 8005a6a:	e03f      	b.n	8005aec <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	68da      	ldr	r2, [r3, #12]
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	689b      	ldr	r3, [r3, #8]
 8005a74:	429a      	cmp	r2, r3
 8005a76:	d11c      	bne.n	8005ab2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	685a      	ldr	r2, [r3, #4]
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d316      	bcc.n	8005ab2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	685a      	ldr	r2, [r3, #4]
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d20f      	bcs.n	8005ab2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005a92:	2200      	movs	r2, #0
 8005a94:	2100      	movs	r1, #0
 8005a96:	68f8      	ldr	r0, [r7, #12]
 8005a98:	f001 f893 	bl	8006bc2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	2100      	movs	r1, #0
 8005aaa:	68f8      	ldr	r0, [r7, #12]
 8005aac:	f001 fd96 	bl	80075dc <USBD_LL_PrepareReceive>
 8005ab0:	e01c      	b.n	8005aec <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ab8:	b2db      	uxtb	r3, r3
 8005aba:	2b03      	cmp	r3, #3
 8005abc:	d10f      	bne.n	8005ade <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ac4:	68db      	ldr	r3, [r3, #12]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d009      	beq.n	8005ade <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2200      	movs	r2, #0
 8005ace:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ad8:	68db      	ldr	r3, [r3, #12]
 8005ada:	68f8      	ldr	r0, [r7, #12]
 8005adc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005ade:	2180      	movs	r1, #128	; 0x80
 8005ae0:	68f8      	ldr	r0, [r7, #12]
 8005ae2:	f001 fcd1 	bl	8007488 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005ae6:	68f8      	ldr	r0, [r7, #12]
 8005ae8:	f001 f8bd 	bl	8006c66 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d03a      	beq.n	8005b6c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005af6:	68f8      	ldr	r0, [r7, #12]
 8005af8:	f7ff fe42 	bl	8005780 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2200      	movs	r2, #0
 8005b00:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005b04:	e032      	b.n	8005b6c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005b06:	7afb      	ldrb	r3, [r7, #11]
 8005b08:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005b0c:	b2db      	uxtb	r3, r3
 8005b0e:	4619      	mov	r1, r3
 8005b10:	68f8      	ldr	r0, [r7, #12]
 8005b12:	f000 f985 	bl	8005e20 <USBD_CoreFindEP>
 8005b16:	4603      	mov	r3, r0
 8005b18:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005b1a:	7dfb      	ldrb	r3, [r7, #23]
 8005b1c:	2bff      	cmp	r3, #255	; 0xff
 8005b1e:	d025      	beq.n	8005b6c <USBD_LL_DataInStage+0x15a>
 8005b20:	7dfb      	ldrb	r3, [r7, #23]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d122      	bne.n	8005b6c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b2c:	b2db      	uxtb	r3, r3
 8005b2e:	2b03      	cmp	r3, #3
 8005b30:	d11c      	bne.n	8005b6c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005b32:	7dfa      	ldrb	r2, [r7, #23]
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	32ae      	adds	r2, #174	; 0xae
 8005b38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b3c:	695b      	ldr	r3, [r3, #20]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d014      	beq.n	8005b6c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005b42:	7dfa      	ldrb	r2, [r7, #23]
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005b4a:	7dfa      	ldrb	r2, [r7, #23]
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	32ae      	adds	r2, #174	; 0xae
 8005b50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b54:	695b      	ldr	r3, [r3, #20]
 8005b56:	7afa      	ldrb	r2, [r7, #11]
 8005b58:	4611      	mov	r1, r2
 8005b5a:	68f8      	ldr	r0, [r7, #12]
 8005b5c:	4798      	blx	r3
 8005b5e:	4603      	mov	r3, r0
 8005b60:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005b62:	7dbb      	ldrb	r3, [r7, #22]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d001      	beq.n	8005b6c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005b68:	7dbb      	ldrb	r3, [r7, #22]
 8005b6a:	e000      	b.n	8005b6e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005b6c:	2300      	movs	r3, #0
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3718      	adds	r7, #24
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}

08005b76 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005b76:	b580      	push	{r7, lr}
 8005b78:	b084      	sub	sp, #16
 8005b7a:	af00      	add	r7, sp, #0
 8005b7c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2201      	movs	r2, #1
 8005b86:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2200      	movs	r2, #0
 8005b96:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d014      	beq.n	8005bdc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d00e      	beq.n	8005bdc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	687a      	ldr	r2, [r7, #4]
 8005bc8:	6852      	ldr	r2, [r2, #4]
 8005bca:	b2d2      	uxtb	r2, r2
 8005bcc:	4611      	mov	r1, r2
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	4798      	blx	r3
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d001      	beq.n	8005bdc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005bd8:	2303      	movs	r3, #3
 8005bda:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005bdc:	2340      	movs	r3, #64	; 0x40
 8005bde:	2200      	movs	r2, #0
 8005be0:	2100      	movs	r1, #0
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f001 fc0b 	bl	80073fe <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2201      	movs	r2, #1
 8005bec:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2240      	movs	r2, #64	; 0x40
 8005bf4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005bf8:	2340      	movs	r3, #64	; 0x40
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	2180      	movs	r1, #128	; 0x80
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f001 fbfd 	bl	80073fe <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2201      	movs	r2, #1
 8005c08:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2240      	movs	r2, #64	; 0x40
 8005c0e:	621a      	str	r2, [r3, #32]

  return ret;
 8005c10:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3710      	adds	r7, #16
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}

08005c1a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005c1a:	b480      	push	{r7}
 8005c1c:	b083      	sub	sp, #12
 8005c1e:	af00      	add	r7, sp, #0
 8005c20:	6078      	str	r0, [r7, #4]
 8005c22:	460b      	mov	r3, r1
 8005c24:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	78fa      	ldrb	r2, [r7, #3]
 8005c2a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005c2c:	2300      	movs	r3, #0
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	370c      	adds	r7, #12
 8005c32:	46bd      	mov	sp, r7
 8005c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c38:	4770      	bx	lr

08005c3a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005c3a:	b480      	push	{r7}
 8005c3c:	b083      	sub	sp, #12
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c48:	b2db      	uxtb	r3, r3
 8005c4a:	2b04      	cmp	r3, #4
 8005c4c:	d006      	beq.n	8005c5c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c54:	b2da      	uxtb	r2, r3
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2204      	movs	r2, #4
 8005c60:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005c64:	2300      	movs	r3, #0
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	370c      	adds	r7, #12
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c70:	4770      	bx	lr

08005c72 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005c72:	b480      	push	{r7}
 8005c74:	b083      	sub	sp, #12
 8005c76:	af00      	add	r7, sp, #0
 8005c78:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c80:	b2db      	uxtb	r3, r3
 8005c82:	2b04      	cmp	r3, #4
 8005c84:	d106      	bne.n	8005c94 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005c8c:	b2da      	uxtb	r2, r3
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005c94:	2300      	movs	r3, #0
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	370c      	adds	r7, #12
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca0:	4770      	bx	lr

08005ca2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005ca2:	b580      	push	{r7, lr}
 8005ca4:	b082      	sub	sp, #8
 8005ca6:	af00      	add	r7, sp, #0
 8005ca8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005cb0:	b2db      	uxtb	r3, r3
 8005cb2:	2b03      	cmp	r3, #3
 8005cb4:	d110      	bne.n	8005cd8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d00b      	beq.n	8005cd8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cc6:	69db      	ldr	r3, [r3, #28]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d005      	beq.n	8005cd8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cd2:	69db      	ldr	r3, [r3, #28]
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005cd8:	2300      	movs	r3, #0
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	3708      	adds	r7, #8
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}

08005ce2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005ce2:	b580      	push	{r7, lr}
 8005ce4:	b082      	sub	sp, #8
 8005ce6:	af00      	add	r7, sp, #0
 8005ce8:	6078      	str	r0, [r7, #4]
 8005cea:	460b      	mov	r3, r1
 8005cec:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	32ae      	adds	r2, #174	; 0xae
 8005cf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d101      	bne.n	8005d04 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005d00:	2303      	movs	r3, #3
 8005d02:	e01c      	b.n	8005d3e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d0a:	b2db      	uxtb	r3, r3
 8005d0c:	2b03      	cmp	r3, #3
 8005d0e:	d115      	bne.n	8005d3c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	32ae      	adds	r2, #174	; 0xae
 8005d1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d1e:	6a1b      	ldr	r3, [r3, #32]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d00b      	beq.n	8005d3c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	32ae      	adds	r2, #174	; 0xae
 8005d2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d32:	6a1b      	ldr	r3, [r3, #32]
 8005d34:	78fa      	ldrb	r2, [r7, #3]
 8005d36:	4611      	mov	r1, r2
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005d3c:	2300      	movs	r3, #0
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3708      	adds	r7, #8
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}

08005d46 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005d46:	b580      	push	{r7, lr}
 8005d48:	b082      	sub	sp, #8
 8005d4a:	af00      	add	r7, sp, #0
 8005d4c:	6078      	str	r0, [r7, #4]
 8005d4e:	460b      	mov	r3, r1
 8005d50:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	32ae      	adds	r2, #174	; 0xae
 8005d5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d101      	bne.n	8005d68 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005d64:	2303      	movs	r3, #3
 8005d66:	e01c      	b.n	8005da2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d6e:	b2db      	uxtb	r3, r3
 8005d70:	2b03      	cmp	r3, #3
 8005d72:	d115      	bne.n	8005da0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	32ae      	adds	r2, #174	; 0xae
 8005d7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d00b      	beq.n	8005da0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	32ae      	adds	r2, #174	; 0xae
 8005d92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d98:	78fa      	ldrb	r2, [r7, #3]
 8005d9a:	4611      	mov	r1, r2
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005da0:	2300      	movs	r3, #0
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3708      	adds	r7, #8
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}

08005daa <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005daa:	b480      	push	{r7}
 8005dac:	b083      	sub	sp, #12
 8005dae:	af00      	add	r7, sp, #0
 8005db0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005db2:	2300      	movs	r3, #0
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	370c      	adds	r7, #12
 8005db8:	46bd      	mov	sp, r7
 8005dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbe:	4770      	bx	lr

08005dc0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b084      	sub	sp, #16
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8005dc8:	2300      	movs	r3, #0
 8005dca:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2201      	movs	r2, #1
 8005dd0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d00e      	beq.n	8005dfc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	687a      	ldr	r2, [r7, #4]
 8005de8:	6852      	ldr	r2, [r2, #4]
 8005dea:	b2d2      	uxtb	r2, r2
 8005dec:	4611      	mov	r1, r2
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	4798      	blx	r3
 8005df2:	4603      	mov	r3, r0
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d001      	beq.n	8005dfc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005df8:	2303      	movs	r3, #3
 8005dfa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005dfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	3710      	adds	r7, #16
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}

08005e06 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005e06:	b480      	push	{r7}
 8005e08:	b083      	sub	sp, #12
 8005e0a:	af00      	add	r7, sp, #0
 8005e0c:	6078      	str	r0, [r7, #4]
 8005e0e:	460b      	mov	r3, r1
 8005e10:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005e12:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	370c      	adds	r7, #12
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1e:	4770      	bx	lr

08005e20 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b083      	sub	sp, #12
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
 8005e28:	460b      	mov	r3, r1
 8005e2a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005e2c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	370c      	adds	r7, #12
 8005e32:	46bd      	mov	sp, r7
 8005e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e38:	4770      	bx	lr

08005e3a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8005e3a:	b580      	push	{r7, lr}
 8005e3c:	b086      	sub	sp, #24
 8005e3e:	af00      	add	r7, sp, #0
 8005e40:	6078      	str	r0, [r7, #4]
 8005e42:	460b      	mov	r3, r1
 8005e44:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	885b      	ldrh	r3, [r3, #2]
 8005e56:	b29a      	uxth	r2, r3
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	781b      	ldrb	r3, [r3, #0]
 8005e5c:	b29b      	uxth	r3, r3
 8005e5e:	429a      	cmp	r2, r3
 8005e60:	d920      	bls.n	8005ea4 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	781b      	ldrb	r3, [r3, #0]
 8005e66:	b29b      	uxth	r3, r3
 8005e68:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8005e6a:	e013      	b.n	8005e94 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005e6c:	f107 030a 	add.w	r3, r7, #10
 8005e70:	4619      	mov	r1, r3
 8005e72:	6978      	ldr	r0, [r7, #20]
 8005e74:	f000 f81b 	bl	8005eae <USBD_GetNextDesc>
 8005e78:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	785b      	ldrb	r3, [r3, #1]
 8005e7e:	2b05      	cmp	r3, #5
 8005e80:	d108      	bne.n	8005e94 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	789b      	ldrb	r3, [r3, #2]
 8005e8a:	78fa      	ldrb	r2, [r7, #3]
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	d008      	beq.n	8005ea2 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8005e90:	2300      	movs	r3, #0
 8005e92:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	885b      	ldrh	r3, [r3, #2]
 8005e98:	b29a      	uxth	r2, r3
 8005e9a:	897b      	ldrh	r3, [r7, #10]
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	d8e5      	bhi.n	8005e6c <USBD_GetEpDesc+0x32>
 8005ea0:	e000      	b.n	8005ea4 <USBD_GetEpDesc+0x6a>
          break;
 8005ea2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8005ea4:	693b      	ldr	r3, [r7, #16]
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3718      	adds	r7, #24
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}

08005eae <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8005eae:	b480      	push	{r7}
 8005eb0:	b085      	sub	sp, #20
 8005eb2:	af00      	add	r7, sp, #0
 8005eb4:	6078      	str	r0, [r7, #4]
 8005eb6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	881a      	ldrh	r2, [r3, #0]
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	781b      	ldrb	r3, [r3, #0]
 8005ec4:	b29b      	uxth	r3, r3
 8005ec6:	4413      	add	r3, r2
 8005ec8:	b29a      	uxth	r2, r3
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	781b      	ldrb	r3, [r3, #0]
 8005ed2:	461a      	mov	r2, r3
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	4413      	add	r3, r2
 8005ed8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8005eda:	68fb      	ldr	r3, [r7, #12]
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	3714      	adds	r7, #20
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee6:	4770      	bx	lr

08005ee8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b087      	sub	sp, #28
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	781b      	ldrb	r3, [r3, #0]
 8005ef8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	3301      	adds	r3, #1
 8005efe:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	781b      	ldrb	r3, [r3, #0]
 8005f04:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005f06:	8a3b      	ldrh	r3, [r7, #16]
 8005f08:	021b      	lsls	r3, r3, #8
 8005f0a:	b21a      	sxth	r2, r3
 8005f0c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005f10:	4313      	orrs	r3, r2
 8005f12:	b21b      	sxth	r3, r3
 8005f14:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005f16:	89fb      	ldrh	r3, [r7, #14]
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	371c      	adds	r7, #28
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f22:	4770      	bx	lr

08005f24 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b084      	sub	sp, #16
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
 8005f2c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	781b      	ldrb	r3, [r3, #0]
 8005f36:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005f3a:	2b40      	cmp	r3, #64	; 0x40
 8005f3c:	d005      	beq.n	8005f4a <USBD_StdDevReq+0x26>
 8005f3e:	2b40      	cmp	r3, #64	; 0x40
 8005f40:	d857      	bhi.n	8005ff2 <USBD_StdDevReq+0xce>
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d00f      	beq.n	8005f66 <USBD_StdDevReq+0x42>
 8005f46:	2b20      	cmp	r3, #32
 8005f48:	d153      	bne.n	8005ff2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	32ae      	adds	r2, #174	; 0xae
 8005f54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f58:	689b      	ldr	r3, [r3, #8]
 8005f5a:	6839      	ldr	r1, [r7, #0]
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	4798      	blx	r3
 8005f60:	4603      	mov	r3, r0
 8005f62:	73fb      	strb	r3, [r7, #15]
      break;
 8005f64:	e04a      	b.n	8005ffc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	785b      	ldrb	r3, [r3, #1]
 8005f6a:	2b09      	cmp	r3, #9
 8005f6c:	d83b      	bhi.n	8005fe6 <USBD_StdDevReq+0xc2>
 8005f6e:	a201      	add	r2, pc, #4	; (adr r2, 8005f74 <USBD_StdDevReq+0x50>)
 8005f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f74:	08005fc9 	.word	0x08005fc9
 8005f78:	08005fdd 	.word	0x08005fdd
 8005f7c:	08005fe7 	.word	0x08005fe7
 8005f80:	08005fd3 	.word	0x08005fd3
 8005f84:	08005fe7 	.word	0x08005fe7
 8005f88:	08005fa7 	.word	0x08005fa7
 8005f8c:	08005f9d 	.word	0x08005f9d
 8005f90:	08005fe7 	.word	0x08005fe7
 8005f94:	08005fbf 	.word	0x08005fbf
 8005f98:	08005fb1 	.word	0x08005fb1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005f9c:	6839      	ldr	r1, [r7, #0]
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f000 fa3c 	bl	800641c <USBD_GetDescriptor>
          break;
 8005fa4:	e024      	b.n	8005ff0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005fa6:	6839      	ldr	r1, [r7, #0]
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f000 fba1 	bl	80066f0 <USBD_SetAddress>
          break;
 8005fae:	e01f      	b.n	8005ff0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005fb0:	6839      	ldr	r1, [r7, #0]
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f000 fbe0 	bl	8006778 <USBD_SetConfig>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	73fb      	strb	r3, [r7, #15]
          break;
 8005fbc:	e018      	b.n	8005ff0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005fbe:	6839      	ldr	r1, [r7, #0]
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f000 fc83 	bl	80068cc <USBD_GetConfig>
          break;
 8005fc6:	e013      	b.n	8005ff0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005fc8:	6839      	ldr	r1, [r7, #0]
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f000 fcb4 	bl	8006938 <USBD_GetStatus>
          break;
 8005fd0:	e00e      	b.n	8005ff0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005fd2:	6839      	ldr	r1, [r7, #0]
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	f000 fce3 	bl	80069a0 <USBD_SetFeature>
          break;
 8005fda:	e009      	b.n	8005ff0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005fdc:	6839      	ldr	r1, [r7, #0]
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f000 fd07 	bl	80069f2 <USBD_ClrFeature>
          break;
 8005fe4:	e004      	b.n	8005ff0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8005fe6:	6839      	ldr	r1, [r7, #0]
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f000 fd5e 	bl	8006aaa <USBD_CtlError>
          break;
 8005fee:	bf00      	nop
      }
      break;
 8005ff0:	e004      	b.n	8005ffc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8005ff2:	6839      	ldr	r1, [r7, #0]
 8005ff4:	6878      	ldr	r0, [r7, #4]
 8005ff6:	f000 fd58 	bl	8006aaa <USBD_CtlError>
      break;
 8005ffa:	bf00      	nop
  }

  return ret;
 8005ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	3710      	adds	r7, #16
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}
 8006006:	bf00      	nop

08006008 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b084      	sub	sp, #16
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
 8006010:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006012:	2300      	movs	r3, #0
 8006014:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	781b      	ldrb	r3, [r3, #0]
 800601a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800601e:	2b40      	cmp	r3, #64	; 0x40
 8006020:	d005      	beq.n	800602e <USBD_StdItfReq+0x26>
 8006022:	2b40      	cmp	r3, #64	; 0x40
 8006024:	d852      	bhi.n	80060cc <USBD_StdItfReq+0xc4>
 8006026:	2b00      	cmp	r3, #0
 8006028:	d001      	beq.n	800602e <USBD_StdItfReq+0x26>
 800602a:	2b20      	cmp	r3, #32
 800602c:	d14e      	bne.n	80060cc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006034:	b2db      	uxtb	r3, r3
 8006036:	3b01      	subs	r3, #1
 8006038:	2b02      	cmp	r3, #2
 800603a:	d840      	bhi.n	80060be <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	889b      	ldrh	r3, [r3, #4]
 8006040:	b2db      	uxtb	r3, r3
 8006042:	2b01      	cmp	r3, #1
 8006044:	d836      	bhi.n	80060b4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	889b      	ldrh	r3, [r3, #4]
 800604a:	b2db      	uxtb	r3, r3
 800604c:	4619      	mov	r1, r3
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f7ff fed9 	bl	8005e06 <USBD_CoreFindIF>
 8006054:	4603      	mov	r3, r0
 8006056:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006058:	7bbb      	ldrb	r3, [r7, #14]
 800605a:	2bff      	cmp	r3, #255	; 0xff
 800605c:	d01d      	beq.n	800609a <USBD_StdItfReq+0x92>
 800605e:	7bbb      	ldrb	r3, [r7, #14]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d11a      	bne.n	800609a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006064:	7bba      	ldrb	r2, [r7, #14]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	32ae      	adds	r2, #174	; 0xae
 800606a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800606e:	689b      	ldr	r3, [r3, #8]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d00f      	beq.n	8006094 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006074:	7bba      	ldrb	r2, [r7, #14]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800607c:	7bba      	ldrb	r2, [r7, #14]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	32ae      	adds	r2, #174	; 0xae
 8006082:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006086:	689b      	ldr	r3, [r3, #8]
 8006088:	6839      	ldr	r1, [r7, #0]
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	4798      	blx	r3
 800608e:	4603      	mov	r3, r0
 8006090:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006092:	e004      	b.n	800609e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006094:	2303      	movs	r3, #3
 8006096:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006098:	e001      	b.n	800609e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800609a:	2303      	movs	r3, #3
 800609c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	88db      	ldrh	r3, [r3, #6]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d110      	bne.n	80060c8 <USBD_StdItfReq+0xc0>
 80060a6:	7bfb      	ldrb	r3, [r7, #15]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d10d      	bne.n	80060c8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80060ac:	6878      	ldr	r0, [r7, #4]
 80060ae:	f000 fdc7 	bl	8006c40 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80060b2:	e009      	b.n	80060c8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80060b4:	6839      	ldr	r1, [r7, #0]
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f000 fcf7 	bl	8006aaa <USBD_CtlError>
          break;
 80060bc:	e004      	b.n	80060c8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80060be:	6839      	ldr	r1, [r7, #0]
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	f000 fcf2 	bl	8006aaa <USBD_CtlError>
          break;
 80060c6:	e000      	b.n	80060ca <USBD_StdItfReq+0xc2>
          break;
 80060c8:	bf00      	nop
      }
      break;
 80060ca:	e004      	b.n	80060d6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80060cc:	6839      	ldr	r1, [r7, #0]
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f000 fceb 	bl	8006aaa <USBD_CtlError>
      break;
 80060d4:	bf00      	nop
  }

  return ret;
 80060d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80060d8:	4618      	mov	r0, r3
 80060da:	3710      	adds	r7, #16
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}

080060e0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b084      	sub	sp, #16
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80060ea:	2300      	movs	r3, #0
 80060ec:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	889b      	ldrh	r3, [r3, #4]
 80060f2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	781b      	ldrb	r3, [r3, #0]
 80060f8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80060fc:	2b40      	cmp	r3, #64	; 0x40
 80060fe:	d007      	beq.n	8006110 <USBD_StdEPReq+0x30>
 8006100:	2b40      	cmp	r3, #64	; 0x40
 8006102:	f200 817f 	bhi.w	8006404 <USBD_StdEPReq+0x324>
 8006106:	2b00      	cmp	r3, #0
 8006108:	d02a      	beq.n	8006160 <USBD_StdEPReq+0x80>
 800610a:	2b20      	cmp	r3, #32
 800610c:	f040 817a 	bne.w	8006404 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006110:	7bbb      	ldrb	r3, [r7, #14]
 8006112:	4619      	mov	r1, r3
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f7ff fe83 	bl	8005e20 <USBD_CoreFindEP>
 800611a:	4603      	mov	r3, r0
 800611c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800611e:	7b7b      	ldrb	r3, [r7, #13]
 8006120:	2bff      	cmp	r3, #255	; 0xff
 8006122:	f000 8174 	beq.w	800640e <USBD_StdEPReq+0x32e>
 8006126:	7b7b      	ldrb	r3, [r7, #13]
 8006128:	2b00      	cmp	r3, #0
 800612a:	f040 8170 	bne.w	800640e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800612e:	7b7a      	ldrb	r2, [r7, #13]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006136:	7b7a      	ldrb	r2, [r7, #13]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	32ae      	adds	r2, #174	; 0xae
 800613c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006140:	689b      	ldr	r3, [r3, #8]
 8006142:	2b00      	cmp	r3, #0
 8006144:	f000 8163 	beq.w	800640e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006148:	7b7a      	ldrb	r2, [r7, #13]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	32ae      	adds	r2, #174	; 0xae
 800614e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006152:	689b      	ldr	r3, [r3, #8]
 8006154:	6839      	ldr	r1, [r7, #0]
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	4798      	blx	r3
 800615a:	4603      	mov	r3, r0
 800615c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800615e:	e156      	b.n	800640e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	785b      	ldrb	r3, [r3, #1]
 8006164:	2b03      	cmp	r3, #3
 8006166:	d008      	beq.n	800617a <USBD_StdEPReq+0x9a>
 8006168:	2b03      	cmp	r3, #3
 800616a:	f300 8145 	bgt.w	80063f8 <USBD_StdEPReq+0x318>
 800616e:	2b00      	cmp	r3, #0
 8006170:	f000 809b 	beq.w	80062aa <USBD_StdEPReq+0x1ca>
 8006174:	2b01      	cmp	r3, #1
 8006176:	d03c      	beq.n	80061f2 <USBD_StdEPReq+0x112>
 8006178:	e13e      	b.n	80063f8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006180:	b2db      	uxtb	r3, r3
 8006182:	2b02      	cmp	r3, #2
 8006184:	d002      	beq.n	800618c <USBD_StdEPReq+0xac>
 8006186:	2b03      	cmp	r3, #3
 8006188:	d016      	beq.n	80061b8 <USBD_StdEPReq+0xd8>
 800618a:	e02c      	b.n	80061e6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800618c:	7bbb      	ldrb	r3, [r7, #14]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d00d      	beq.n	80061ae <USBD_StdEPReq+0xce>
 8006192:	7bbb      	ldrb	r3, [r7, #14]
 8006194:	2b80      	cmp	r3, #128	; 0x80
 8006196:	d00a      	beq.n	80061ae <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006198:	7bbb      	ldrb	r3, [r7, #14]
 800619a:	4619      	mov	r1, r3
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f001 f973 	bl	8007488 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80061a2:	2180      	movs	r1, #128	; 0x80
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f001 f96f 	bl	8007488 <USBD_LL_StallEP>
 80061aa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80061ac:	e020      	b.n	80061f0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80061ae:	6839      	ldr	r1, [r7, #0]
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f000 fc7a 	bl	8006aaa <USBD_CtlError>
              break;
 80061b6:	e01b      	b.n	80061f0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	885b      	ldrh	r3, [r3, #2]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d10e      	bne.n	80061de <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80061c0:	7bbb      	ldrb	r3, [r7, #14]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d00b      	beq.n	80061de <USBD_StdEPReq+0xfe>
 80061c6:	7bbb      	ldrb	r3, [r7, #14]
 80061c8:	2b80      	cmp	r3, #128	; 0x80
 80061ca:	d008      	beq.n	80061de <USBD_StdEPReq+0xfe>
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	88db      	ldrh	r3, [r3, #6]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d104      	bne.n	80061de <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80061d4:	7bbb      	ldrb	r3, [r7, #14]
 80061d6:	4619      	mov	r1, r3
 80061d8:	6878      	ldr	r0, [r7, #4]
 80061da:	f001 f955 	bl	8007488 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f000 fd2e 	bl	8006c40 <USBD_CtlSendStatus>

              break;
 80061e4:	e004      	b.n	80061f0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80061e6:	6839      	ldr	r1, [r7, #0]
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f000 fc5e 	bl	8006aaa <USBD_CtlError>
              break;
 80061ee:	bf00      	nop
          }
          break;
 80061f0:	e107      	b.n	8006402 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061f8:	b2db      	uxtb	r3, r3
 80061fa:	2b02      	cmp	r3, #2
 80061fc:	d002      	beq.n	8006204 <USBD_StdEPReq+0x124>
 80061fe:	2b03      	cmp	r3, #3
 8006200:	d016      	beq.n	8006230 <USBD_StdEPReq+0x150>
 8006202:	e04b      	b.n	800629c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006204:	7bbb      	ldrb	r3, [r7, #14]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d00d      	beq.n	8006226 <USBD_StdEPReq+0x146>
 800620a:	7bbb      	ldrb	r3, [r7, #14]
 800620c:	2b80      	cmp	r3, #128	; 0x80
 800620e:	d00a      	beq.n	8006226 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006210:	7bbb      	ldrb	r3, [r7, #14]
 8006212:	4619      	mov	r1, r3
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f001 f937 	bl	8007488 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800621a:	2180      	movs	r1, #128	; 0x80
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f001 f933 	bl	8007488 <USBD_LL_StallEP>
 8006222:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006224:	e040      	b.n	80062a8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006226:	6839      	ldr	r1, [r7, #0]
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f000 fc3e 	bl	8006aaa <USBD_CtlError>
              break;
 800622e:	e03b      	b.n	80062a8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	885b      	ldrh	r3, [r3, #2]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d136      	bne.n	80062a6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006238:	7bbb      	ldrb	r3, [r7, #14]
 800623a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800623e:	2b00      	cmp	r3, #0
 8006240:	d004      	beq.n	800624c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006242:	7bbb      	ldrb	r3, [r7, #14]
 8006244:	4619      	mov	r1, r3
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f001 f93d 	bl	80074c6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f000 fcf7 	bl	8006c40 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006252:	7bbb      	ldrb	r3, [r7, #14]
 8006254:	4619      	mov	r1, r3
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	f7ff fde2 	bl	8005e20 <USBD_CoreFindEP>
 800625c:	4603      	mov	r3, r0
 800625e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006260:	7b7b      	ldrb	r3, [r7, #13]
 8006262:	2bff      	cmp	r3, #255	; 0xff
 8006264:	d01f      	beq.n	80062a6 <USBD_StdEPReq+0x1c6>
 8006266:	7b7b      	ldrb	r3, [r7, #13]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d11c      	bne.n	80062a6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800626c:	7b7a      	ldrb	r2, [r7, #13]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006274:	7b7a      	ldrb	r2, [r7, #13]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	32ae      	adds	r2, #174	; 0xae
 800627a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800627e:	689b      	ldr	r3, [r3, #8]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d010      	beq.n	80062a6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006284:	7b7a      	ldrb	r2, [r7, #13]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	32ae      	adds	r2, #174	; 0xae
 800628a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800628e:	689b      	ldr	r3, [r3, #8]
 8006290:	6839      	ldr	r1, [r7, #0]
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	4798      	blx	r3
 8006296:	4603      	mov	r3, r0
 8006298:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800629a:	e004      	b.n	80062a6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800629c:	6839      	ldr	r1, [r7, #0]
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f000 fc03 	bl	8006aaa <USBD_CtlError>
              break;
 80062a4:	e000      	b.n	80062a8 <USBD_StdEPReq+0x1c8>
              break;
 80062a6:	bf00      	nop
          }
          break;
 80062a8:	e0ab      	b.n	8006402 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062b0:	b2db      	uxtb	r3, r3
 80062b2:	2b02      	cmp	r3, #2
 80062b4:	d002      	beq.n	80062bc <USBD_StdEPReq+0x1dc>
 80062b6:	2b03      	cmp	r3, #3
 80062b8:	d032      	beq.n	8006320 <USBD_StdEPReq+0x240>
 80062ba:	e097      	b.n	80063ec <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80062bc:	7bbb      	ldrb	r3, [r7, #14]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d007      	beq.n	80062d2 <USBD_StdEPReq+0x1f2>
 80062c2:	7bbb      	ldrb	r3, [r7, #14]
 80062c4:	2b80      	cmp	r3, #128	; 0x80
 80062c6:	d004      	beq.n	80062d2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80062c8:	6839      	ldr	r1, [r7, #0]
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f000 fbed 	bl	8006aaa <USBD_CtlError>
                break;
 80062d0:	e091      	b.n	80063f6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80062d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	da0b      	bge.n	80062f2 <USBD_StdEPReq+0x212>
 80062da:	7bbb      	ldrb	r3, [r7, #14]
 80062dc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80062e0:	4613      	mov	r3, r2
 80062e2:	009b      	lsls	r3, r3, #2
 80062e4:	4413      	add	r3, r2
 80062e6:	009b      	lsls	r3, r3, #2
 80062e8:	3310      	adds	r3, #16
 80062ea:	687a      	ldr	r2, [r7, #4]
 80062ec:	4413      	add	r3, r2
 80062ee:	3304      	adds	r3, #4
 80062f0:	e00b      	b.n	800630a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80062f2:	7bbb      	ldrb	r3, [r7, #14]
 80062f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80062f8:	4613      	mov	r3, r2
 80062fa:	009b      	lsls	r3, r3, #2
 80062fc:	4413      	add	r3, r2
 80062fe:	009b      	lsls	r3, r3, #2
 8006300:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006304:	687a      	ldr	r2, [r7, #4]
 8006306:	4413      	add	r3, r2
 8006308:	3304      	adds	r3, #4
 800630a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	2200      	movs	r2, #0
 8006310:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	2202      	movs	r2, #2
 8006316:	4619      	mov	r1, r3
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	f000 fc37 	bl	8006b8c <USBD_CtlSendData>
              break;
 800631e:	e06a      	b.n	80063f6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006320:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006324:	2b00      	cmp	r3, #0
 8006326:	da11      	bge.n	800634c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006328:	7bbb      	ldrb	r3, [r7, #14]
 800632a:	f003 020f 	and.w	r2, r3, #15
 800632e:	6879      	ldr	r1, [r7, #4]
 8006330:	4613      	mov	r3, r2
 8006332:	009b      	lsls	r3, r3, #2
 8006334:	4413      	add	r3, r2
 8006336:	009b      	lsls	r3, r3, #2
 8006338:	440b      	add	r3, r1
 800633a:	3324      	adds	r3, #36	; 0x24
 800633c:	881b      	ldrh	r3, [r3, #0]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d117      	bne.n	8006372 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006342:	6839      	ldr	r1, [r7, #0]
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f000 fbb0 	bl	8006aaa <USBD_CtlError>
                  break;
 800634a:	e054      	b.n	80063f6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800634c:	7bbb      	ldrb	r3, [r7, #14]
 800634e:	f003 020f 	and.w	r2, r3, #15
 8006352:	6879      	ldr	r1, [r7, #4]
 8006354:	4613      	mov	r3, r2
 8006356:	009b      	lsls	r3, r3, #2
 8006358:	4413      	add	r3, r2
 800635a:	009b      	lsls	r3, r3, #2
 800635c:	440b      	add	r3, r1
 800635e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006362:	881b      	ldrh	r3, [r3, #0]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d104      	bne.n	8006372 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006368:	6839      	ldr	r1, [r7, #0]
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f000 fb9d 	bl	8006aaa <USBD_CtlError>
                  break;
 8006370:	e041      	b.n	80063f6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006372:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006376:	2b00      	cmp	r3, #0
 8006378:	da0b      	bge.n	8006392 <USBD_StdEPReq+0x2b2>
 800637a:	7bbb      	ldrb	r3, [r7, #14]
 800637c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006380:	4613      	mov	r3, r2
 8006382:	009b      	lsls	r3, r3, #2
 8006384:	4413      	add	r3, r2
 8006386:	009b      	lsls	r3, r3, #2
 8006388:	3310      	adds	r3, #16
 800638a:	687a      	ldr	r2, [r7, #4]
 800638c:	4413      	add	r3, r2
 800638e:	3304      	adds	r3, #4
 8006390:	e00b      	b.n	80063aa <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006392:	7bbb      	ldrb	r3, [r7, #14]
 8006394:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006398:	4613      	mov	r3, r2
 800639a:	009b      	lsls	r3, r3, #2
 800639c:	4413      	add	r3, r2
 800639e:	009b      	lsls	r3, r3, #2
 80063a0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80063a4:	687a      	ldr	r2, [r7, #4]
 80063a6:	4413      	add	r3, r2
 80063a8:	3304      	adds	r3, #4
 80063aa:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80063ac:	7bbb      	ldrb	r3, [r7, #14]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d002      	beq.n	80063b8 <USBD_StdEPReq+0x2d8>
 80063b2:	7bbb      	ldrb	r3, [r7, #14]
 80063b4:	2b80      	cmp	r3, #128	; 0x80
 80063b6:	d103      	bne.n	80063c0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	2200      	movs	r2, #0
 80063bc:	601a      	str	r2, [r3, #0]
 80063be:	e00e      	b.n	80063de <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80063c0:	7bbb      	ldrb	r3, [r7, #14]
 80063c2:	4619      	mov	r1, r3
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	f001 f89d 	bl	8007504 <USBD_LL_IsStallEP>
 80063ca:	4603      	mov	r3, r0
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d003      	beq.n	80063d8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	2201      	movs	r2, #1
 80063d4:	601a      	str	r2, [r3, #0]
 80063d6:	e002      	b.n	80063de <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	2200      	movs	r2, #0
 80063dc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	2202      	movs	r2, #2
 80063e2:	4619      	mov	r1, r3
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f000 fbd1 	bl	8006b8c <USBD_CtlSendData>
              break;
 80063ea:	e004      	b.n	80063f6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80063ec:	6839      	ldr	r1, [r7, #0]
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f000 fb5b 	bl	8006aaa <USBD_CtlError>
              break;
 80063f4:	bf00      	nop
          }
          break;
 80063f6:	e004      	b.n	8006402 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80063f8:	6839      	ldr	r1, [r7, #0]
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f000 fb55 	bl	8006aaa <USBD_CtlError>
          break;
 8006400:	bf00      	nop
      }
      break;
 8006402:	e005      	b.n	8006410 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006404:	6839      	ldr	r1, [r7, #0]
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f000 fb4f 	bl	8006aaa <USBD_CtlError>
      break;
 800640c:	e000      	b.n	8006410 <USBD_StdEPReq+0x330>
      break;
 800640e:	bf00      	nop
  }

  return ret;
 8006410:	7bfb      	ldrb	r3, [r7, #15]
}
 8006412:	4618      	mov	r0, r3
 8006414:	3710      	adds	r7, #16
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}
	...

0800641c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b084      	sub	sp, #16
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
 8006424:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006426:	2300      	movs	r3, #0
 8006428:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800642a:	2300      	movs	r3, #0
 800642c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800642e:	2300      	movs	r3, #0
 8006430:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	885b      	ldrh	r3, [r3, #2]
 8006436:	0a1b      	lsrs	r3, r3, #8
 8006438:	b29b      	uxth	r3, r3
 800643a:	3b01      	subs	r3, #1
 800643c:	2b06      	cmp	r3, #6
 800643e:	f200 8128 	bhi.w	8006692 <USBD_GetDescriptor+0x276>
 8006442:	a201      	add	r2, pc, #4	; (adr r2, 8006448 <USBD_GetDescriptor+0x2c>)
 8006444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006448:	08006465 	.word	0x08006465
 800644c:	0800647d 	.word	0x0800647d
 8006450:	080064bd 	.word	0x080064bd
 8006454:	08006693 	.word	0x08006693
 8006458:	08006693 	.word	0x08006693
 800645c:	08006633 	.word	0x08006633
 8006460:	0800665f 	.word	0x0800665f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	687a      	ldr	r2, [r7, #4]
 800646e:	7c12      	ldrb	r2, [r2, #16]
 8006470:	f107 0108 	add.w	r1, r7, #8
 8006474:	4610      	mov	r0, r2
 8006476:	4798      	blx	r3
 8006478:	60f8      	str	r0, [r7, #12]
      break;
 800647a:	e112      	b.n	80066a2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	7c1b      	ldrb	r3, [r3, #16]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d10d      	bne.n	80064a0 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800648a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800648c:	f107 0208 	add.w	r2, r7, #8
 8006490:	4610      	mov	r0, r2
 8006492:	4798      	blx	r3
 8006494:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	3301      	adds	r3, #1
 800649a:	2202      	movs	r2, #2
 800649c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800649e:	e100      	b.n	80066a2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064a8:	f107 0208 	add.w	r2, r7, #8
 80064ac:	4610      	mov	r0, r2
 80064ae:	4798      	blx	r3
 80064b0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	3301      	adds	r3, #1
 80064b6:	2202      	movs	r2, #2
 80064b8:	701a      	strb	r2, [r3, #0]
      break;
 80064ba:	e0f2      	b.n	80066a2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	885b      	ldrh	r3, [r3, #2]
 80064c0:	b2db      	uxtb	r3, r3
 80064c2:	2b05      	cmp	r3, #5
 80064c4:	f200 80ac 	bhi.w	8006620 <USBD_GetDescriptor+0x204>
 80064c8:	a201      	add	r2, pc, #4	; (adr r2, 80064d0 <USBD_GetDescriptor+0xb4>)
 80064ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064ce:	bf00      	nop
 80064d0:	080064e9 	.word	0x080064e9
 80064d4:	0800651d 	.word	0x0800651d
 80064d8:	08006551 	.word	0x08006551
 80064dc:	08006585 	.word	0x08006585
 80064e0:	080065b9 	.word	0x080065b9
 80064e4:	080065ed 	.word	0x080065ed
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d00b      	beq.n	800650c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	687a      	ldr	r2, [r7, #4]
 80064fe:	7c12      	ldrb	r2, [r2, #16]
 8006500:	f107 0108 	add.w	r1, r7, #8
 8006504:	4610      	mov	r0, r2
 8006506:	4798      	blx	r3
 8006508:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800650a:	e091      	b.n	8006630 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800650c:	6839      	ldr	r1, [r7, #0]
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f000 facb 	bl	8006aaa <USBD_CtlError>
            err++;
 8006514:	7afb      	ldrb	r3, [r7, #11]
 8006516:	3301      	adds	r3, #1
 8006518:	72fb      	strb	r3, [r7, #11]
          break;
 800651a:	e089      	b.n	8006630 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006522:	689b      	ldr	r3, [r3, #8]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d00b      	beq.n	8006540 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800652e:	689b      	ldr	r3, [r3, #8]
 8006530:	687a      	ldr	r2, [r7, #4]
 8006532:	7c12      	ldrb	r2, [r2, #16]
 8006534:	f107 0108 	add.w	r1, r7, #8
 8006538:	4610      	mov	r0, r2
 800653a:	4798      	blx	r3
 800653c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800653e:	e077      	b.n	8006630 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006540:	6839      	ldr	r1, [r7, #0]
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f000 fab1 	bl	8006aaa <USBD_CtlError>
            err++;
 8006548:	7afb      	ldrb	r3, [r7, #11]
 800654a:	3301      	adds	r3, #1
 800654c:	72fb      	strb	r3, [r7, #11]
          break;
 800654e:	e06f      	b.n	8006630 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006556:	68db      	ldr	r3, [r3, #12]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d00b      	beq.n	8006574 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006562:	68db      	ldr	r3, [r3, #12]
 8006564:	687a      	ldr	r2, [r7, #4]
 8006566:	7c12      	ldrb	r2, [r2, #16]
 8006568:	f107 0108 	add.w	r1, r7, #8
 800656c:	4610      	mov	r0, r2
 800656e:	4798      	blx	r3
 8006570:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006572:	e05d      	b.n	8006630 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006574:	6839      	ldr	r1, [r7, #0]
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f000 fa97 	bl	8006aaa <USBD_CtlError>
            err++;
 800657c:	7afb      	ldrb	r3, [r7, #11]
 800657e:	3301      	adds	r3, #1
 8006580:	72fb      	strb	r3, [r7, #11]
          break;
 8006582:	e055      	b.n	8006630 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800658a:	691b      	ldr	r3, [r3, #16]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d00b      	beq.n	80065a8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006596:	691b      	ldr	r3, [r3, #16]
 8006598:	687a      	ldr	r2, [r7, #4]
 800659a:	7c12      	ldrb	r2, [r2, #16]
 800659c:	f107 0108 	add.w	r1, r7, #8
 80065a0:	4610      	mov	r0, r2
 80065a2:	4798      	blx	r3
 80065a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80065a6:	e043      	b.n	8006630 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80065a8:	6839      	ldr	r1, [r7, #0]
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f000 fa7d 	bl	8006aaa <USBD_CtlError>
            err++;
 80065b0:	7afb      	ldrb	r3, [r7, #11]
 80065b2:	3301      	adds	r3, #1
 80065b4:	72fb      	strb	r3, [r7, #11]
          break;
 80065b6:	e03b      	b.n	8006630 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065be:	695b      	ldr	r3, [r3, #20]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d00b      	beq.n	80065dc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065ca:	695b      	ldr	r3, [r3, #20]
 80065cc:	687a      	ldr	r2, [r7, #4]
 80065ce:	7c12      	ldrb	r2, [r2, #16]
 80065d0:	f107 0108 	add.w	r1, r7, #8
 80065d4:	4610      	mov	r0, r2
 80065d6:	4798      	blx	r3
 80065d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80065da:	e029      	b.n	8006630 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80065dc:	6839      	ldr	r1, [r7, #0]
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	f000 fa63 	bl	8006aaa <USBD_CtlError>
            err++;
 80065e4:	7afb      	ldrb	r3, [r7, #11]
 80065e6:	3301      	adds	r3, #1
 80065e8:	72fb      	strb	r3, [r7, #11]
          break;
 80065ea:	e021      	b.n	8006630 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065f2:	699b      	ldr	r3, [r3, #24]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d00b      	beq.n	8006610 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065fe:	699b      	ldr	r3, [r3, #24]
 8006600:	687a      	ldr	r2, [r7, #4]
 8006602:	7c12      	ldrb	r2, [r2, #16]
 8006604:	f107 0108 	add.w	r1, r7, #8
 8006608:	4610      	mov	r0, r2
 800660a:	4798      	blx	r3
 800660c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800660e:	e00f      	b.n	8006630 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006610:	6839      	ldr	r1, [r7, #0]
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f000 fa49 	bl	8006aaa <USBD_CtlError>
            err++;
 8006618:	7afb      	ldrb	r3, [r7, #11]
 800661a:	3301      	adds	r3, #1
 800661c:	72fb      	strb	r3, [r7, #11]
          break;
 800661e:	e007      	b.n	8006630 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006620:	6839      	ldr	r1, [r7, #0]
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f000 fa41 	bl	8006aaa <USBD_CtlError>
          err++;
 8006628:	7afb      	ldrb	r3, [r7, #11]
 800662a:	3301      	adds	r3, #1
 800662c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800662e:	bf00      	nop
      }
      break;
 8006630:	e037      	b.n	80066a2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	7c1b      	ldrb	r3, [r3, #16]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d109      	bne.n	800664e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006640:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006642:	f107 0208 	add.w	r2, r7, #8
 8006646:	4610      	mov	r0, r2
 8006648:	4798      	blx	r3
 800664a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800664c:	e029      	b.n	80066a2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800664e:	6839      	ldr	r1, [r7, #0]
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f000 fa2a 	bl	8006aaa <USBD_CtlError>
        err++;
 8006656:	7afb      	ldrb	r3, [r7, #11]
 8006658:	3301      	adds	r3, #1
 800665a:	72fb      	strb	r3, [r7, #11]
      break;
 800665c:	e021      	b.n	80066a2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	7c1b      	ldrb	r3, [r3, #16]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d10d      	bne.n	8006682 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800666c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800666e:	f107 0208 	add.w	r2, r7, #8
 8006672:	4610      	mov	r0, r2
 8006674:	4798      	blx	r3
 8006676:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	3301      	adds	r3, #1
 800667c:	2207      	movs	r2, #7
 800667e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006680:	e00f      	b.n	80066a2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006682:	6839      	ldr	r1, [r7, #0]
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f000 fa10 	bl	8006aaa <USBD_CtlError>
        err++;
 800668a:	7afb      	ldrb	r3, [r7, #11]
 800668c:	3301      	adds	r3, #1
 800668e:	72fb      	strb	r3, [r7, #11]
      break;
 8006690:	e007      	b.n	80066a2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006692:	6839      	ldr	r1, [r7, #0]
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	f000 fa08 	bl	8006aaa <USBD_CtlError>
      err++;
 800669a:	7afb      	ldrb	r3, [r7, #11]
 800669c:	3301      	adds	r3, #1
 800669e:	72fb      	strb	r3, [r7, #11]
      break;
 80066a0:	bf00      	nop
  }

  if (err != 0U)
 80066a2:	7afb      	ldrb	r3, [r7, #11]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d11e      	bne.n	80066e6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	88db      	ldrh	r3, [r3, #6]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d016      	beq.n	80066de <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80066b0:	893b      	ldrh	r3, [r7, #8]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d00e      	beq.n	80066d4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	88da      	ldrh	r2, [r3, #6]
 80066ba:	893b      	ldrh	r3, [r7, #8]
 80066bc:	4293      	cmp	r3, r2
 80066be:	bf28      	it	cs
 80066c0:	4613      	movcs	r3, r2
 80066c2:	b29b      	uxth	r3, r3
 80066c4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80066c6:	893b      	ldrh	r3, [r7, #8]
 80066c8:	461a      	mov	r2, r3
 80066ca:	68f9      	ldr	r1, [r7, #12]
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f000 fa5d 	bl	8006b8c <USBD_CtlSendData>
 80066d2:	e009      	b.n	80066e8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80066d4:	6839      	ldr	r1, [r7, #0]
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f000 f9e7 	bl	8006aaa <USBD_CtlError>
 80066dc:	e004      	b.n	80066e8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f000 faae 	bl	8006c40 <USBD_CtlSendStatus>
 80066e4:	e000      	b.n	80066e8 <USBD_GetDescriptor+0x2cc>
    return;
 80066e6:	bf00      	nop
  }
}
 80066e8:	3710      	adds	r7, #16
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}
 80066ee:	bf00      	nop

080066f0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b084      	sub	sp, #16
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	889b      	ldrh	r3, [r3, #4]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d131      	bne.n	8006766 <USBD_SetAddress+0x76>
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	88db      	ldrh	r3, [r3, #6]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d12d      	bne.n	8006766 <USBD_SetAddress+0x76>
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	885b      	ldrh	r3, [r3, #2]
 800670e:	2b7f      	cmp	r3, #127	; 0x7f
 8006710:	d829      	bhi.n	8006766 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	885b      	ldrh	r3, [r3, #2]
 8006716:	b2db      	uxtb	r3, r3
 8006718:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800671c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006724:	b2db      	uxtb	r3, r3
 8006726:	2b03      	cmp	r3, #3
 8006728:	d104      	bne.n	8006734 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800672a:	6839      	ldr	r1, [r7, #0]
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f000 f9bc 	bl	8006aaa <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006732:	e01d      	b.n	8006770 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	7bfa      	ldrb	r2, [r7, #15]
 8006738:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800673c:	7bfb      	ldrb	r3, [r7, #15]
 800673e:	4619      	mov	r1, r3
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f000 ff0b 	bl	800755c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f000 fa7a 	bl	8006c40 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800674c:	7bfb      	ldrb	r3, [r7, #15]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d004      	beq.n	800675c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2202      	movs	r2, #2
 8006756:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800675a:	e009      	b.n	8006770 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2201      	movs	r2, #1
 8006760:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006764:	e004      	b.n	8006770 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006766:	6839      	ldr	r1, [r7, #0]
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f000 f99e 	bl	8006aaa <USBD_CtlError>
  }
}
 800676e:	bf00      	nop
 8006770:	bf00      	nop
 8006772:	3710      	adds	r7, #16
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}

08006778 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b084      	sub	sp, #16
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
 8006780:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006782:	2300      	movs	r3, #0
 8006784:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	885b      	ldrh	r3, [r3, #2]
 800678a:	b2da      	uxtb	r2, r3
 800678c:	4b4e      	ldr	r3, [pc, #312]	; (80068c8 <USBD_SetConfig+0x150>)
 800678e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006790:	4b4d      	ldr	r3, [pc, #308]	; (80068c8 <USBD_SetConfig+0x150>)
 8006792:	781b      	ldrb	r3, [r3, #0]
 8006794:	2b01      	cmp	r3, #1
 8006796:	d905      	bls.n	80067a4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006798:	6839      	ldr	r1, [r7, #0]
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f000 f985 	bl	8006aaa <USBD_CtlError>
    return USBD_FAIL;
 80067a0:	2303      	movs	r3, #3
 80067a2:	e08c      	b.n	80068be <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067aa:	b2db      	uxtb	r3, r3
 80067ac:	2b02      	cmp	r3, #2
 80067ae:	d002      	beq.n	80067b6 <USBD_SetConfig+0x3e>
 80067b0:	2b03      	cmp	r3, #3
 80067b2:	d029      	beq.n	8006808 <USBD_SetConfig+0x90>
 80067b4:	e075      	b.n	80068a2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80067b6:	4b44      	ldr	r3, [pc, #272]	; (80068c8 <USBD_SetConfig+0x150>)
 80067b8:	781b      	ldrb	r3, [r3, #0]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d020      	beq.n	8006800 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80067be:	4b42      	ldr	r3, [pc, #264]	; (80068c8 <USBD_SetConfig+0x150>)
 80067c0:	781b      	ldrb	r3, [r3, #0]
 80067c2:	461a      	mov	r2, r3
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80067c8:	4b3f      	ldr	r3, [pc, #252]	; (80068c8 <USBD_SetConfig+0x150>)
 80067ca:	781b      	ldrb	r3, [r3, #0]
 80067cc:	4619      	mov	r1, r3
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f7fe ffe1 	bl	8005796 <USBD_SetClassConfig>
 80067d4:	4603      	mov	r3, r0
 80067d6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80067d8:	7bfb      	ldrb	r3, [r7, #15]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d008      	beq.n	80067f0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80067de:	6839      	ldr	r1, [r7, #0]
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f000 f962 	bl	8006aaa <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2202      	movs	r2, #2
 80067ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80067ee:	e065      	b.n	80068bc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f000 fa25 	bl	8006c40 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2203      	movs	r2, #3
 80067fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80067fe:	e05d      	b.n	80068bc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f000 fa1d 	bl	8006c40 <USBD_CtlSendStatus>
      break;
 8006806:	e059      	b.n	80068bc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006808:	4b2f      	ldr	r3, [pc, #188]	; (80068c8 <USBD_SetConfig+0x150>)
 800680a:	781b      	ldrb	r3, [r3, #0]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d112      	bne.n	8006836 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2202      	movs	r2, #2
 8006814:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006818:	4b2b      	ldr	r3, [pc, #172]	; (80068c8 <USBD_SetConfig+0x150>)
 800681a:	781b      	ldrb	r3, [r3, #0]
 800681c:	461a      	mov	r2, r3
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006822:	4b29      	ldr	r3, [pc, #164]	; (80068c8 <USBD_SetConfig+0x150>)
 8006824:	781b      	ldrb	r3, [r3, #0]
 8006826:	4619      	mov	r1, r3
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f7fe ffd0 	bl	80057ce <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f000 fa06 	bl	8006c40 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006834:	e042      	b.n	80068bc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006836:	4b24      	ldr	r3, [pc, #144]	; (80068c8 <USBD_SetConfig+0x150>)
 8006838:	781b      	ldrb	r3, [r3, #0]
 800683a:	461a      	mov	r2, r3
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	429a      	cmp	r2, r3
 8006842:	d02a      	beq.n	800689a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	b2db      	uxtb	r3, r3
 800684a:	4619      	mov	r1, r3
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f7fe ffbe 	bl	80057ce <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006852:	4b1d      	ldr	r3, [pc, #116]	; (80068c8 <USBD_SetConfig+0x150>)
 8006854:	781b      	ldrb	r3, [r3, #0]
 8006856:	461a      	mov	r2, r3
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800685c:	4b1a      	ldr	r3, [pc, #104]	; (80068c8 <USBD_SetConfig+0x150>)
 800685e:	781b      	ldrb	r3, [r3, #0]
 8006860:	4619      	mov	r1, r3
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f7fe ff97 	bl	8005796 <USBD_SetClassConfig>
 8006868:	4603      	mov	r3, r0
 800686a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800686c:	7bfb      	ldrb	r3, [r7, #15]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d00f      	beq.n	8006892 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006872:	6839      	ldr	r1, [r7, #0]
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	f000 f918 	bl	8006aaa <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	685b      	ldr	r3, [r3, #4]
 800687e:	b2db      	uxtb	r3, r3
 8006880:	4619      	mov	r1, r3
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f7fe ffa3 	bl	80057ce <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2202      	movs	r2, #2
 800688c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006890:	e014      	b.n	80068bc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f000 f9d4 	bl	8006c40 <USBD_CtlSendStatus>
      break;
 8006898:	e010      	b.n	80068bc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f000 f9d0 	bl	8006c40 <USBD_CtlSendStatus>
      break;
 80068a0:	e00c      	b.n	80068bc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80068a2:	6839      	ldr	r1, [r7, #0]
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f000 f900 	bl	8006aaa <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80068aa:	4b07      	ldr	r3, [pc, #28]	; (80068c8 <USBD_SetConfig+0x150>)
 80068ac:	781b      	ldrb	r3, [r3, #0]
 80068ae:	4619      	mov	r1, r3
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f7fe ff8c 	bl	80057ce <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80068b6:	2303      	movs	r3, #3
 80068b8:	73fb      	strb	r3, [r7, #15]
      break;
 80068ba:	bf00      	nop
  }

  return ret;
 80068bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80068be:	4618      	mov	r0, r3
 80068c0:	3710      	adds	r7, #16
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}
 80068c6:	bf00      	nop
 80068c8:	200001b8 	.word	0x200001b8

080068cc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b082      	sub	sp, #8
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
 80068d4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	88db      	ldrh	r3, [r3, #6]
 80068da:	2b01      	cmp	r3, #1
 80068dc:	d004      	beq.n	80068e8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80068de:	6839      	ldr	r1, [r7, #0]
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f000 f8e2 	bl	8006aaa <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80068e6:	e023      	b.n	8006930 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068ee:	b2db      	uxtb	r3, r3
 80068f0:	2b02      	cmp	r3, #2
 80068f2:	dc02      	bgt.n	80068fa <USBD_GetConfig+0x2e>
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	dc03      	bgt.n	8006900 <USBD_GetConfig+0x34>
 80068f8:	e015      	b.n	8006926 <USBD_GetConfig+0x5a>
 80068fa:	2b03      	cmp	r3, #3
 80068fc:	d00b      	beq.n	8006916 <USBD_GetConfig+0x4a>
 80068fe:	e012      	b.n	8006926 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2200      	movs	r2, #0
 8006904:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	3308      	adds	r3, #8
 800690a:	2201      	movs	r2, #1
 800690c:	4619      	mov	r1, r3
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f000 f93c 	bl	8006b8c <USBD_CtlSendData>
        break;
 8006914:	e00c      	b.n	8006930 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	3304      	adds	r3, #4
 800691a:	2201      	movs	r2, #1
 800691c:	4619      	mov	r1, r3
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f000 f934 	bl	8006b8c <USBD_CtlSendData>
        break;
 8006924:	e004      	b.n	8006930 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006926:	6839      	ldr	r1, [r7, #0]
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f000 f8be 	bl	8006aaa <USBD_CtlError>
        break;
 800692e:	bf00      	nop
}
 8006930:	bf00      	nop
 8006932:	3708      	adds	r7, #8
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}

08006938 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b082      	sub	sp, #8
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
 8006940:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006948:	b2db      	uxtb	r3, r3
 800694a:	3b01      	subs	r3, #1
 800694c:	2b02      	cmp	r3, #2
 800694e:	d81e      	bhi.n	800698e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	88db      	ldrh	r3, [r3, #6]
 8006954:	2b02      	cmp	r3, #2
 8006956:	d004      	beq.n	8006962 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006958:	6839      	ldr	r1, [r7, #0]
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f000 f8a5 	bl	8006aaa <USBD_CtlError>
        break;
 8006960:	e01a      	b.n	8006998 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2201      	movs	r2, #1
 8006966:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800696e:	2b00      	cmp	r3, #0
 8006970:	d005      	beq.n	800697e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	68db      	ldr	r3, [r3, #12]
 8006976:	f043 0202 	orr.w	r2, r3, #2
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	330c      	adds	r3, #12
 8006982:	2202      	movs	r2, #2
 8006984:	4619      	mov	r1, r3
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f000 f900 	bl	8006b8c <USBD_CtlSendData>
      break;
 800698c:	e004      	b.n	8006998 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800698e:	6839      	ldr	r1, [r7, #0]
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f000 f88a 	bl	8006aaa <USBD_CtlError>
      break;
 8006996:	bf00      	nop
  }
}
 8006998:	bf00      	nop
 800699a:	3708      	adds	r7, #8
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}

080069a0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b082      	sub	sp, #8
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
 80069a8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	885b      	ldrh	r3, [r3, #2]
 80069ae:	2b01      	cmp	r3, #1
 80069b0:	d107      	bne.n	80069c2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2201      	movs	r2, #1
 80069b6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f000 f940 	bl	8006c40 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80069c0:	e013      	b.n	80069ea <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	885b      	ldrh	r3, [r3, #2]
 80069c6:	2b02      	cmp	r3, #2
 80069c8:	d10b      	bne.n	80069e2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	889b      	ldrh	r3, [r3, #4]
 80069ce:	0a1b      	lsrs	r3, r3, #8
 80069d0:	b29b      	uxth	r3, r3
 80069d2:	b2da      	uxtb	r2, r3
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f000 f930 	bl	8006c40 <USBD_CtlSendStatus>
}
 80069e0:	e003      	b.n	80069ea <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80069e2:	6839      	ldr	r1, [r7, #0]
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f000 f860 	bl	8006aaa <USBD_CtlError>
}
 80069ea:	bf00      	nop
 80069ec:	3708      	adds	r7, #8
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}

080069f2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069f2:	b580      	push	{r7, lr}
 80069f4:	b082      	sub	sp, #8
 80069f6:	af00      	add	r7, sp, #0
 80069f8:	6078      	str	r0, [r7, #4]
 80069fa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a02:	b2db      	uxtb	r3, r3
 8006a04:	3b01      	subs	r3, #1
 8006a06:	2b02      	cmp	r3, #2
 8006a08:	d80b      	bhi.n	8006a22 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	885b      	ldrh	r3, [r3, #2]
 8006a0e:	2b01      	cmp	r3, #1
 8006a10:	d10c      	bne.n	8006a2c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2200      	movs	r2, #0
 8006a16:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f000 f910 	bl	8006c40 <USBD_CtlSendStatus>
      }
      break;
 8006a20:	e004      	b.n	8006a2c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006a22:	6839      	ldr	r1, [r7, #0]
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f000 f840 	bl	8006aaa <USBD_CtlError>
      break;
 8006a2a:	e000      	b.n	8006a2e <USBD_ClrFeature+0x3c>
      break;
 8006a2c:	bf00      	nop
  }
}
 8006a2e:	bf00      	nop
 8006a30:	3708      	adds	r7, #8
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}

08006a36 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006a36:	b580      	push	{r7, lr}
 8006a38:	b084      	sub	sp, #16
 8006a3a:	af00      	add	r7, sp, #0
 8006a3c:	6078      	str	r0, [r7, #4]
 8006a3e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	781a      	ldrb	r2, [r3, #0]
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	3301      	adds	r3, #1
 8006a50:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	781a      	ldrb	r2, [r3, #0]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	3301      	adds	r3, #1
 8006a5e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006a60:	68f8      	ldr	r0, [r7, #12]
 8006a62:	f7ff fa41 	bl	8005ee8 <SWAPBYTE>
 8006a66:	4603      	mov	r3, r0
 8006a68:	461a      	mov	r2, r3
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	3301      	adds	r3, #1
 8006a72:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	3301      	adds	r3, #1
 8006a78:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006a7a:	68f8      	ldr	r0, [r7, #12]
 8006a7c:	f7ff fa34 	bl	8005ee8 <SWAPBYTE>
 8006a80:	4603      	mov	r3, r0
 8006a82:	461a      	mov	r2, r3
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	3301      	adds	r3, #1
 8006a8c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	3301      	adds	r3, #1
 8006a92:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006a94:	68f8      	ldr	r0, [r7, #12]
 8006a96:	f7ff fa27 	bl	8005ee8 <SWAPBYTE>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	461a      	mov	r2, r3
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	80da      	strh	r2, [r3, #6]
}
 8006aa2:	bf00      	nop
 8006aa4:	3710      	adds	r7, #16
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}

08006aaa <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006aaa:	b580      	push	{r7, lr}
 8006aac:	b082      	sub	sp, #8
 8006aae:	af00      	add	r7, sp, #0
 8006ab0:	6078      	str	r0, [r7, #4]
 8006ab2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006ab4:	2180      	movs	r1, #128	; 0x80
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f000 fce6 	bl	8007488 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006abc:	2100      	movs	r1, #0
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f000 fce2 	bl	8007488 <USBD_LL_StallEP>
}
 8006ac4:	bf00      	nop
 8006ac6:	3708      	adds	r7, #8
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bd80      	pop	{r7, pc}

08006acc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b086      	sub	sp, #24
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	60f8      	str	r0, [r7, #12]
 8006ad4:	60b9      	str	r1, [r7, #8]
 8006ad6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006ad8:	2300      	movs	r3, #0
 8006ada:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d036      	beq.n	8006b50 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006ae6:	6938      	ldr	r0, [r7, #16]
 8006ae8:	f000 f836 	bl	8006b58 <USBD_GetLen>
 8006aec:	4603      	mov	r3, r0
 8006aee:	3301      	adds	r3, #1
 8006af0:	b29b      	uxth	r3, r3
 8006af2:	005b      	lsls	r3, r3, #1
 8006af4:	b29a      	uxth	r2, r3
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006afa:	7dfb      	ldrb	r3, [r7, #23]
 8006afc:	68ba      	ldr	r2, [r7, #8]
 8006afe:	4413      	add	r3, r2
 8006b00:	687a      	ldr	r2, [r7, #4]
 8006b02:	7812      	ldrb	r2, [r2, #0]
 8006b04:	701a      	strb	r2, [r3, #0]
  idx++;
 8006b06:	7dfb      	ldrb	r3, [r7, #23]
 8006b08:	3301      	adds	r3, #1
 8006b0a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006b0c:	7dfb      	ldrb	r3, [r7, #23]
 8006b0e:	68ba      	ldr	r2, [r7, #8]
 8006b10:	4413      	add	r3, r2
 8006b12:	2203      	movs	r2, #3
 8006b14:	701a      	strb	r2, [r3, #0]
  idx++;
 8006b16:	7dfb      	ldrb	r3, [r7, #23]
 8006b18:	3301      	adds	r3, #1
 8006b1a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006b1c:	e013      	b.n	8006b46 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006b1e:	7dfb      	ldrb	r3, [r7, #23]
 8006b20:	68ba      	ldr	r2, [r7, #8]
 8006b22:	4413      	add	r3, r2
 8006b24:	693a      	ldr	r2, [r7, #16]
 8006b26:	7812      	ldrb	r2, [r2, #0]
 8006b28:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006b2a:	693b      	ldr	r3, [r7, #16]
 8006b2c:	3301      	adds	r3, #1
 8006b2e:	613b      	str	r3, [r7, #16]
    idx++;
 8006b30:	7dfb      	ldrb	r3, [r7, #23]
 8006b32:	3301      	adds	r3, #1
 8006b34:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006b36:	7dfb      	ldrb	r3, [r7, #23]
 8006b38:	68ba      	ldr	r2, [r7, #8]
 8006b3a:	4413      	add	r3, r2
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	701a      	strb	r2, [r3, #0]
    idx++;
 8006b40:	7dfb      	ldrb	r3, [r7, #23]
 8006b42:	3301      	adds	r3, #1
 8006b44:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	781b      	ldrb	r3, [r3, #0]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d1e7      	bne.n	8006b1e <USBD_GetString+0x52>
 8006b4e:	e000      	b.n	8006b52 <USBD_GetString+0x86>
    return;
 8006b50:	bf00      	nop
  }
}
 8006b52:	3718      	adds	r7, #24
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bd80      	pop	{r7, pc}

08006b58 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b085      	sub	sp, #20
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006b60:	2300      	movs	r3, #0
 8006b62:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006b68:	e005      	b.n	8006b76 <USBD_GetLen+0x1e>
  {
    len++;
 8006b6a:	7bfb      	ldrb	r3, [r7, #15]
 8006b6c:	3301      	adds	r3, #1
 8006b6e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	3301      	adds	r3, #1
 8006b74:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	781b      	ldrb	r3, [r3, #0]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d1f5      	bne.n	8006b6a <USBD_GetLen+0x12>
  }

  return len;
 8006b7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	3714      	adds	r7, #20
 8006b84:	46bd      	mov	sp, r7
 8006b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8a:	4770      	bx	lr

08006b8c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b084      	sub	sp, #16
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	60f8      	str	r0, [r7, #12]
 8006b94:	60b9      	str	r1, [r7, #8]
 8006b96:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	2202      	movs	r2, #2
 8006b9c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	687a      	ldr	r2, [r7, #4]
 8006ba4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	687a      	ldr	r2, [r7, #4]
 8006baa:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	68ba      	ldr	r2, [r7, #8]
 8006bb0:	2100      	movs	r1, #0
 8006bb2:	68f8      	ldr	r0, [r7, #12]
 8006bb4:	f000 fcf1 	bl	800759a <USBD_LL_Transmit>

  return USBD_OK;
 8006bb8:	2300      	movs	r3, #0
}
 8006bba:	4618      	mov	r0, r3
 8006bbc:	3710      	adds	r7, #16
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}

08006bc2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006bc2:	b580      	push	{r7, lr}
 8006bc4:	b084      	sub	sp, #16
 8006bc6:	af00      	add	r7, sp, #0
 8006bc8:	60f8      	str	r0, [r7, #12]
 8006bca:	60b9      	str	r1, [r7, #8]
 8006bcc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	68ba      	ldr	r2, [r7, #8]
 8006bd2:	2100      	movs	r1, #0
 8006bd4:	68f8      	ldr	r0, [r7, #12]
 8006bd6:	f000 fce0 	bl	800759a <USBD_LL_Transmit>

  return USBD_OK;
 8006bda:	2300      	movs	r3, #0
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	3710      	adds	r7, #16
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}

08006be4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b084      	sub	sp, #16
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	60f8      	str	r0, [r7, #12]
 8006bec:	60b9      	str	r1, [r7, #8]
 8006bee:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	2203      	movs	r2, #3
 8006bf4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	687a      	ldr	r2, [r7, #4]
 8006bfc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	687a      	ldr	r2, [r7, #4]
 8006c04:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	68ba      	ldr	r2, [r7, #8]
 8006c0c:	2100      	movs	r1, #0
 8006c0e:	68f8      	ldr	r0, [r7, #12]
 8006c10:	f000 fce4 	bl	80075dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006c14:	2300      	movs	r3, #0
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3710      	adds	r7, #16
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}

08006c1e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006c1e:	b580      	push	{r7, lr}
 8006c20:	b084      	sub	sp, #16
 8006c22:	af00      	add	r7, sp, #0
 8006c24:	60f8      	str	r0, [r7, #12]
 8006c26:	60b9      	str	r1, [r7, #8]
 8006c28:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	68ba      	ldr	r2, [r7, #8]
 8006c2e:	2100      	movs	r1, #0
 8006c30:	68f8      	ldr	r0, [r7, #12]
 8006c32:	f000 fcd3 	bl	80075dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006c36:	2300      	movs	r3, #0
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	3710      	adds	r7, #16
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}

08006c40 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b082      	sub	sp, #8
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2204      	movs	r2, #4
 8006c4c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006c50:	2300      	movs	r3, #0
 8006c52:	2200      	movs	r2, #0
 8006c54:	2100      	movs	r1, #0
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f000 fc9f 	bl	800759a <USBD_LL_Transmit>

  return USBD_OK;
 8006c5c:	2300      	movs	r3, #0
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	3708      	adds	r7, #8
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}

08006c66 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006c66:	b580      	push	{r7, lr}
 8006c68:	b082      	sub	sp, #8
 8006c6a:	af00      	add	r7, sp, #0
 8006c6c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2205      	movs	r2, #5
 8006c72:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006c76:	2300      	movs	r3, #0
 8006c78:	2200      	movs	r2, #0
 8006c7a:	2100      	movs	r1, #0
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	f000 fcad 	bl	80075dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006c82:	2300      	movs	r3, #0
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	3708      	adds	r7, #8
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd80      	pop	{r7, pc}

08006c8c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006c90:	2200      	movs	r2, #0
 8006c92:	4912      	ldr	r1, [pc, #72]	; (8006cdc <MX_USB_DEVICE_Init+0x50>)
 8006c94:	4812      	ldr	r0, [pc, #72]	; (8006ce0 <MX_USB_DEVICE_Init+0x54>)
 8006c96:	f7fe fd01 	bl	800569c <USBD_Init>
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d001      	beq.n	8006ca4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006ca0:	f7f9 fdca 	bl	8000838 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006ca4:	490f      	ldr	r1, [pc, #60]	; (8006ce4 <MX_USB_DEVICE_Init+0x58>)
 8006ca6:	480e      	ldr	r0, [pc, #56]	; (8006ce0 <MX_USB_DEVICE_Init+0x54>)
 8006ca8:	f7fe fd28 	bl	80056fc <USBD_RegisterClass>
 8006cac:	4603      	mov	r3, r0
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d001      	beq.n	8006cb6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006cb2:	f7f9 fdc1 	bl	8000838 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006cb6:	490c      	ldr	r1, [pc, #48]	; (8006ce8 <MX_USB_DEVICE_Init+0x5c>)
 8006cb8:	4809      	ldr	r0, [pc, #36]	; (8006ce0 <MX_USB_DEVICE_Init+0x54>)
 8006cba:	f7fe fc1f 	bl	80054fc <USBD_CDC_RegisterInterface>
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d001      	beq.n	8006cc8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006cc4:	f7f9 fdb8 	bl	8000838 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006cc8:	4805      	ldr	r0, [pc, #20]	; (8006ce0 <MX_USB_DEVICE_Init+0x54>)
 8006cca:	f7fe fd4d 	bl	8005768 <USBD_Start>
 8006cce:	4603      	mov	r3, r0
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d001      	beq.n	8006cd8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006cd4:	f7f9 fdb0 	bl	8000838 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006cd8:	bf00      	nop
 8006cda:	bd80      	pop	{r7, pc}
 8006cdc:	200000ac 	.word	0x200000ac
 8006ce0:	200001bc 	.word	0x200001bc
 8006ce4:	20000018 	.word	0x20000018
 8006ce8:	20000098 	.word	0x20000098

08006cec <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	4905      	ldr	r1, [pc, #20]	; (8006d08 <CDC_Init_FS+0x1c>)
 8006cf4:	4805      	ldr	r0, [pc, #20]	; (8006d0c <CDC_Init_FS+0x20>)
 8006cf6:	f7fe fc1b 	bl	8005530 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006cfa:	4905      	ldr	r1, [pc, #20]	; (8006d10 <CDC_Init_FS+0x24>)
 8006cfc:	4803      	ldr	r0, [pc, #12]	; (8006d0c <CDC_Init_FS+0x20>)
 8006cfe:	f7fe fc39 	bl	8005574 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006d02:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	bd80      	pop	{r7, pc}
 8006d08:	20000c98 	.word	0x20000c98
 8006d0c:	200001bc 	.word	0x200001bc
 8006d10:	20000498 	.word	0x20000498

08006d14 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006d14:	b480      	push	{r7}
 8006d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006d18:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d22:	4770      	bx	lr

08006d24 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006d24:	b480      	push	{r7}
 8006d26:	b083      	sub	sp, #12
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	6039      	str	r1, [r7, #0]
 8006d2e:	71fb      	strb	r3, [r7, #7]
 8006d30:	4613      	mov	r3, r2
 8006d32:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006d34:	79fb      	ldrb	r3, [r7, #7]
 8006d36:	2b23      	cmp	r3, #35	; 0x23
 8006d38:	d84a      	bhi.n	8006dd0 <CDC_Control_FS+0xac>
 8006d3a:	a201      	add	r2, pc, #4	; (adr r2, 8006d40 <CDC_Control_FS+0x1c>)
 8006d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d40:	08006dd1 	.word	0x08006dd1
 8006d44:	08006dd1 	.word	0x08006dd1
 8006d48:	08006dd1 	.word	0x08006dd1
 8006d4c:	08006dd1 	.word	0x08006dd1
 8006d50:	08006dd1 	.word	0x08006dd1
 8006d54:	08006dd1 	.word	0x08006dd1
 8006d58:	08006dd1 	.word	0x08006dd1
 8006d5c:	08006dd1 	.word	0x08006dd1
 8006d60:	08006dd1 	.word	0x08006dd1
 8006d64:	08006dd1 	.word	0x08006dd1
 8006d68:	08006dd1 	.word	0x08006dd1
 8006d6c:	08006dd1 	.word	0x08006dd1
 8006d70:	08006dd1 	.word	0x08006dd1
 8006d74:	08006dd1 	.word	0x08006dd1
 8006d78:	08006dd1 	.word	0x08006dd1
 8006d7c:	08006dd1 	.word	0x08006dd1
 8006d80:	08006dd1 	.word	0x08006dd1
 8006d84:	08006dd1 	.word	0x08006dd1
 8006d88:	08006dd1 	.word	0x08006dd1
 8006d8c:	08006dd1 	.word	0x08006dd1
 8006d90:	08006dd1 	.word	0x08006dd1
 8006d94:	08006dd1 	.word	0x08006dd1
 8006d98:	08006dd1 	.word	0x08006dd1
 8006d9c:	08006dd1 	.word	0x08006dd1
 8006da0:	08006dd1 	.word	0x08006dd1
 8006da4:	08006dd1 	.word	0x08006dd1
 8006da8:	08006dd1 	.word	0x08006dd1
 8006dac:	08006dd1 	.word	0x08006dd1
 8006db0:	08006dd1 	.word	0x08006dd1
 8006db4:	08006dd1 	.word	0x08006dd1
 8006db8:	08006dd1 	.word	0x08006dd1
 8006dbc:	08006dd1 	.word	0x08006dd1
 8006dc0:	08006dd1 	.word	0x08006dd1
 8006dc4:	08006dd1 	.word	0x08006dd1
 8006dc8:	08006dd1 	.word	0x08006dd1
 8006dcc:	08006dd1 	.word	0x08006dd1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006dd0:	bf00      	nop
  }

  return (USBD_OK);
 8006dd2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	370c      	adds	r7, #12
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dde:	4770      	bx	lr

08006de0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b082      	sub	sp, #8
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
 8006de8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006dea:	6879      	ldr	r1, [r7, #4]
 8006dec:	4808      	ldr	r0, [pc, #32]	; (8006e10 <CDC_Receive_FS+0x30>)
 8006dee:	f7fe fbc1 	bl	8005574 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006df2:	4807      	ldr	r0, [pc, #28]	; (8006e10 <CDC_Receive_FS+0x30>)
 8006df4:	f7fe fc1c 	bl	8005630 <USBD_CDC_ReceivePacket>
  CDC_Transmit_FS(Buf,*Len);
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	b29b      	uxth	r3, r3
 8006dfe:	4619      	mov	r1, r3
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f000 f807 	bl	8006e14 <CDC_Transmit_FS>
  return (USBD_OK);
 8006e06:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	3708      	adds	r7, #8
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bd80      	pop	{r7, pc}
 8006e10:	200001bc 	.word	0x200001bc

08006e14 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b084      	sub	sp, #16
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
 8006e1c:	460b      	mov	r3, r1
 8006e1e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006e20:	2300      	movs	r3, #0
 8006e22:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006e24:	4b0d      	ldr	r3, [pc, #52]	; (8006e5c <CDC_Transmit_FS+0x48>)
 8006e26:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e2a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d001      	beq.n	8006e3a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8006e36:	2301      	movs	r3, #1
 8006e38:	e00b      	b.n	8006e52 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006e3a:	887b      	ldrh	r3, [r7, #2]
 8006e3c:	461a      	mov	r2, r3
 8006e3e:	6879      	ldr	r1, [r7, #4]
 8006e40:	4806      	ldr	r0, [pc, #24]	; (8006e5c <CDC_Transmit_FS+0x48>)
 8006e42:	f7fe fb75 	bl	8005530 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006e46:	4805      	ldr	r0, [pc, #20]	; (8006e5c <CDC_Transmit_FS+0x48>)
 8006e48:	f7fe fbb2 	bl	80055b0 <USBD_CDC_TransmitPacket>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006e50:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	3710      	adds	r7, #16
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}
 8006e5a:	bf00      	nop
 8006e5c:	200001bc 	.word	0x200001bc

08006e60 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006e60:	b480      	push	{r7}
 8006e62:	b087      	sub	sp, #28
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	60f8      	str	r0, [r7, #12]
 8006e68:	60b9      	str	r1, [r7, #8]
 8006e6a:	4613      	mov	r3, r2
 8006e6c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8006e6e:	2300      	movs	r3, #0
 8006e70:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8006e72:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006e76:	4618      	mov	r0, r3
 8006e78:	371c      	adds	r7, #28
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e80:	4770      	bx	lr
	...

08006e84 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e84:	b480      	push	{r7}
 8006e86:	b083      	sub	sp, #12
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	6039      	str	r1, [r7, #0]
 8006e8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	2212      	movs	r2, #18
 8006e94:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006e96:	4b03      	ldr	r3, [pc, #12]	; (8006ea4 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	370c      	adds	r7, #12
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea2:	4770      	bx	lr
 8006ea4:	200000c8 	.word	0x200000c8

08006ea8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b083      	sub	sp, #12
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	4603      	mov	r3, r0
 8006eb0:	6039      	str	r1, [r7, #0]
 8006eb2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	2204      	movs	r2, #4
 8006eb8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006eba:	4b03      	ldr	r3, [pc, #12]	; (8006ec8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	370c      	adds	r7, #12
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec6:	4770      	bx	lr
 8006ec8:	200000dc 	.word	0x200000dc

08006ecc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b082      	sub	sp, #8
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	6039      	str	r1, [r7, #0]
 8006ed6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006ed8:	79fb      	ldrb	r3, [r7, #7]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d105      	bne.n	8006eea <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006ede:	683a      	ldr	r2, [r7, #0]
 8006ee0:	4907      	ldr	r1, [pc, #28]	; (8006f00 <USBD_FS_ProductStrDescriptor+0x34>)
 8006ee2:	4808      	ldr	r0, [pc, #32]	; (8006f04 <USBD_FS_ProductStrDescriptor+0x38>)
 8006ee4:	f7ff fdf2 	bl	8006acc <USBD_GetString>
 8006ee8:	e004      	b.n	8006ef4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006eea:	683a      	ldr	r2, [r7, #0]
 8006eec:	4904      	ldr	r1, [pc, #16]	; (8006f00 <USBD_FS_ProductStrDescriptor+0x34>)
 8006eee:	4805      	ldr	r0, [pc, #20]	; (8006f04 <USBD_FS_ProductStrDescriptor+0x38>)
 8006ef0:	f7ff fdec 	bl	8006acc <USBD_GetString>
  }
  return USBD_StrDesc;
 8006ef4:	4b02      	ldr	r3, [pc, #8]	; (8006f00 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	3708      	adds	r7, #8
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bd80      	pop	{r7, pc}
 8006efe:	bf00      	nop
 8006f00:	20001498 	.word	0x20001498
 8006f04:	0800808c 	.word	0x0800808c

08006f08 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b082      	sub	sp, #8
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	4603      	mov	r3, r0
 8006f10:	6039      	str	r1, [r7, #0]
 8006f12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006f14:	683a      	ldr	r2, [r7, #0]
 8006f16:	4904      	ldr	r1, [pc, #16]	; (8006f28 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006f18:	4804      	ldr	r0, [pc, #16]	; (8006f2c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006f1a:	f7ff fdd7 	bl	8006acc <USBD_GetString>
  return USBD_StrDesc;
 8006f1e:	4b02      	ldr	r3, [pc, #8]	; (8006f28 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	3708      	adds	r7, #8
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}
 8006f28:	20001498 	.word	0x20001498
 8006f2c:	080080a4 	.word	0x080080a4

08006f30 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b082      	sub	sp, #8
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	4603      	mov	r3, r0
 8006f38:	6039      	str	r1, [r7, #0]
 8006f3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	221a      	movs	r2, #26
 8006f40:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006f42:	f000 f843 	bl	8006fcc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006f46:	4b02      	ldr	r3, [pc, #8]	; (8006f50 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	3708      	adds	r7, #8
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bd80      	pop	{r7, pc}
 8006f50:	200000e0 	.word	0x200000e0

08006f54 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b082      	sub	sp, #8
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	6039      	str	r1, [r7, #0]
 8006f5e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006f60:	79fb      	ldrb	r3, [r7, #7]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d105      	bne.n	8006f72 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006f66:	683a      	ldr	r2, [r7, #0]
 8006f68:	4907      	ldr	r1, [pc, #28]	; (8006f88 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006f6a:	4808      	ldr	r0, [pc, #32]	; (8006f8c <USBD_FS_ConfigStrDescriptor+0x38>)
 8006f6c:	f7ff fdae 	bl	8006acc <USBD_GetString>
 8006f70:	e004      	b.n	8006f7c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006f72:	683a      	ldr	r2, [r7, #0]
 8006f74:	4904      	ldr	r1, [pc, #16]	; (8006f88 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006f76:	4805      	ldr	r0, [pc, #20]	; (8006f8c <USBD_FS_ConfigStrDescriptor+0x38>)
 8006f78:	f7ff fda8 	bl	8006acc <USBD_GetString>
  }
  return USBD_StrDesc;
 8006f7c:	4b02      	ldr	r3, [pc, #8]	; (8006f88 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	3708      	adds	r7, #8
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}
 8006f86:	bf00      	nop
 8006f88:	20001498 	.word	0x20001498
 8006f8c:	080080b8 	.word	0x080080b8

08006f90 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b082      	sub	sp, #8
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	4603      	mov	r3, r0
 8006f98:	6039      	str	r1, [r7, #0]
 8006f9a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006f9c:	79fb      	ldrb	r3, [r7, #7]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d105      	bne.n	8006fae <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006fa2:	683a      	ldr	r2, [r7, #0]
 8006fa4:	4907      	ldr	r1, [pc, #28]	; (8006fc4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006fa6:	4808      	ldr	r0, [pc, #32]	; (8006fc8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006fa8:	f7ff fd90 	bl	8006acc <USBD_GetString>
 8006fac:	e004      	b.n	8006fb8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006fae:	683a      	ldr	r2, [r7, #0]
 8006fb0:	4904      	ldr	r1, [pc, #16]	; (8006fc4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006fb2:	4805      	ldr	r0, [pc, #20]	; (8006fc8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006fb4:	f7ff fd8a 	bl	8006acc <USBD_GetString>
  }
  return USBD_StrDesc;
 8006fb8:	4b02      	ldr	r3, [pc, #8]	; (8006fc4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	3708      	adds	r7, #8
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}
 8006fc2:	bf00      	nop
 8006fc4:	20001498 	.word	0x20001498
 8006fc8:	080080c4 	.word	0x080080c4

08006fcc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b084      	sub	sp, #16
 8006fd0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006fd2:	4b0f      	ldr	r3, [pc, #60]	; (8007010 <Get_SerialNum+0x44>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006fd8:	4b0e      	ldr	r3, [pc, #56]	; (8007014 <Get_SerialNum+0x48>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006fde:	4b0e      	ldr	r3, [pc, #56]	; (8007018 <Get_SerialNum+0x4c>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006fe4:	68fa      	ldr	r2, [r7, #12]
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	4413      	add	r3, r2
 8006fea:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d009      	beq.n	8007006 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006ff2:	2208      	movs	r2, #8
 8006ff4:	4909      	ldr	r1, [pc, #36]	; (800701c <Get_SerialNum+0x50>)
 8006ff6:	68f8      	ldr	r0, [r7, #12]
 8006ff8:	f000 f814 	bl	8007024 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006ffc:	2204      	movs	r2, #4
 8006ffe:	4908      	ldr	r1, [pc, #32]	; (8007020 <Get_SerialNum+0x54>)
 8007000:	68b8      	ldr	r0, [r7, #8]
 8007002:	f000 f80f 	bl	8007024 <IntToUnicode>
  }
}
 8007006:	bf00      	nop
 8007008:	3710      	adds	r7, #16
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}
 800700e:	bf00      	nop
 8007010:	1fff7a10 	.word	0x1fff7a10
 8007014:	1fff7a14 	.word	0x1fff7a14
 8007018:	1fff7a18 	.word	0x1fff7a18
 800701c:	200000e2 	.word	0x200000e2
 8007020:	200000f2 	.word	0x200000f2

08007024 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007024:	b480      	push	{r7}
 8007026:	b087      	sub	sp, #28
 8007028:	af00      	add	r7, sp, #0
 800702a:	60f8      	str	r0, [r7, #12]
 800702c:	60b9      	str	r1, [r7, #8]
 800702e:	4613      	mov	r3, r2
 8007030:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007032:	2300      	movs	r3, #0
 8007034:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007036:	2300      	movs	r3, #0
 8007038:	75fb      	strb	r3, [r7, #23]
 800703a:	e027      	b.n	800708c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	0f1b      	lsrs	r3, r3, #28
 8007040:	2b09      	cmp	r3, #9
 8007042:	d80b      	bhi.n	800705c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	0f1b      	lsrs	r3, r3, #28
 8007048:	b2da      	uxtb	r2, r3
 800704a:	7dfb      	ldrb	r3, [r7, #23]
 800704c:	005b      	lsls	r3, r3, #1
 800704e:	4619      	mov	r1, r3
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	440b      	add	r3, r1
 8007054:	3230      	adds	r2, #48	; 0x30
 8007056:	b2d2      	uxtb	r2, r2
 8007058:	701a      	strb	r2, [r3, #0]
 800705a:	e00a      	b.n	8007072 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	0f1b      	lsrs	r3, r3, #28
 8007060:	b2da      	uxtb	r2, r3
 8007062:	7dfb      	ldrb	r3, [r7, #23]
 8007064:	005b      	lsls	r3, r3, #1
 8007066:	4619      	mov	r1, r3
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	440b      	add	r3, r1
 800706c:	3237      	adds	r2, #55	; 0x37
 800706e:	b2d2      	uxtb	r2, r2
 8007070:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	011b      	lsls	r3, r3, #4
 8007076:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007078:	7dfb      	ldrb	r3, [r7, #23]
 800707a:	005b      	lsls	r3, r3, #1
 800707c:	3301      	adds	r3, #1
 800707e:	68ba      	ldr	r2, [r7, #8]
 8007080:	4413      	add	r3, r2
 8007082:	2200      	movs	r2, #0
 8007084:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007086:	7dfb      	ldrb	r3, [r7, #23]
 8007088:	3301      	adds	r3, #1
 800708a:	75fb      	strb	r3, [r7, #23]
 800708c:	7dfa      	ldrb	r2, [r7, #23]
 800708e:	79fb      	ldrb	r3, [r7, #7]
 8007090:	429a      	cmp	r2, r3
 8007092:	d3d3      	bcc.n	800703c <IntToUnicode+0x18>
  }
}
 8007094:	bf00      	nop
 8007096:	bf00      	nop
 8007098:	371c      	adds	r7, #28
 800709a:	46bd      	mov	sp, r7
 800709c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a0:	4770      	bx	lr
	...

080070a4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b08a      	sub	sp, #40	; 0x28
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80070ac:	f107 0314 	add.w	r3, r7, #20
 80070b0:	2200      	movs	r2, #0
 80070b2:	601a      	str	r2, [r3, #0]
 80070b4:	605a      	str	r2, [r3, #4]
 80070b6:	609a      	str	r2, [r3, #8]
 80070b8:	60da      	str	r2, [r3, #12]
 80070ba:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80070c4:	d13a      	bne.n	800713c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80070c6:	2300      	movs	r3, #0
 80070c8:	613b      	str	r3, [r7, #16]
 80070ca:	4b1e      	ldr	r3, [pc, #120]	; (8007144 <HAL_PCD_MspInit+0xa0>)
 80070cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070ce:	4a1d      	ldr	r2, [pc, #116]	; (8007144 <HAL_PCD_MspInit+0xa0>)
 80070d0:	f043 0301 	orr.w	r3, r3, #1
 80070d4:	6313      	str	r3, [r2, #48]	; 0x30
 80070d6:	4b1b      	ldr	r3, [pc, #108]	; (8007144 <HAL_PCD_MspInit+0xa0>)
 80070d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070da:	f003 0301 	and.w	r3, r3, #1
 80070de:	613b      	str	r3, [r7, #16]
 80070e0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80070e2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80070e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80070e8:	2302      	movs	r3, #2
 80070ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070ec:	2300      	movs	r3, #0
 80070ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80070f0:	2303      	movs	r3, #3
 80070f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80070f4:	230a      	movs	r3, #10
 80070f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80070f8:	f107 0314 	add.w	r3, r7, #20
 80070fc:	4619      	mov	r1, r3
 80070fe:	4812      	ldr	r0, [pc, #72]	; (8007148 <HAL_PCD_MspInit+0xa4>)
 8007100:	f7f9 fe8e 	bl	8000e20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007104:	4b0f      	ldr	r3, [pc, #60]	; (8007144 <HAL_PCD_MspInit+0xa0>)
 8007106:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007108:	4a0e      	ldr	r2, [pc, #56]	; (8007144 <HAL_PCD_MspInit+0xa0>)
 800710a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800710e:	6353      	str	r3, [r2, #52]	; 0x34
 8007110:	2300      	movs	r3, #0
 8007112:	60fb      	str	r3, [r7, #12]
 8007114:	4b0b      	ldr	r3, [pc, #44]	; (8007144 <HAL_PCD_MspInit+0xa0>)
 8007116:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007118:	4a0a      	ldr	r2, [pc, #40]	; (8007144 <HAL_PCD_MspInit+0xa0>)
 800711a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800711e:	6453      	str	r3, [r2, #68]	; 0x44
 8007120:	4b08      	ldr	r3, [pc, #32]	; (8007144 <HAL_PCD_MspInit+0xa0>)
 8007122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007124:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007128:	60fb      	str	r3, [r7, #12]
 800712a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800712c:	2200      	movs	r2, #0
 800712e:	2100      	movs	r1, #0
 8007130:	2043      	movs	r0, #67	; 0x43
 8007132:	f7f9 fe3e 	bl	8000db2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007136:	2043      	movs	r0, #67	; 0x43
 8007138:	f7f9 fe57 	bl	8000dea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800713c:	bf00      	nop
 800713e:	3728      	adds	r7, #40	; 0x28
 8007140:	46bd      	mov	sp, r7
 8007142:	bd80      	pop	{r7, pc}
 8007144:	40023800 	.word	0x40023800
 8007148:	40020000 	.word	0x40020000

0800714c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b082      	sub	sp, #8
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8007160:	4619      	mov	r1, r3
 8007162:	4610      	mov	r0, r2
 8007164:	f7fe fb4d 	bl	8005802 <USBD_LL_SetupStage>
}
 8007168:	bf00      	nop
 800716a:	3708      	adds	r7, #8
 800716c:	46bd      	mov	sp, r7
 800716e:	bd80      	pop	{r7, pc}

08007170 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b082      	sub	sp, #8
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
 8007178:	460b      	mov	r3, r1
 800717a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 8007182:	78fa      	ldrb	r2, [r7, #3]
 8007184:	6879      	ldr	r1, [r7, #4]
 8007186:	4613      	mov	r3, r2
 8007188:	00db      	lsls	r3, r3, #3
 800718a:	4413      	add	r3, r2
 800718c:	009b      	lsls	r3, r3, #2
 800718e:	440b      	add	r3, r1
 8007190:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8007194:	681a      	ldr	r2, [r3, #0]
 8007196:	78fb      	ldrb	r3, [r7, #3]
 8007198:	4619      	mov	r1, r3
 800719a:	f7fe fb87 	bl	80058ac <USBD_LL_DataOutStage>
}
 800719e:	bf00      	nop
 80071a0:	3708      	adds	r7, #8
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}

080071a6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071a6:	b580      	push	{r7, lr}
 80071a8:	b082      	sub	sp, #8
 80071aa:	af00      	add	r7, sp, #0
 80071ac:	6078      	str	r0, [r7, #4]
 80071ae:	460b      	mov	r3, r1
 80071b0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 80071b8:	78fa      	ldrb	r2, [r7, #3]
 80071ba:	6879      	ldr	r1, [r7, #4]
 80071bc:	4613      	mov	r3, r2
 80071be:	00db      	lsls	r3, r3, #3
 80071c0:	4413      	add	r3, r2
 80071c2:	009b      	lsls	r3, r3, #2
 80071c4:	440b      	add	r3, r1
 80071c6:	3320      	adds	r3, #32
 80071c8:	681a      	ldr	r2, [r3, #0]
 80071ca:	78fb      	ldrb	r3, [r7, #3]
 80071cc:	4619      	mov	r1, r3
 80071ce:	f7fe fc20 	bl	8005a12 <USBD_LL_DataInStage>
}
 80071d2:	bf00      	nop
 80071d4:	3708      	adds	r7, #8
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd80      	pop	{r7, pc}

080071da <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071da:	b580      	push	{r7, lr}
 80071dc:	b082      	sub	sp, #8
 80071de:	af00      	add	r7, sp, #0
 80071e0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80071e8:	4618      	mov	r0, r3
 80071ea:	f7fe fd5a 	bl	8005ca2 <USBD_LL_SOF>
}
 80071ee:	bf00      	nop
 80071f0:	3708      	adds	r7, #8
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}

080071f6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071f6:	b580      	push	{r7, lr}
 80071f8:	b084      	sub	sp, #16
 80071fa:	af00      	add	r7, sp, #0
 80071fc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80071fe:	2301      	movs	r3, #1
 8007200:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	79db      	ldrb	r3, [r3, #7]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d102      	bne.n	8007210 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800720a:	2300      	movs	r3, #0
 800720c:	73fb      	strb	r3, [r7, #15]
 800720e:	e008      	b.n	8007222 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	79db      	ldrb	r3, [r3, #7]
 8007214:	2b02      	cmp	r3, #2
 8007216:	d102      	bne.n	800721e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007218:	2301      	movs	r3, #1
 800721a:	73fb      	strb	r3, [r7, #15]
 800721c:	e001      	b.n	8007222 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800721e:	f7f9 fb0b 	bl	8000838 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8007228:	7bfa      	ldrb	r2, [r7, #15]
 800722a:	4611      	mov	r1, r2
 800722c:	4618      	mov	r0, r3
 800722e:	f7fe fcf4 	bl	8005c1a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8007238:	4618      	mov	r0, r3
 800723a:	f7fe fc9c 	bl	8005b76 <USBD_LL_Reset>
}
 800723e:	bf00      	nop
 8007240:	3710      	adds	r7, #16
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}
	...

08007248 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b082      	sub	sp, #8
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8007256:	4618      	mov	r0, r3
 8007258:	f7fe fcef 	bl	8005c3a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	687a      	ldr	r2, [r7, #4]
 8007268:	6812      	ldr	r2, [r2, #0]
 800726a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800726e:	f043 0301 	orr.w	r3, r3, #1
 8007272:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	7adb      	ldrb	r3, [r3, #11]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d005      	beq.n	8007288 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800727c:	4b04      	ldr	r3, [pc, #16]	; (8007290 <HAL_PCD_SuspendCallback+0x48>)
 800727e:	691b      	ldr	r3, [r3, #16]
 8007280:	4a03      	ldr	r2, [pc, #12]	; (8007290 <HAL_PCD_SuspendCallback+0x48>)
 8007282:	f043 0306 	orr.w	r3, r3, #6
 8007286:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007288:	bf00      	nop
 800728a:	3708      	adds	r7, #8
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}
 8007290:	e000ed00 	.word	0xe000ed00

08007294 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b082      	sub	sp, #8
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80072a2:	4618      	mov	r0, r3
 80072a4:	f7fe fce5 	bl	8005c72 <USBD_LL_Resume>
}
 80072a8:	bf00      	nop
 80072aa:	3708      	adds	r7, #8
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bd80      	pop	{r7, pc}

080072b0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b082      	sub	sp, #8
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
 80072b8:	460b      	mov	r3, r1
 80072ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80072c2:	78fa      	ldrb	r2, [r7, #3]
 80072c4:	4611      	mov	r1, r2
 80072c6:	4618      	mov	r0, r3
 80072c8:	f7fe fd3d 	bl	8005d46 <USBD_LL_IsoOUTIncomplete>
}
 80072cc:	bf00      	nop
 80072ce:	3708      	adds	r7, #8
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}

080072d4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b082      	sub	sp, #8
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
 80072dc:	460b      	mov	r3, r1
 80072de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80072e6:	78fa      	ldrb	r2, [r7, #3]
 80072e8:	4611      	mov	r1, r2
 80072ea:	4618      	mov	r0, r3
 80072ec:	f7fe fcf9 	bl	8005ce2 <USBD_LL_IsoINIncomplete>
}
 80072f0:	bf00      	nop
 80072f2:	3708      	adds	r7, #8
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}

080072f8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b082      	sub	sp, #8
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8007306:	4618      	mov	r0, r3
 8007308:	f7fe fd4f 	bl	8005daa <USBD_LL_DevConnected>
}
 800730c:	bf00      	nop
 800730e:	3708      	adds	r7, #8
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}

08007314 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b082      	sub	sp, #8
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8007322:	4618      	mov	r0, r3
 8007324:	f7fe fd4c 	bl	8005dc0 <USBD_LL_DevDisconnected>
}
 8007328:	bf00      	nop
 800732a:	3708      	adds	r7, #8
 800732c:	46bd      	mov	sp, r7
 800732e:	bd80      	pop	{r7, pc}

08007330 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b082      	sub	sp, #8
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	781b      	ldrb	r3, [r3, #0]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d13c      	bne.n	80073ba <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007340:	4a20      	ldr	r2, [pc, #128]	; (80073c4 <USBD_LL_Init+0x94>)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	4a1e      	ldr	r2, [pc, #120]	; (80073c4 <USBD_LL_Init+0x94>)
 800734c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007350:	4b1c      	ldr	r3, [pc, #112]	; (80073c4 <USBD_LL_Init+0x94>)
 8007352:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007356:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007358:	4b1a      	ldr	r3, [pc, #104]	; (80073c4 <USBD_LL_Init+0x94>)
 800735a:	2204      	movs	r2, #4
 800735c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800735e:	4b19      	ldr	r3, [pc, #100]	; (80073c4 <USBD_LL_Init+0x94>)
 8007360:	2202      	movs	r2, #2
 8007362:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007364:	4b17      	ldr	r3, [pc, #92]	; (80073c4 <USBD_LL_Init+0x94>)
 8007366:	2200      	movs	r2, #0
 8007368:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800736a:	4b16      	ldr	r3, [pc, #88]	; (80073c4 <USBD_LL_Init+0x94>)
 800736c:	2202      	movs	r2, #2
 800736e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007370:	4b14      	ldr	r3, [pc, #80]	; (80073c4 <USBD_LL_Init+0x94>)
 8007372:	2200      	movs	r2, #0
 8007374:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007376:	4b13      	ldr	r3, [pc, #76]	; (80073c4 <USBD_LL_Init+0x94>)
 8007378:	2200      	movs	r2, #0
 800737a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800737c:	4b11      	ldr	r3, [pc, #68]	; (80073c4 <USBD_LL_Init+0x94>)
 800737e:	2200      	movs	r2, #0
 8007380:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007382:	4b10      	ldr	r3, [pc, #64]	; (80073c4 <USBD_LL_Init+0x94>)
 8007384:	2200      	movs	r2, #0
 8007386:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007388:	4b0e      	ldr	r3, [pc, #56]	; (80073c4 <USBD_LL_Init+0x94>)
 800738a:	2200      	movs	r2, #0
 800738c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800738e:	480d      	ldr	r0, [pc, #52]	; (80073c4 <USBD_LL_Init+0x94>)
 8007390:	f7f9 fefa 	bl	8001188 <HAL_PCD_Init>
 8007394:	4603      	mov	r3, r0
 8007396:	2b00      	cmp	r3, #0
 8007398:	d001      	beq.n	800739e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800739a:	f7f9 fa4d 	bl	8000838 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800739e:	2180      	movs	r1, #128	; 0x80
 80073a0:	4808      	ldr	r0, [pc, #32]	; (80073c4 <USBD_LL_Init+0x94>)
 80073a2:	f7fb f924 	bl	80025ee <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80073a6:	2240      	movs	r2, #64	; 0x40
 80073a8:	2100      	movs	r1, #0
 80073aa:	4806      	ldr	r0, [pc, #24]	; (80073c4 <USBD_LL_Init+0x94>)
 80073ac:	f7fb f8d8 	bl	8002560 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80073b0:	2280      	movs	r2, #128	; 0x80
 80073b2:	2101      	movs	r1, #1
 80073b4:	4803      	ldr	r0, [pc, #12]	; (80073c4 <USBD_LL_Init+0x94>)
 80073b6:	f7fb f8d3 	bl	8002560 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80073ba:	2300      	movs	r3, #0
}
 80073bc:	4618      	mov	r0, r3
 80073be:	3708      	adds	r7, #8
 80073c0:	46bd      	mov	sp, r7
 80073c2:	bd80      	pop	{r7, pc}
 80073c4:	20001698 	.word	0x20001698

080073c8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b084      	sub	sp, #16
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80073d0:	2300      	movs	r3, #0
 80073d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80073d4:	2300      	movs	r3, #0
 80073d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80073de:	4618      	mov	r0, r3
 80073e0:	f7f9 ffe1 	bl	80013a6 <HAL_PCD_Start>
 80073e4:	4603      	mov	r3, r0
 80073e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80073e8:	7bfb      	ldrb	r3, [r7, #15]
 80073ea:	4618      	mov	r0, r3
 80073ec:	f000 f942 	bl	8007674 <USBD_Get_USB_Status>
 80073f0:	4603      	mov	r3, r0
 80073f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80073f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80073f6:	4618      	mov	r0, r3
 80073f8:	3710      	adds	r7, #16
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bd80      	pop	{r7, pc}

080073fe <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80073fe:	b580      	push	{r7, lr}
 8007400:	b084      	sub	sp, #16
 8007402:	af00      	add	r7, sp, #0
 8007404:	6078      	str	r0, [r7, #4]
 8007406:	4608      	mov	r0, r1
 8007408:	4611      	mov	r1, r2
 800740a:	461a      	mov	r2, r3
 800740c:	4603      	mov	r3, r0
 800740e:	70fb      	strb	r3, [r7, #3]
 8007410:	460b      	mov	r3, r1
 8007412:	70bb      	strb	r3, [r7, #2]
 8007414:	4613      	mov	r3, r2
 8007416:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007418:	2300      	movs	r3, #0
 800741a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800741c:	2300      	movs	r3, #0
 800741e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007426:	78bb      	ldrb	r3, [r7, #2]
 8007428:	883a      	ldrh	r2, [r7, #0]
 800742a:	78f9      	ldrb	r1, [r7, #3]
 800742c:	f7fa fcb5 	bl	8001d9a <HAL_PCD_EP_Open>
 8007430:	4603      	mov	r3, r0
 8007432:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007434:	7bfb      	ldrb	r3, [r7, #15]
 8007436:	4618      	mov	r0, r3
 8007438:	f000 f91c 	bl	8007674 <USBD_Get_USB_Status>
 800743c:	4603      	mov	r3, r0
 800743e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007440:	7bbb      	ldrb	r3, [r7, #14]
}
 8007442:	4618      	mov	r0, r3
 8007444:	3710      	adds	r7, #16
 8007446:	46bd      	mov	sp, r7
 8007448:	bd80      	pop	{r7, pc}

0800744a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800744a:	b580      	push	{r7, lr}
 800744c:	b084      	sub	sp, #16
 800744e:	af00      	add	r7, sp, #0
 8007450:	6078      	str	r0, [r7, #4]
 8007452:	460b      	mov	r3, r1
 8007454:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007456:	2300      	movs	r3, #0
 8007458:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800745a:	2300      	movs	r3, #0
 800745c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007464:	78fa      	ldrb	r2, [r7, #3]
 8007466:	4611      	mov	r1, r2
 8007468:	4618      	mov	r0, r3
 800746a:	f7fa fcfe 	bl	8001e6a <HAL_PCD_EP_Close>
 800746e:	4603      	mov	r3, r0
 8007470:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007472:	7bfb      	ldrb	r3, [r7, #15]
 8007474:	4618      	mov	r0, r3
 8007476:	f000 f8fd 	bl	8007674 <USBD_Get_USB_Status>
 800747a:	4603      	mov	r3, r0
 800747c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800747e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007480:	4618      	mov	r0, r3
 8007482:	3710      	adds	r7, #16
 8007484:	46bd      	mov	sp, r7
 8007486:	bd80      	pop	{r7, pc}

08007488 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b084      	sub	sp, #16
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
 8007490:	460b      	mov	r3, r1
 8007492:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007494:	2300      	movs	r3, #0
 8007496:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007498:	2300      	movs	r3, #0
 800749a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80074a2:	78fa      	ldrb	r2, [r7, #3]
 80074a4:	4611      	mov	r1, r2
 80074a6:	4618      	mov	r0, r3
 80074a8:	f7fa fdb6 	bl	8002018 <HAL_PCD_EP_SetStall>
 80074ac:	4603      	mov	r3, r0
 80074ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80074b0:	7bfb      	ldrb	r3, [r7, #15]
 80074b2:	4618      	mov	r0, r3
 80074b4:	f000 f8de 	bl	8007674 <USBD_Get_USB_Status>
 80074b8:	4603      	mov	r3, r0
 80074ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80074bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80074be:	4618      	mov	r0, r3
 80074c0:	3710      	adds	r7, #16
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}

080074c6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80074c6:	b580      	push	{r7, lr}
 80074c8:	b084      	sub	sp, #16
 80074ca:	af00      	add	r7, sp, #0
 80074cc:	6078      	str	r0, [r7, #4]
 80074ce:	460b      	mov	r3, r1
 80074d0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80074d2:	2300      	movs	r3, #0
 80074d4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80074d6:	2300      	movs	r3, #0
 80074d8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80074e0:	78fa      	ldrb	r2, [r7, #3]
 80074e2:	4611      	mov	r1, r2
 80074e4:	4618      	mov	r0, r3
 80074e6:	f7fa fdfa 	bl	80020de <HAL_PCD_EP_ClrStall>
 80074ea:	4603      	mov	r3, r0
 80074ec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80074ee:	7bfb      	ldrb	r3, [r7, #15]
 80074f0:	4618      	mov	r0, r3
 80074f2:	f000 f8bf 	bl	8007674 <USBD_Get_USB_Status>
 80074f6:	4603      	mov	r3, r0
 80074f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80074fa:	7bbb      	ldrb	r3, [r7, #14]
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	3710      	adds	r7, #16
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}

08007504 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007504:	b480      	push	{r7}
 8007506:	b085      	sub	sp, #20
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
 800750c:	460b      	mov	r3, r1
 800750e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007516:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007518:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800751c:	2b00      	cmp	r3, #0
 800751e:	da0b      	bge.n	8007538 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007520:	78fb      	ldrb	r3, [r7, #3]
 8007522:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007526:	68f9      	ldr	r1, [r7, #12]
 8007528:	4613      	mov	r3, r2
 800752a:	00db      	lsls	r3, r3, #3
 800752c:	4413      	add	r3, r2
 800752e:	009b      	lsls	r3, r3, #2
 8007530:	440b      	add	r3, r1
 8007532:	3316      	adds	r3, #22
 8007534:	781b      	ldrb	r3, [r3, #0]
 8007536:	e00b      	b.n	8007550 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007538:	78fb      	ldrb	r3, [r7, #3]
 800753a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800753e:	68f9      	ldr	r1, [r7, #12]
 8007540:	4613      	mov	r3, r2
 8007542:	00db      	lsls	r3, r3, #3
 8007544:	4413      	add	r3, r2
 8007546:	009b      	lsls	r3, r3, #2
 8007548:	440b      	add	r3, r1
 800754a:	f203 2356 	addw	r3, r3, #598	; 0x256
 800754e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007550:	4618      	mov	r0, r3
 8007552:	3714      	adds	r7, #20
 8007554:	46bd      	mov	sp, r7
 8007556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755a:	4770      	bx	lr

0800755c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b084      	sub	sp, #16
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
 8007564:	460b      	mov	r3, r1
 8007566:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007568:	2300      	movs	r3, #0
 800756a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800756c:	2300      	movs	r3, #0
 800756e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007576:	78fa      	ldrb	r2, [r7, #3]
 8007578:	4611      	mov	r1, r2
 800757a:	4618      	mov	r0, r3
 800757c:	f7fa fbe9 	bl	8001d52 <HAL_PCD_SetAddress>
 8007580:	4603      	mov	r3, r0
 8007582:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007584:	7bfb      	ldrb	r3, [r7, #15]
 8007586:	4618      	mov	r0, r3
 8007588:	f000 f874 	bl	8007674 <USBD_Get_USB_Status>
 800758c:	4603      	mov	r3, r0
 800758e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007590:	7bbb      	ldrb	r3, [r7, #14]
}
 8007592:	4618      	mov	r0, r3
 8007594:	3710      	adds	r7, #16
 8007596:	46bd      	mov	sp, r7
 8007598:	bd80      	pop	{r7, pc}

0800759a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800759a:	b580      	push	{r7, lr}
 800759c:	b086      	sub	sp, #24
 800759e:	af00      	add	r7, sp, #0
 80075a0:	60f8      	str	r0, [r7, #12]
 80075a2:	607a      	str	r2, [r7, #4]
 80075a4:	603b      	str	r3, [r7, #0]
 80075a6:	460b      	mov	r3, r1
 80075a8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80075aa:	2300      	movs	r3, #0
 80075ac:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075ae:	2300      	movs	r3, #0
 80075b0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80075b8:	7af9      	ldrb	r1, [r7, #11]
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	687a      	ldr	r2, [r7, #4]
 80075be:	f7fa fcf1 	bl	8001fa4 <HAL_PCD_EP_Transmit>
 80075c2:	4603      	mov	r3, r0
 80075c4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80075c6:	7dfb      	ldrb	r3, [r7, #23]
 80075c8:	4618      	mov	r0, r3
 80075ca:	f000 f853 	bl	8007674 <USBD_Get_USB_Status>
 80075ce:	4603      	mov	r3, r0
 80075d0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80075d2:	7dbb      	ldrb	r3, [r7, #22]
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	3718      	adds	r7, #24
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}

080075dc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b086      	sub	sp, #24
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	60f8      	str	r0, [r7, #12]
 80075e4:	607a      	str	r2, [r7, #4]
 80075e6:	603b      	str	r3, [r7, #0]
 80075e8:	460b      	mov	r3, r1
 80075ea:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80075ec:	2300      	movs	r3, #0
 80075ee:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075f0:	2300      	movs	r3, #0
 80075f2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80075fa:	7af9      	ldrb	r1, [r7, #11]
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	687a      	ldr	r2, [r7, #4]
 8007600:	f7fa fc7d 	bl	8001efe <HAL_PCD_EP_Receive>
 8007604:	4603      	mov	r3, r0
 8007606:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007608:	7dfb      	ldrb	r3, [r7, #23]
 800760a:	4618      	mov	r0, r3
 800760c:	f000 f832 	bl	8007674 <USBD_Get_USB_Status>
 8007610:	4603      	mov	r3, r0
 8007612:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007614:	7dbb      	ldrb	r3, [r7, #22]
}
 8007616:	4618      	mov	r0, r3
 8007618:	3718      	adds	r7, #24
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}

0800761e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800761e:	b580      	push	{r7, lr}
 8007620:	b082      	sub	sp, #8
 8007622:	af00      	add	r7, sp, #0
 8007624:	6078      	str	r0, [r7, #4]
 8007626:	460b      	mov	r3, r1
 8007628:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007630:	78fa      	ldrb	r2, [r7, #3]
 8007632:	4611      	mov	r1, r2
 8007634:	4618      	mov	r0, r3
 8007636:	f7fa fc9d 	bl	8001f74 <HAL_PCD_EP_GetRxCount>
 800763a:	4603      	mov	r3, r0
}
 800763c:	4618      	mov	r0, r3
 800763e:	3708      	adds	r7, #8
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}

08007644 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007644:	b480      	push	{r7}
 8007646:	b083      	sub	sp, #12
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800764c:	4b03      	ldr	r3, [pc, #12]	; (800765c <USBD_static_malloc+0x18>)
}
 800764e:	4618      	mov	r0, r3
 8007650:	370c      	adds	r7, #12
 8007652:	46bd      	mov	sp, r7
 8007654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007658:	4770      	bx	lr
 800765a:	bf00      	nop
 800765c:	20001b7c 	.word	0x20001b7c

08007660 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007660:	b480      	push	{r7}
 8007662:	b083      	sub	sp, #12
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]

}
 8007668:	bf00      	nop
 800766a:	370c      	adds	r7, #12
 800766c:	46bd      	mov	sp, r7
 800766e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007672:	4770      	bx	lr

08007674 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007674:	b480      	push	{r7}
 8007676:	b085      	sub	sp, #20
 8007678:	af00      	add	r7, sp, #0
 800767a:	4603      	mov	r3, r0
 800767c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800767e:	2300      	movs	r3, #0
 8007680:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007682:	79fb      	ldrb	r3, [r7, #7]
 8007684:	2b03      	cmp	r3, #3
 8007686:	d817      	bhi.n	80076b8 <USBD_Get_USB_Status+0x44>
 8007688:	a201      	add	r2, pc, #4	; (adr r2, 8007690 <USBD_Get_USB_Status+0x1c>)
 800768a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800768e:	bf00      	nop
 8007690:	080076a1 	.word	0x080076a1
 8007694:	080076a7 	.word	0x080076a7
 8007698:	080076ad 	.word	0x080076ad
 800769c:	080076b3 	.word	0x080076b3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80076a0:	2300      	movs	r3, #0
 80076a2:	73fb      	strb	r3, [r7, #15]
    break;
 80076a4:	e00b      	b.n	80076be <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80076a6:	2303      	movs	r3, #3
 80076a8:	73fb      	strb	r3, [r7, #15]
    break;
 80076aa:	e008      	b.n	80076be <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80076ac:	2301      	movs	r3, #1
 80076ae:	73fb      	strb	r3, [r7, #15]
    break;
 80076b0:	e005      	b.n	80076be <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80076b2:	2303      	movs	r3, #3
 80076b4:	73fb      	strb	r3, [r7, #15]
    break;
 80076b6:	e002      	b.n	80076be <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80076b8:	2303      	movs	r3, #3
 80076ba:	73fb      	strb	r3, [r7, #15]
    break;
 80076bc:	bf00      	nop
  }
  return usb_status;
 80076be:	7bfb      	ldrb	r3, [r7, #15]
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	3714      	adds	r7, #20
 80076c4:	46bd      	mov	sp, r7
 80076c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ca:	4770      	bx	lr

080076cc <siprintf>:
 80076cc:	b40e      	push	{r1, r2, r3}
 80076ce:	b500      	push	{lr}
 80076d0:	b09c      	sub	sp, #112	; 0x70
 80076d2:	ab1d      	add	r3, sp, #116	; 0x74
 80076d4:	9002      	str	r0, [sp, #8]
 80076d6:	9006      	str	r0, [sp, #24]
 80076d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80076dc:	4809      	ldr	r0, [pc, #36]	; (8007704 <siprintf+0x38>)
 80076de:	9107      	str	r1, [sp, #28]
 80076e0:	9104      	str	r1, [sp, #16]
 80076e2:	4909      	ldr	r1, [pc, #36]	; (8007708 <siprintf+0x3c>)
 80076e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80076e8:	9105      	str	r1, [sp, #20]
 80076ea:	6800      	ldr	r0, [r0, #0]
 80076ec:	9301      	str	r3, [sp, #4]
 80076ee:	a902      	add	r1, sp, #8
 80076f0:	f000 f992 	bl	8007a18 <_svfiprintf_r>
 80076f4:	9b02      	ldr	r3, [sp, #8]
 80076f6:	2200      	movs	r2, #0
 80076f8:	701a      	strb	r2, [r3, #0]
 80076fa:	b01c      	add	sp, #112	; 0x70
 80076fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8007700:	b003      	add	sp, #12
 8007702:	4770      	bx	lr
 8007704:	20000148 	.word	0x20000148
 8007708:	ffff0208 	.word	0xffff0208

0800770c <memset>:
 800770c:	4402      	add	r2, r0
 800770e:	4603      	mov	r3, r0
 8007710:	4293      	cmp	r3, r2
 8007712:	d100      	bne.n	8007716 <memset+0xa>
 8007714:	4770      	bx	lr
 8007716:	f803 1b01 	strb.w	r1, [r3], #1
 800771a:	e7f9      	b.n	8007710 <memset+0x4>

0800771c <__errno>:
 800771c:	4b01      	ldr	r3, [pc, #4]	; (8007724 <__errno+0x8>)
 800771e:	6818      	ldr	r0, [r3, #0]
 8007720:	4770      	bx	lr
 8007722:	bf00      	nop
 8007724:	20000148 	.word	0x20000148

08007728 <__libc_init_array>:
 8007728:	b570      	push	{r4, r5, r6, lr}
 800772a:	4d0d      	ldr	r5, [pc, #52]	; (8007760 <__libc_init_array+0x38>)
 800772c:	4c0d      	ldr	r4, [pc, #52]	; (8007764 <__libc_init_array+0x3c>)
 800772e:	1b64      	subs	r4, r4, r5
 8007730:	10a4      	asrs	r4, r4, #2
 8007732:	2600      	movs	r6, #0
 8007734:	42a6      	cmp	r6, r4
 8007736:	d109      	bne.n	800774c <__libc_init_array+0x24>
 8007738:	4d0b      	ldr	r5, [pc, #44]	; (8007768 <__libc_init_array+0x40>)
 800773a:	4c0c      	ldr	r4, [pc, #48]	; (800776c <__libc_init_array+0x44>)
 800773c:	f000 fc6a 	bl	8008014 <_init>
 8007740:	1b64      	subs	r4, r4, r5
 8007742:	10a4      	asrs	r4, r4, #2
 8007744:	2600      	movs	r6, #0
 8007746:	42a6      	cmp	r6, r4
 8007748:	d105      	bne.n	8007756 <__libc_init_array+0x2e>
 800774a:	bd70      	pop	{r4, r5, r6, pc}
 800774c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007750:	4798      	blx	r3
 8007752:	3601      	adds	r6, #1
 8007754:	e7ee      	b.n	8007734 <__libc_init_array+0xc>
 8007756:	f855 3b04 	ldr.w	r3, [r5], #4
 800775a:	4798      	blx	r3
 800775c:	3601      	adds	r6, #1
 800775e:	e7f2      	b.n	8007746 <__libc_init_array+0x1e>
 8007760:	08008120 	.word	0x08008120
 8007764:	08008120 	.word	0x08008120
 8007768:	08008120 	.word	0x08008120
 800776c:	08008124 	.word	0x08008124

08007770 <__retarget_lock_acquire_recursive>:
 8007770:	4770      	bx	lr

08007772 <__retarget_lock_release_recursive>:
 8007772:	4770      	bx	lr

08007774 <_free_r>:
 8007774:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007776:	2900      	cmp	r1, #0
 8007778:	d044      	beq.n	8007804 <_free_r+0x90>
 800777a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800777e:	9001      	str	r0, [sp, #4]
 8007780:	2b00      	cmp	r3, #0
 8007782:	f1a1 0404 	sub.w	r4, r1, #4
 8007786:	bfb8      	it	lt
 8007788:	18e4      	addlt	r4, r4, r3
 800778a:	f000 f8df 	bl	800794c <__malloc_lock>
 800778e:	4a1e      	ldr	r2, [pc, #120]	; (8007808 <_free_r+0x94>)
 8007790:	9801      	ldr	r0, [sp, #4]
 8007792:	6813      	ldr	r3, [r2, #0]
 8007794:	b933      	cbnz	r3, 80077a4 <_free_r+0x30>
 8007796:	6063      	str	r3, [r4, #4]
 8007798:	6014      	str	r4, [r2, #0]
 800779a:	b003      	add	sp, #12
 800779c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80077a0:	f000 b8da 	b.w	8007958 <__malloc_unlock>
 80077a4:	42a3      	cmp	r3, r4
 80077a6:	d908      	bls.n	80077ba <_free_r+0x46>
 80077a8:	6825      	ldr	r5, [r4, #0]
 80077aa:	1961      	adds	r1, r4, r5
 80077ac:	428b      	cmp	r3, r1
 80077ae:	bf01      	itttt	eq
 80077b0:	6819      	ldreq	r1, [r3, #0]
 80077b2:	685b      	ldreq	r3, [r3, #4]
 80077b4:	1949      	addeq	r1, r1, r5
 80077b6:	6021      	streq	r1, [r4, #0]
 80077b8:	e7ed      	b.n	8007796 <_free_r+0x22>
 80077ba:	461a      	mov	r2, r3
 80077bc:	685b      	ldr	r3, [r3, #4]
 80077be:	b10b      	cbz	r3, 80077c4 <_free_r+0x50>
 80077c0:	42a3      	cmp	r3, r4
 80077c2:	d9fa      	bls.n	80077ba <_free_r+0x46>
 80077c4:	6811      	ldr	r1, [r2, #0]
 80077c6:	1855      	adds	r5, r2, r1
 80077c8:	42a5      	cmp	r5, r4
 80077ca:	d10b      	bne.n	80077e4 <_free_r+0x70>
 80077cc:	6824      	ldr	r4, [r4, #0]
 80077ce:	4421      	add	r1, r4
 80077d0:	1854      	adds	r4, r2, r1
 80077d2:	42a3      	cmp	r3, r4
 80077d4:	6011      	str	r1, [r2, #0]
 80077d6:	d1e0      	bne.n	800779a <_free_r+0x26>
 80077d8:	681c      	ldr	r4, [r3, #0]
 80077da:	685b      	ldr	r3, [r3, #4]
 80077dc:	6053      	str	r3, [r2, #4]
 80077de:	440c      	add	r4, r1
 80077e0:	6014      	str	r4, [r2, #0]
 80077e2:	e7da      	b.n	800779a <_free_r+0x26>
 80077e4:	d902      	bls.n	80077ec <_free_r+0x78>
 80077e6:	230c      	movs	r3, #12
 80077e8:	6003      	str	r3, [r0, #0]
 80077ea:	e7d6      	b.n	800779a <_free_r+0x26>
 80077ec:	6825      	ldr	r5, [r4, #0]
 80077ee:	1961      	adds	r1, r4, r5
 80077f0:	428b      	cmp	r3, r1
 80077f2:	bf04      	itt	eq
 80077f4:	6819      	ldreq	r1, [r3, #0]
 80077f6:	685b      	ldreq	r3, [r3, #4]
 80077f8:	6063      	str	r3, [r4, #4]
 80077fa:	bf04      	itt	eq
 80077fc:	1949      	addeq	r1, r1, r5
 80077fe:	6021      	streq	r1, [r4, #0]
 8007800:	6054      	str	r4, [r2, #4]
 8007802:	e7ca      	b.n	800779a <_free_r+0x26>
 8007804:	b003      	add	sp, #12
 8007806:	bd30      	pop	{r4, r5, pc}
 8007808:	20001edc 	.word	0x20001edc

0800780c <sbrk_aligned>:
 800780c:	b570      	push	{r4, r5, r6, lr}
 800780e:	4e0e      	ldr	r6, [pc, #56]	; (8007848 <sbrk_aligned+0x3c>)
 8007810:	460c      	mov	r4, r1
 8007812:	6831      	ldr	r1, [r6, #0]
 8007814:	4605      	mov	r5, r0
 8007816:	b911      	cbnz	r1, 800781e <sbrk_aligned+0x12>
 8007818:	f000 fba6 	bl	8007f68 <_sbrk_r>
 800781c:	6030      	str	r0, [r6, #0]
 800781e:	4621      	mov	r1, r4
 8007820:	4628      	mov	r0, r5
 8007822:	f000 fba1 	bl	8007f68 <_sbrk_r>
 8007826:	1c43      	adds	r3, r0, #1
 8007828:	d00a      	beq.n	8007840 <sbrk_aligned+0x34>
 800782a:	1cc4      	adds	r4, r0, #3
 800782c:	f024 0403 	bic.w	r4, r4, #3
 8007830:	42a0      	cmp	r0, r4
 8007832:	d007      	beq.n	8007844 <sbrk_aligned+0x38>
 8007834:	1a21      	subs	r1, r4, r0
 8007836:	4628      	mov	r0, r5
 8007838:	f000 fb96 	bl	8007f68 <_sbrk_r>
 800783c:	3001      	adds	r0, #1
 800783e:	d101      	bne.n	8007844 <sbrk_aligned+0x38>
 8007840:	f04f 34ff 	mov.w	r4, #4294967295
 8007844:	4620      	mov	r0, r4
 8007846:	bd70      	pop	{r4, r5, r6, pc}
 8007848:	20001ee0 	.word	0x20001ee0

0800784c <_malloc_r>:
 800784c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007850:	1ccd      	adds	r5, r1, #3
 8007852:	f025 0503 	bic.w	r5, r5, #3
 8007856:	3508      	adds	r5, #8
 8007858:	2d0c      	cmp	r5, #12
 800785a:	bf38      	it	cc
 800785c:	250c      	movcc	r5, #12
 800785e:	2d00      	cmp	r5, #0
 8007860:	4607      	mov	r7, r0
 8007862:	db01      	blt.n	8007868 <_malloc_r+0x1c>
 8007864:	42a9      	cmp	r1, r5
 8007866:	d905      	bls.n	8007874 <_malloc_r+0x28>
 8007868:	230c      	movs	r3, #12
 800786a:	603b      	str	r3, [r7, #0]
 800786c:	2600      	movs	r6, #0
 800786e:	4630      	mov	r0, r6
 8007870:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007874:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007948 <_malloc_r+0xfc>
 8007878:	f000 f868 	bl	800794c <__malloc_lock>
 800787c:	f8d8 3000 	ldr.w	r3, [r8]
 8007880:	461c      	mov	r4, r3
 8007882:	bb5c      	cbnz	r4, 80078dc <_malloc_r+0x90>
 8007884:	4629      	mov	r1, r5
 8007886:	4638      	mov	r0, r7
 8007888:	f7ff ffc0 	bl	800780c <sbrk_aligned>
 800788c:	1c43      	adds	r3, r0, #1
 800788e:	4604      	mov	r4, r0
 8007890:	d155      	bne.n	800793e <_malloc_r+0xf2>
 8007892:	f8d8 4000 	ldr.w	r4, [r8]
 8007896:	4626      	mov	r6, r4
 8007898:	2e00      	cmp	r6, #0
 800789a:	d145      	bne.n	8007928 <_malloc_r+0xdc>
 800789c:	2c00      	cmp	r4, #0
 800789e:	d048      	beq.n	8007932 <_malloc_r+0xe6>
 80078a0:	6823      	ldr	r3, [r4, #0]
 80078a2:	4631      	mov	r1, r6
 80078a4:	4638      	mov	r0, r7
 80078a6:	eb04 0903 	add.w	r9, r4, r3
 80078aa:	f000 fb5d 	bl	8007f68 <_sbrk_r>
 80078ae:	4581      	cmp	r9, r0
 80078b0:	d13f      	bne.n	8007932 <_malloc_r+0xe6>
 80078b2:	6821      	ldr	r1, [r4, #0]
 80078b4:	1a6d      	subs	r5, r5, r1
 80078b6:	4629      	mov	r1, r5
 80078b8:	4638      	mov	r0, r7
 80078ba:	f7ff ffa7 	bl	800780c <sbrk_aligned>
 80078be:	3001      	adds	r0, #1
 80078c0:	d037      	beq.n	8007932 <_malloc_r+0xe6>
 80078c2:	6823      	ldr	r3, [r4, #0]
 80078c4:	442b      	add	r3, r5
 80078c6:	6023      	str	r3, [r4, #0]
 80078c8:	f8d8 3000 	ldr.w	r3, [r8]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d038      	beq.n	8007942 <_malloc_r+0xf6>
 80078d0:	685a      	ldr	r2, [r3, #4]
 80078d2:	42a2      	cmp	r2, r4
 80078d4:	d12b      	bne.n	800792e <_malloc_r+0xe2>
 80078d6:	2200      	movs	r2, #0
 80078d8:	605a      	str	r2, [r3, #4]
 80078da:	e00f      	b.n	80078fc <_malloc_r+0xb0>
 80078dc:	6822      	ldr	r2, [r4, #0]
 80078de:	1b52      	subs	r2, r2, r5
 80078e0:	d41f      	bmi.n	8007922 <_malloc_r+0xd6>
 80078e2:	2a0b      	cmp	r2, #11
 80078e4:	d917      	bls.n	8007916 <_malloc_r+0xca>
 80078e6:	1961      	adds	r1, r4, r5
 80078e8:	42a3      	cmp	r3, r4
 80078ea:	6025      	str	r5, [r4, #0]
 80078ec:	bf18      	it	ne
 80078ee:	6059      	strne	r1, [r3, #4]
 80078f0:	6863      	ldr	r3, [r4, #4]
 80078f2:	bf08      	it	eq
 80078f4:	f8c8 1000 	streq.w	r1, [r8]
 80078f8:	5162      	str	r2, [r4, r5]
 80078fa:	604b      	str	r3, [r1, #4]
 80078fc:	4638      	mov	r0, r7
 80078fe:	f104 060b 	add.w	r6, r4, #11
 8007902:	f000 f829 	bl	8007958 <__malloc_unlock>
 8007906:	f026 0607 	bic.w	r6, r6, #7
 800790a:	1d23      	adds	r3, r4, #4
 800790c:	1af2      	subs	r2, r6, r3
 800790e:	d0ae      	beq.n	800786e <_malloc_r+0x22>
 8007910:	1b9b      	subs	r3, r3, r6
 8007912:	50a3      	str	r3, [r4, r2]
 8007914:	e7ab      	b.n	800786e <_malloc_r+0x22>
 8007916:	42a3      	cmp	r3, r4
 8007918:	6862      	ldr	r2, [r4, #4]
 800791a:	d1dd      	bne.n	80078d8 <_malloc_r+0x8c>
 800791c:	f8c8 2000 	str.w	r2, [r8]
 8007920:	e7ec      	b.n	80078fc <_malloc_r+0xb0>
 8007922:	4623      	mov	r3, r4
 8007924:	6864      	ldr	r4, [r4, #4]
 8007926:	e7ac      	b.n	8007882 <_malloc_r+0x36>
 8007928:	4634      	mov	r4, r6
 800792a:	6876      	ldr	r6, [r6, #4]
 800792c:	e7b4      	b.n	8007898 <_malloc_r+0x4c>
 800792e:	4613      	mov	r3, r2
 8007930:	e7cc      	b.n	80078cc <_malloc_r+0x80>
 8007932:	230c      	movs	r3, #12
 8007934:	603b      	str	r3, [r7, #0]
 8007936:	4638      	mov	r0, r7
 8007938:	f000 f80e 	bl	8007958 <__malloc_unlock>
 800793c:	e797      	b.n	800786e <_malloc_r+0x22>
 800793e:	6025      	str	r5, [r4, #0]
 8007940:	e7dc      	b.n	80078fc <_malloc_r+0xb0>
 8007942:	605b      	str	r3, [r3, #4]
 8007944:	deff      	udf	#255	; 0xff
 8007946:	bf00      	nop
 8007948:	20001edc 	.word	0x20001edc

0800794c <__malloc_lock>:
 800794c:	4801      	ldr	r0, [pc, #4]	; (8007954 <__malloc_lock+0x8>)
 800794e:	f7ff bf0f 	b.w	8007770 <__retarget_lock_acquire_recursive>
 8007952:	bf00      	nop
 8007954:	20001ed8 	.word	0x20001ed8

08007958 <__malloc_unlock>:
 8007958:	4801      	ldr	r0, [pc, #4]	; (8007960 <__malloc_unlock+0x8>)
 800795a:	f7ff bf0a 	b.w	8007772 <__retarget_lock_release_recursive>
 800795e:	bf00      	nop
 8007960:	20001ed8 	.word	0x20001ed8

08007964 <__ssputs_r>:
 8007964:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007968:	688e      	ldr	r6, [r1, #8]
 800796a:	461f      	mov	r7, r3
 800796c:	42be      	cmp	r6, r7
 800796e:	680b      	ldr	r3, [r1, #0]
 8007970:	4682      	mov	sl, r0
 8007972:	460c      	mov	r4, r1
 8007974:	4690      	mov	r8, r2
 8007976:	d82c      	bhi.n	80079d2 <__ssputs_r+0x6e>
 8007978:	898a      	ldrh	r2, [r1, #12]
 800797a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800797e:	d026      	beq.n	80079ce <__ssputs_r+0x6a>
 8007980:	6965      	ldr	r5, [r4, #20]
 8007982:	6909      	ldr	r1, [r1, #16]
 8007984:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007988:	eba3 0901 	sub.w	r9, r3, r1
 800798c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007990:	1c7b      	adds	r3, r7, #1
 8007992:	444b      	add	r3, r9
 8007994:	106d      	asrs	r5, r5, #1
 8007996:	429d      	cmp	r5, r3
 8007998:	bf38      	it	cc
 800799a:	461d      	movcc	r5, r3
 800799c:	0553      	lsls	r3, r2, #21
 800799e:	d527      	bpl.n	80079f0 <__ssputs_r+0x8c>
 80079a0:	4629      	mov	r1, r5
 80079a2:	f7ff ff53 	bl	800784c <_malloc_r>
 80079a6:	4606      	mov	r6, r0
 80079a8:	b360      	cbz	r0, 8007a04 <__ssputs_r+0xa0>
 80079aa:	6921      	ldr	r1, [r4, #16]
 80079ac:	464a      	mov	r2, r9
 80079ae:	f000 faeb 	bl	8007f88 <memcpy>
 80079b2:	89a3      	ldrh	r3, [r4, #12]
 80079b4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80079b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079bc:	81a3      	strh	r3, [r4, #12]
 80079be:	6126      	str	r6, [r4, #16]
 80079c0:	6165      	str	r5, [r4, #20]
 80079c2:	444e      	add	r6, r9
 80079c4:	eba5 0509 	sub.w	r5, r5, r9
 80079c8:	6026      	str	r6, [r4, #0]
 80079ca:	60a5      	str	r5, [r4, #8]
 80079cc:	463e      	mov	r6, r7
 80079ce:	42be      	cmp	r6, r7
 80079d0:	d900      	bls.n	80079d4 <__ssputs_r+0x70>
 80079d2:	463e      	mov	r6, r7
 80079d4:	6820      	ldr	r0, [r4, #0]
 80079d6:	4632      	mov	r2, r6
 80079d8:	4641      	mov	r1, r8
 80079da:	f000 faab 	bl	8007f34 <memmove>
 80079de:	68a3      	ldr	r3, [r4, #8]
 80079e0:	1b9b      	subs	r3, r3, r6
 80079e2:	60a3      	str	r3, [r4, #8]
 80079e4:	6823      	ldr	r3, [r4, #0]
 80079e6:	4433      	add	r3, r6
 80079e8:	6023      	str	r3, [r4, #0]
 80079ea:	2000      	movs	r0, #0
 80079ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079f0:	462a      	mov	r2, r5
 80079f2:	f000 fad7 	bl	8007fa4 <_realloc_r>
 80079f6:	4606      	mov	r6, r0
 80079f8:	2800      	cmp	r0, #0
 80079fa:	d1e0      	bne.n	80079be <__ssputs_r+0x5a>
 80079fc:	6921      	ldr	r1, [r4, #16]
 80079fe:	4650      	mov	r0, sl
 8007a00:	f7ff feb8 	bl	8007774 <_free_r>
 8007a04:	230c      	movs	r3, #12
 8007a06:	f8ca 3000 	str.w	r3, [sl]
 8007a0a:	89a3      	ldrh	r3, [r4, #12]
 8007a0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a10:	81a3      	strh	r3, [r4, #12]
 8007a12:	f04f 30ff 	mov.w	r0, #4294967295
 8007a16:	e7e9      	b.n	80079ec <__ssputs_r+0x88>

08007a18 <_svfiprintf_r>:
 8007a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a1c:	4698      	mov	r8, r3
 8007a1e:	898b      	ldrh	r3, [r1, #12]
 8007a20:	061b      	lsls	r3, r3, #24
 8007a22:	b09d      	sub	sp, #116	; 0x74
 8007a24:	4607      	mov	r7, r0
 8007a26:	460d      	mov	r5, r1
 8007a28:	4614      	mov	r4, r2
 8007a2a:	d50e      	bpl.n	8007a4a <_svfiprintf_r+0x32>
 8007a2c:	690b      	ldr	r3, [r1, #16]
 8007a2e:	b963      	cbnz	r3, 8007a4a <_svfiprintf_r+0x32>
 8007a30:	2140      	movs	r1, #64	; 0x40
 8007a32:	f7ff ff0b 	bl	800784c <_malloc_r>
 8007a36:	6028      	str	r0, [r5, #0]
 8007a38:	6128      	str	r0, [r5, #16]
 8007a3a:	b920      	cbnz	r0, 8007a46 <_svfiprintf_r+0x2e>
 8007a3c:	230c      	movs	r3, #12
 8007a3e:	603b      	str	r3, [r7, #0]
 8007a40:	f04f 30ff 	mov.w	r0, #4294967295
 8007a44:	e0d0      	b.n	8007be8 <_svfiprintf_r+0x1d0>
 8007a46:	2340      	movs	r3, #64	; 0x40
 8007a48:	616b      	str	r3, [r5, #20]
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	9309      	str	r3, [sp, #36]	; 0x24
 8007a4e:	2320      	movs	r3, #32
 8007a50:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007a54:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a58:	2330      	movs	r3, #48	; 0x30
 8007a5a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007c00 <_svfiprintf_r+0x1e8>
 8007a5e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007a62:	f04f 0901 	mov.w	r9, #1
 8007a66:	4623      	mov	r3, r4
 8007a68:	469a      	mov	sl, r3
 8007a6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a6e:	b10a      	cbz	r2, 8007a74 <_svfiprintf_r+0x5c>
 8007a70:	2a25      	cmp	r2, #37	; 0x25
 8007a72:	d1f9      	bne.n	8007a68 <_svfiprintf_r+0x50>
 8007a74:	ebba 0b04 	subs.w	fp, sl, r4
 8007a78:	d00b      	beq.n	8007a92 <_svfiprintf_r+0x7a>
 8007a7a:	465b      	mov	r3, fp
 8007a7c:	4622      	mov	r2, r4
 8007a7e:	4629      	mov	r1, r5
 8007a80:	4638      	mov	r0, r7
 8007a82:	f7ff ff6f 	bl	8007964 <__ssputs_r>
 8007a86:	3001      	adds	r0, #1
 8007a88:	f000 80a9 	beq.w	8007bde <_svfiprintf_r+0x1c6>
 8007a8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a8e:	445a      	add	r2, fp
 8007a90:	9209      	str	r2, [sp, #36]	; 0x24
 8007a92:	f89a 3000 	ldrb.w	r3, [sl]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	f000 80a1 	beq.w	8007bde <_svfiprintf_r+0x1c6>
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	f04f 32ff 	mov.w	r2, #4294967295
 8007aa2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007aa6:	f10a 0a01 	add.w	sl, sl, #1
 8007aaa:	9304      	str	r3, [sp, #16]
 8007aac:	9307      	str	r3, [sp, #28]
 8007aae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007ab2:	931a      	str	r3, [sp, #104]	; 0x68
 8007ab4:	4654      	mov	r4, sl
 8007ab6:	2205      	movs	r2, #5
 8007ab8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007abc:	4850      	ldr	r0, [pc, #320]	; (8007c00 <_svfiprintf_r+0x1e8>)
 8007abe:	f7f8 fb8f 	bl	80001e0 <memchr>
 8007ac2:	9a04      	ldr	r2, [sp, #16]
 8007ac4:	b9d8      	cbnz	r0, 8007afe <_svfiprintf_r+0xe6>
 8007ac6:	06d0      	lsls	r0, r2, #27
 8007ac8:	bf44      	itt	mi
 8007aca:	2320      	movmi	r3, #32
 8007acc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ad0:	0711      	lsls	r1, r2, #28
 8007ad2:	bf44      	itt	mi
 8007ad4:	232b      	movmi	r3, #43	; 0x2b
 8007ad6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ada:	f89a 3000 	ldrb.w	r3, [sl]
 8007ade:	2b2a      	cmp	r3, #42	; 0x2a
 8007ae0:	d015      	beq.n	8007b0e <_svfiprintf_r+0xf6>
 8007ae2:	9a07      	ldr	r2, [sp, #28]
 8007ae4:	4654      	mov	r4, sl
 8007ae6:	2000      	movs	r0, #0
 8007ae8:	f04f 0c0a 	mov.w	ip, #10
 8007aec:	4621      	mov	r1, r4
 8007aee:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007af2:	3b30      	subs	r3, #48	; 0x30
 8007af4:	2b09      	cmp	r3, #9
 8007af6:	d94d      	bls.n	8007b94 <_svfiprintf_r+0x17c>
 8007af8:	b1b0      	cbz	r0, 8007b28 <_svfiprintf_r+0x110>
 8007afa:	9207      	str	r2, [sp, #28]
 8007afc:	e014      	b.n	8007b28 <_svfiprintf_r+0x110>
 8007afe:	eba0 0308 	sub.w	r3, r0, r8
 8007b02:	fa09 f303 	lsl.w	r3, r9, r3
 8007b06:	4313      	orrs	r3, r2
 8007b08:	9304      	str	r3, [sp, #16]
 8007b0a:	46a2      	mov	sl, r4
 8007b0c:	e7d2      	b.n	8007ab4 <_svfiprintf_r+0x9c>
 8007b0e:	9b03      	ldr	r3, [sp, #12]
 8007b10:	1d19      	adds	r1, r3, #4
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	9103      	str	r1, [sp, #12]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	bfbb      	ittet	lt
 8007b1a:	425b      	neglt	r3, r3
 8007b1c:	f042 0202 	orrlt.w	r2, r2, #2
 8007b20:	9307      	strge	r3, [sp, #28]
 8007b22:	9307      	strlt	r3, [sp, #28]
 8007b24:	bfb8      	it	lt
 8007b26:	9204      	strlt	r2, [sp, #16]
 8007b28:	7823      	ldrb	r3, [r4, #0]
 8007b2a:	2b2e      	cmp	r3, #46	; 0x2e
 8007b2c:	d10c      	bne.n	8007b48 <_svfiprintf_r+0x130>
 8007b2e:	7863      	ldrb	r3, [r4, #1]
 8007b30:	2b2a      	cmp	r3, #42	; 0x2a
 8007b32:	d134      	bne.n	8007b9e <_svfiprintf_r+0x186>
 8007b34:	9b03      	ldr	r3, [sp, #12]
 8007b36:	1d1a      	adds	r2, r3, #4
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	9203      	str	r2, [sp, #12]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	bfb8      	it	lt
 8007b40:	f04f 33ff 	movlt.w	r3, #4294967295
 8007b44:	3402      	adds	r4, #2
 8007b46:	9305      	str	r3, [sp, #20]
 8007b48:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007c10 <_svfiprintf_r+0x1f8>
 8007b4c:	7821      	ldrb	r1, [r4, #0]
 8007b4e:	2203      	movs	r2, #3
 8007b50:	4650      	mov	r0, sl
 8007b52:	f7f8 fb45 	bl	80001e0 <memchr>
 8007b56:	b138      	cbz	r0, 8007b68 <_svfiprintf_r+0x150>
 8007b58:	9b04      	ldr	r3, [sp, #16]
 8007b5a:	eba0 000a 	sub.w	r0, r0, sl
 8007b5e:	2240      	movs	r2, #64	; 0x40
 8007b60:	4082      	lsls	r2, r0
 8007b62:	4313      	orrs	r3, r2
 8007b64:	3401      	adds	r4, #1
 8007b66:	9304      	str	r3, [sp, #16]
 8007b68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b6c:	4825      	ldr	r0, [pc, #148]	; (8007c04 <_svfiprintf_r+0x1ec>)
 8007b6e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007b72:	2206      	movs	r2, #6
 8007b74:	f7f8 fb34 	bl	80001e0 <memchr>
 8007b78:	2800      	cmp	r0, #0
 8007b7a:	d038      	beq.n	8007bee <_svfiprintf_r+0x1d6>
 8007b7c:	4b22      	ldr	r3, [pc, #136]	; (8007c08 <_svfiprintf_r+0x1f0>)
 8007b7e:	bb1b      	cbnz	r3, 8007bc8 <_svfiprintf_r+0x1b0>
 8007b80:	9b03      	ldr	r3, [sp, #12]
 8007b82:	3307      	adds	r3, #7
 8007b84:	f023 0307 	bic.w	r3, r3, #7
 8007b88:	3308      	adds	r3, #8
 8007b8a:	9303      	str	r3, [sp, #12]
 8007b8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b8e:	4433      	add	r3, r6
 8007b90:	9309      	str	r3, [sp, #36]	; 0x24
 8007b92:	e768      	b.n	8007a66 <_svfiprintf_r+0x4e>
 8007b94:	fb0c 3202 	mla	r2, ip, r2, r3
 8007b98:	460c      	mov	r4, r1
 8007b9a:	2001      	movs	r0, #1
 8007b9c:	e7a6      	b.n	8007aec <_svfiprintf_r+0xd4>
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	3401      	adds	r4, #1
 8007ba2:	9305      	str	r3, [sp, #20]
 8007ba4:	4619      	mov	r1, r3
 8007ba6:	f04f 0c0a 	mov.w	ip, #10
 8007baa:	4620      	mov	r0, r4
 8007bac:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007bb0:	3a30      	subs	r2, #48	; 0x30
 8007bb2:	2a09      	cmp	r2, #9
 8007bb4:	d903      	bls.n	8007bbe <_svfiprintf_r+0x1a6>
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d0c6      	beq.n	8007b48 <_svfiprintf_r+0x130>
 8007bba:	9105      	str	r1, [sp, #20]
 8007bbc:	e7c4      	b.n	8007b48 <_svfiprintf_r+0x130>
 8007bbe:	fb0c 2101 	mla	r1, ip, r1, r2
 8007bc2:	4604      	mov	r4, r0
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	e7f0      	b.n	8007baa <_svfiprintf_r+0x192>
 8007bc8:	ab03      	add	r3, sp, #12
 8007bca:	9300      	str	r3, [sp, #0]
 8007bcc:	462a      	mov	r2, r5
 8007bce:	4b0f      	ldr	r3, [pc, #60]	; (8007c0c <_svfiprintf_r+0x1f4>)
 8007bd0:	a904      	add	r1, sp, #16
 8007bd2:	4638      	mov	r0, r7
 8007bd4:	f3af 8000 	nop.w
 8007bd8:	1c42      	adds	r2, r0, #1
 8007bda:	4606      	mov	r6, r0
 8007bdc:	d1d6      	bne.n	8007b8c <_svfiprintf_r+0x174>
 8007bde:	89ab      	ldrh	r3, [r5, #12]
 8007be0:	065b      	lsls	r3, r3, #25
 8007be2:	f53f af2d 	bmi.w	8007a40 <_svfiprintf_r+0x28>
 8007be6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007be8:	b01d      	add	sp, #116	; 0x74
 8007bea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bee:	ab03      	add	r3, sp, #12
 8007bf0:	9300      	str	r3, [sp, #0]
 8007bf2:	462a      	mov	r2, r5
 8007bf4:	4b05      	ldr	r3, [pc, #20]	; (8007c0c <_svfiprintf_r+0x1f4>)
 8007bf6:	a904      	add	r1, sp, #16
 8007bf8:	4638      	mov	r0, r7
 8007bfa:	f000 f879 	bl	8007cf0 <_printf_i>
 8007bfe:	e7eb      	b.n	8007bd8 <_svfiprintf_r+0x1c0>
 8007c00:	080080e4 	.word	0x080080e4
 8007c04:	080080ee 	.word	0x080080ee
 8007c08:	00000000 	.word	0x00000000
 8007c0c:	08007965 	.word	0x08007965
 8007c10:	080080ea 	.word	0x080080ea

08007c14 <_printf_common>:
 8007c14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c18:	4616      	mov	r6, r2
 8007c1a:	4699      	mov	r9, r3
 8007c1c:	688a      	ldr	r2, [r1, #8]
 8007c1e:	690b      	ldr	r3, [r1, #16]
 8007c20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007c24:	4293      	cmp	r3, r2
 8007c26:	bfb8      	it	lt
 8007c28:	4613      	movlt	r3, r2
 8007c2a:	6033      	str	r3, [r6, #0]
 8007c2c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007c30:	4607      	mov	r7, r0
 8007c32:	460c      	mov	r4, r1
 8007c34:	b10a      	cbz	r2, 8007c3a <_printf_common+0x26>
 8007c36:	3301      	adds	r3, #1
 8007c38:	6033      	str	r3, [r6, #0]
 8007c3a:	6823      	ldr	r3, [r4, #0]
 8007c3c:	0699      	lsls	r1, r3, #26
 8007c3e:	bf42      	ittt	mi
 8007c40:	6833      	ldrmi	r3, [r6, #0]
 8007c42:	3302      	addmi	r3, #2
 8007c44:	6033      	strmi	r3, [r6, #0]
 8007c46:	6825      	ldr	r5, [r4, #0]
 8007c48:	f015 0506 	ands.w	r5, r5, #6
 8007c4c:	d106      	bne.n	8007c5c <_printf_common+0x48>
 8007c4e:	f104 0a19 	add.w	sl, r4, #25
 8007c52:	68e3      	ldr	r3, [r4, #12]
 8007c54:	6832      	ldr	r2, [r6, #0]
 8007c56:	1a9b      	subs	r3, r3, r2
 8007c58:	42ab      	cmp	r3, r5
 8007c5a:	dc26      	bgt.n	8007caa <_printf_common+0x96>
 8007c5c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007c60:	1e13      	subs	r3, r2, #0
 8007c62:	6822      	ldr	r2, [r4, #0]
 8007c64:	bf18      	it	ne
 8007c66:	2301      	movne	r3, #1
 8007c68:	0692      	lsls	r2, r2, #26
 8007c6a:	d42b      	bmi.n	8007cc4 <_printf_common+0xb0>
 8007c6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007c70:	4649      	mov	r1, r9
 8007c72:	4638      	mov	r0, r7
 8007c74:	47c0      	blx	r8
 8007c76:	3001      	adds	r0, #1
 8007c78:	d01e      	beq.n	8007cb8 <_printf_common+0xa4>
 8007c7a:	6823      	ldr	r3, [r4, #0]
 8007c7c:	6922      	ldr	r2, [r4, #16]
 8007c7e:	f003 0306 	and.w	r3, r3, #6
 8007c82:	2b04      	cmp	r3, #4
 8007c84:	bf02      	ittt	eq
 8007c86:	68e5      	ldreq	r5, [r4, #12]
 8007c88:	6833      	ldreq	r3, [r6, #0]
 8007c8a:	1aed      	subeq	r5, r5, r3
 8007c8c:	68a3      	ldr	r3, [r4, #8]
 8007c8e:	bf0c      	ite	eq
 8007c90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007c94:	2500      	movne	r5, #0
 8007c96:	4293      	cmp	r3, r2
 8007c98:	bfc4      	itt	gt
 8007c9a:	1a9b      	subgt	r3, r3, r2
 8007c9c:	18ed      	addgt	r5, r5, r3
 8007c9e:	2600      	movs	r6, #0
 8007ca0:	341a      	adds	r4, #26
 8007ca2:	42b5      	cmp	r5, r6
 8007ca4:	d11a      	bne.n	8007cdc <_printf_common+0xc8>
 8007ca6:	2000      	movs	r0, #0
 8007ca8:	e008      	b.n	8007cbc <_printf_common+0xa8>
 8007caa:	2301      	movs	r3, #1
 8007cac:	4652      	mov	r2, sl
 8007cae:	4649      	mov	r1, r9
 8007cb0:	4638      	mov	r0, r7
 8007cb2:	47c0      	blx	r8
 8007cb4:	3001      	adds	r0, #1
 8007cb6:	d103      	bne.n	8007cc0 <_printf_common+0xac>
 8007cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8007cbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cc0:	3501      	adds	r5, #1
 8007cc2:	e7c6      	b.n	8007c52 <_printf_common+0x3e>
 8007cc4:	18e1      	adds	r1, r4, r3
 8007cc6:	1c5a      	adds	r2, r3, #1
 8007cc8:	2030      	movs	r0, #48	; 0x30
 8007cca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007cce:	4422      	add	r2, r4
 8007cd0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007cd4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007cd8:	3302      	adds	r3, #2
 8007cda:	e7c7      	b.n	8007c6c <_printf_common+0x58>
 8007cdc:	2301      	movs	r3, #1
 8007cde:	4622      	mov	r2, r4
 8007ce0:	4649      	mov	r1, r9
 8007ce2:	4638      	mov	r0, r7
 8007ce4:	47c0      	blx	r8
 8007ce6:	3001      	adds	r0, #1
 8007ce8:	d0e6      	beq.n	8007cb8 <_printf_common+0xa4>
 8007cea:	3601      	adds	r6, #1
 8007cec:	e7d9      	b.n	8007ca2 <_printf_common+0x8e>
	...

08007cf0 <_printf_i>:
 8007cf0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007cf4:	7e0f      	ldrb	r7, [r1, #24]
 8007cf6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007cf8:	2f78      	cmp	r7, #120	; 0x78
 8007cfa:	4691      	mov	r9, r2
 8007cfc:	4680      	mov	r8, r0
 8007cfe:	460c      	mov	r4, r1
 8007d00:	469a      	mov	sl, r3
 8007d02:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007d06:	d807      	bhi.n	8007d18 <_printf_i+0x28>
 8007d08:	2f62      	cmp	r7, #98	; 0x62
 8007d0a:	d80a      	bhi.n	8007d22 <_printf_i+0x32>
 8007d0c:	2f00      	cmp	r7, #0
 8007d0e:	f000 80d4 	beq.w	8007eba <_printf_i+0x1ca>
 8007d12:	2f58      	cmp	r7, #88	; 0x58
 8007d14:	f000 80c0 	beq.w	8007e98 <_printf_i+0x1a8>
 8007d18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007d20:	e03a      	b.n	8007d98 <_printf_i+0xa8>
 8007d22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007d26:	2b15      	cmp	r3, #21
 8007d28:	d8f6      	bhi.n	8007d18 <_printf_i+0x28>
 8007d2a:	a101      	add	r1, pc, #4	; (adr r1, 8007d30 <_printf_i+0x40>)
 8007d2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007d30:	08007d89 	.word	0x08007d89
 8007d34:	08007d9d 	.word	0x08007d9d
 8007d38:	08007d19 	.word	0x08007d19
 8007d3c:	08007d19 	.word	0x08007d19
 8007d40:	08007d19 	.word	0x08007d19
 8007d44:	08007d19 	.word	0x08007d19
 8007d48:	08007d9d 	.word	0x08007d9d
 8007d4c:	08007d19 	.word	0x08007d19
 8007d50:	08007d19 	.word	0x08007d19
 8007d54:	08007d19 	.word	0x08007d19
 8007d58:	08007d19 	.word	0x08007d19
 8007d5c:	08007ea1 	.word	0x08007ea1
 8007d60:	08007dc9 	.word	0x08007dc9
 8007d64:	08007e5b 	.word	0x08007e5b
 8007d68:	08007d19 	.word	0x08007d19
 8007d6c:	08007d19 	.word	0x08007d19
 8007d70:	08007ec3 	.word	0x08007ec3
 8007d74:	08007d19 	.word	0x08007d19
 8007d78:	08007dc9 	.word	0x08007dc9
 8007d7c:	08007d19 	.word	0x08007d19
 8007d80:	08007d19 	.word	0x08007d19
 8007d84:	08007e63 	.word	0x08007e63
 8007d88:	682b      	ldr	r3, [r5, #0]
 8007d8a:	1d1a      	adds	r2, r3, #4
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	602a      	str	r2, [r5, #0]
 8007d90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007d98:	2301      	movs	r3, #1
 8007d9a:	e09f      	b.n	8007edc <_printf_i+0x1ec>
 8007d9c:	6820      	ldr	r0, [r4, #0]
 8007d9e:	682b      	ldr	r3, [r5, #0]
 8007da0:	0607      	lsls	r7, r0, #24
 8007da2:	f103 0104 	add.w	r1, r3, #4
 8007da6:	6029      	str	r1, [r5, #0]
 8007da8:	d501      	bpl.n	8007dae <_printf_i+0xbe>
 8007daa:	681e      	ldr	r6, [r3, #0]
 8007dac:	e003      	b.n	8007db6 <_printf_i+0xc6>
 8007dae:	0646      	lsls	r6, r0, #25
 8007db0:	d5fb      	bpl.n	8007daa <_printf_i+0xba>
 8007db2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007db6:	2e00      	cmp	r6, #0
 8007db8:	da03      	bge.n	8007dc2 <_printf_i+0xd2>
 8007dba:	232d      	movs	r3, #45	; 0x2d
 8007dbc:	4276      	negs	r6, r6
 8007dbe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007dc2:	485a      	ldr	r0, [pc, #360]	; (8007f2c <_printf_i+0x23c>)
 8007dc4:	230a      	movs	r3, #10
 8007dc6:	e012      	b.n	8007dee <_printf_i+0xfe>
 8007dc8:	682b      	ldr	r3, [r5, #0]
 8007dca:	6820      	ldr	r0, [r4, #0]
 8007dcc:	1d19      	adds	r1, r3, #4
 8007dce:	6029      	str	r1, [r5, #0]
 8007dd0:	0605      	lsls	r5, r0, #24
 8007dd2:	d501      	bpl.n	8007dd8 <_printf_i+0xe8>
 8007dd4:	681e      	ldr	r6, [r3, #0]
 8007dd6:	e002      	b.n	8007dde <_printf_i+0xee>
 8007dd8:	0641      	lsls	r1, r0, #25
 8007dda:	d5fb      	bpl.n	8007dd4 <_printf_i+0xe4>
 8007ddc:	881e      	ldrh	r6, [r3, #0]
 8007dde:	4853      	ldr	r0, [pc, #332]	; (8007f2c <_printf_i+0x23c>)
 8007de0:	2f6f      	cmp	r7, #111	; 0x6f
 8007de2:	bf0c      	ite	eq
 8007de4:	2308      	moveq	r3, #8
 8007de6:	230a      	movne	r3, #10
 8007de8:	2100      	movs	r1, #0
 8007dea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007dee:	6865      	ldr	r5, [r4, #4]
 8007df0:	60a5      	str	r5, [r4, #8]
 8007df2:	2d00      	cmp	r5, #0
 8007df4:	bfa2      	ittt	ge
 8007df6:	6821      	ldrge	r1, [r4, #0]
 8007df8:	f021 0104 	bicge.w	r1, r1, #4
 8007dfc:	6021      	strge	r1, [r4, #0]
 8007dfe:	b90e      	cbnz	r6, 8007e04 <_printf_i+0x114>
 8007e00:	2d00      	cmp	r5, #0
 8007e02:	d04b      	beq.n	8007e9c <_printf_i+0x1ac>
 8007e04:	4615      	mov	r5, r2
 8007e06:	fbb6 f1f3 	udiv	r1, r6, r3
 8007e0a:	fb03 6711 	mls	r7, r3, r1, r6
 8007e0e:	5dc7      	ldrb	r7, [r0, r7]
 8007e10:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007e14:	4637      	mov	r7, r6
 8007e16:	42bb      	cmp	r3, r7
 8007e18:	460e      	mov	r6, r1
 8007e1a:	d9f4      	bls.n	8007e06 <_printf_i+0x116>
 8007e1c:	2b08      	cmp	r3, #8
 8007e1e:	d10b      	bne.n	8007e38 <_printf_i+0x148>
 8007e20:	6823      	ldr	r3, [r4, #0]
 8007e22:	07de      	lsls	r6, r3, #31
 8007e24:	d508      	bpl.n	8007e38 <_printf_i+0x148>
 8007e26:	6923      	ldr	r3, [r4, #16]
 8007e28:	6861      	ldr	r1, [r4, #4]
 8007e2a:	4299      	cmp	r1, r3
 8007e2c:	bfde      	ittt	le
 8007e2e:	2330      	movle	r3, #48	; 0x30
 8007e30:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007e34:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007e38:	1b52      	subs	r2, r2, r5
 8007e3a:	6122      	str	r2, [r4, #16]
 8007e3c:	f8cd a000 	str.w	sl, [sp]
 8007e40:	464b      	mov	r3, r9
 8007e42:	aa03      	add	r2, sp, #12
 8007e44:	4621      	mov	r1, r4
 8007e46:	4640      	mov	r0, r8
 8007e48:	f7ff fee4 	bl	8007c14 <_printf_common>
 8007e4c:	3001      	adds	r0, #1
 8007e4e:	d14a      	bne.n	8007ee6 <_printf_i+0x1f6>
 8007e50:	f04f 30ff 	mov.w	r0, #4294967295
 8007e54:	b004      	add	sp, #16
 8007e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e5a:	6823      	ldr	r3, [r4, #0]
 8007e5c:	f043 0320 	orr.w	r3, r3, #32
 8007e60:	6023      	str	r3, [r4, #0]
 8007e62:	4833      	ldr	r0, [pc, #204]	; (8007f30 <_printf_i+0x240>)
 8007e64:	2778      	movs	r7, #120	; 0x78
 8007e66:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007e6a:	6823      	ldr	r3, [r4, #0]
 8007e6c:	6829      	ldr	r1, [r5, #0]
 8007e6e:	061f      	lsls	r7, r3, #24
 8007e70:	f851 6b04 	ldr.w	r6, [r1], #4
 8007e74:	d402      	bmi.n	8007e7c <_printf_i+0x18c>
 8007e76:	065f      	lsls	r7, r3, #25
 8007e78:	bf48      	it	mi
 8007e7a:	b2b6      	uxthmi	r6, r6
 8007e7c:	07df      	lsls	r7, r3, #31
 8007e7e:	bf48      	it	mi
 8007e80:	f043 0320 	orrmi.w	r3, r3, #32
 8007e84:	6029      	str	r1, [r5, #0]
 8007e86:	bf48      	it	mi
 8007e88:	6023      	strmi	r3, [r4, #0]
 8007e8a:	b91e      	cbnz	r6, 8007e94 <_printf_i+0x1a4>
 8007e8c:	6823      	ldr	r3, [r4, #0]
 8007e8e:	f023 0320 	bic.w	r3, r3, #32
 8007e92:	6023      	str	r3, [r4, #0]
 8007e94:	2310      	movs	r3, #16
 8007e96:	e7a7      	b.n	8007de8 <_printf_i+0xf8>
 8007e98:	4824      	ldr	r0, [pc, #144]	; (8007f2c <_printf_i+0x23c>)
 8007e9a:	e7e4      	b.n	8007e66 <_printf_i+0x176>
 8007e9c:	4615      	mov	r5, r2
 8007e9e:	e7bd      	b.n	8007e1c <_printf_i+0x12c>
 8007ea0:	682b      	ldr	r3, [r5, #0]
 8007ea2:	6826      	ldr	r6, [r4, #0]
 8007ea4:	6961      	ldr	r1, [r4, #20]
 8007ea6:	1d18      	adds	r0, r3, #4
 8007ea8:	6028      	str	r0, [r5, #0]
 8007eaa:	0635      	lsls	r5, r6, #24
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	d501      	bpl.n	8007eb4 <_printf_i+0x1c4>
 8007eb0:	6019      	str	r1, [r3, #0]
 8007eb2:	e002      	b.n	8007eba <_printf_i+0x1ca>
 8007eb4:	0670      	lsls	r0, r6, #25
 8007eb6:	d5fb      	bpl.n	8007eb0 <_printf_i+0x1c0>
 8007eb8:	8019      	strh	r1, [r3, #0]
 8007eba:	2300      	movs	r3, #0
 8007ebc:	6123      	str	r3, [r4, #16]
 8007ebe:	4615      	mov	r5, r2
 8007ec0:	e7bc      	b.n	8007e3c <_printf_i+0x14c>
 8007ec2:	682b      	ldr	r3, [r5, #0]
 8007ec4:	1d1a      	adds	r2, r3, #4
 8007ec6:	602a      	str	r2, [r5, #0]
 8007ec8:	681d      	ldr	r5, [r3, #0]
 8007eca:	6862      	ldr	r2, [r4, #4]
 8007ecc:	2100      	movs	r1, #0
 8007ece:	4628      	mov	r0, r5
 8007ed0:	f7f8 f986 	bl	80001e0 <memchr>
 8007ed4:	b108      	cbz	r0, 8007eda <_printf_i+0x1ea>
 8007ed6:	1b40      	subs	r0, r0, r5
 8007ed8:	6060      	str	r0, [r4, #4]
 8007eda:	6863      	ldr	r3, [r4, #4]
 8007edc:	6123      	str	r3, [r4, #16]
 8007ede:	2300      	movs	r3, #0
 8007ee0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ee4:	e7aa      	b.n	8007e3c <_printf_i+0x14c>
 8007ee6:	6923      	ldr	r3, [r4, #16]
 8007ee8:	462a      	mov	r2, r5
 8007eea:	4649      	mov	r1, r9
 8007eec:	4640      	mov	r0, r8
 8007eee:	47d0      	blx	sl
 8007ef0:	3001      	adds	r0, #1
 8007ef2:	d0ad      	beq.n	8007e50 <_printf_i+0x160>
 8007ef4:	6823      	ldr	r3, [r4, #0]
 8007ef6:	079b      	lsls	r3, r3, #30
 8007ef8:	d413      	bmi.n	8007f22 <_printf_i+0x232>
 8007efa:	68e0      	ldr	r0, [r4, #12]
 8007efc:	9b03      	ldr	r3, [sp, #12]
 8007efe:	4298      	cmp	r0, r3
 8007f00:	bfb8      	it	lt
 8007f02:	4618      	movlt	r0, r3
 8007f04:	e7a6      	b.n	8007e54 <_printf_i+0x164>
 8007f06:	2301      	movs	r3, #1
 8007f08:	4632      	mov	r2, r6
 8007f0a:	4649      	mov	r1, r9
 8007f0c:	4640      	mov	r0, r8
 8007f0e:	47d0      	blx	sl
 8007f10:	3001      	adds	r0, #1
 8007f12:	d09d      	beq.n	8007e50 <_printf_i+0x160>
 8007f14:	3501      	adds	r5, #1
 8007f16:	68e3      	ldr	r3, [r4, #12]
 8007f18:	9903      	ldr	r1, [sp, #12]
 8007f1a:	1a5b      	subs	r3, r3, r1
 8007f1c:	42ab      	cmp	r3, r5
 8007f1e:	dcf2      	bgt.n	8007f06 <_printf_i+0x216>
 8007f20:	e7eb      	b.n	8007efa <_printf_i+0x20a>
 8007f22:	2500      	movs	r5, #0
 8007f24:	f104 0619 	add.w	r6, r4, #25
 8007f28:	e7f5      	b.n	8007f16 <_printf_i+0x226>
 8007f2a:	bf00      	nop
 8007f2c:	080080f5 	.word	0x080080f5
 8007f30:	08008106 	.word	0x08008106

08007f34 <memmove>:
 8007f34:	4288      	cmp	r0, r1
 8007f36:	b510      	push	{r4, lr}
 8007f38:	eb01 0402 	add.w	r4, r1, r2
 8007f3c:	d902      	bls.n	8007f44 <memmove+0x10>
 8007f3e:	4284      	cmp	r4, r0
 8007f40:	4623      	mov	r3, r4
 8007f42:	d807      	bhi.n	8007f54 <memmove+0x20>
 8007f44:	1e43      	subs	r3, r0, #1
 8007f46:	42a1      	cmp	r1, r4
 8007f48:	d008      	beq.n	8007f5c <memmove+0x28>
 8007f4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007f4e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007f52:	e7f8      	b.n	8007f46 <memmove+0x12>
 8007f54:	4402      	add	r2, r0
 8007f56:	4601      	mov	r1, r0
 8007f58:	428a      	cmp	r2, r1
 8007f5a:	d100      	bne.n	8007f5e <memmove+0x2a>
 8007f5c:	bd10      	pop	{r4, pc}
 8007f5e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007f62:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007f66:	e7f7      	b.n	8007f58 <memmove+0x24>

08007f68 <_sbrk_r>:
 8007f68:	b538      	push	{r3, r4, r5, lr}
 8007f6a:	4d06      	ldr	r5, [pc, #24]	; (8007f84 <_sbrk_r+0x1c>)
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	4604      	mov	r4, r0
 8007f70:	4608      	mov	r0, r1
 8007f72:	602b      	str	r3, [r5, #0]
 8007f74:	f7f8 fd3a 	bl	80009ec <_sbrk>
 8007f78:	1c43      	adds	r3, r0, #1
 8007f7a:	d102      	bne.n	8007f82 <_sbrk_r+0x1a>
 8007f7c:	682b      	ldr	r3, [r5, #0]
 8007f7e:	b103      	cbz	r3, 8007f82 <_sbrk_r+0x1a>
 8007f80:	6023      	str	r3, [r4, #0]
 8007f82:	bd38      	pop	{r3, r4, r5, pc}
 8007f84:	20001ed4 	.word	0x20001ed4

08007f88 <memcpy>:
 8007f88:	440a      	add	r2, r1
 8007f8a:	4291      	cmp	r1, r2
 8007f8c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007f90:	d100      	bne.n	8007f94 <memcpy+0xc>
 8007f92:	4770      	bx	lr
 8007f94:	b510      	push	{r4, lr}
 8007f96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f9a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007f9e:	4291      	cmp	r1, r2
 8007fa0:	d1f9      	bne.n	8007f96 <memcpy+0xe>
 8007fa2:	bd10      	pop	{r4, pc}

08007fa4 <_realloc_r>:
 8007fa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fa8:	4680      	mov	r8, r0
 8007faa:	4614      	mov	r4, r2
 8007fac:	460e      	mov	r6, r1
 8007fae:	b921      	cbnz	r1, 8007fba <_realloc_r+0x16>
 8007fb0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007fb4:	4611      	mov	r1, r2
 8007fb6:	f7ff bc49 	b.w	800784c <_malloc_r>
 8007fba:	b92a      	cbnz	r2, 8007fc8 <_realloc_r+0x24>
 8007fbc:	f7ff fbda 	bl	8007774 <_free_r>
 8007fc0:	4625      	mov	r5, r4
 8007fc2:	4628      	mov	r0, r5
 8007fc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fc8:	f000 f81b 	bl	8008002 <_malloc_usable_size_r>
 8007fcc:	4284      	cmp	r4, r0
 8007fce:	4607      	mov	r7, r0
 8007fd0:	d802      	bhi.n	8007fd8 <_realloc_r+0x34>
 8007fd2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007fd6:	d812      	bhi.n	8007ffe <_realloc_r+0x5a>
 8007fd8:	4621      	mov	r1, r4
 8007fda:	4640      	mov	r0, r8
 8007fdc:	f7ff fc36 	bl	800784c <_malloc_r>
 8007fe0:	4605      	mov	r5, r0
 8007fe2:	2800      	cmp	r0, #0
 8007fe4:	d0ed      	beq.n	8007fc2 <_realloc_r+0x1e>
 8007fe6:	42bc      	cmp	r4, r7
 8007fe8:	4622      	mov	r2, r4
 8007fea:	4631      	mov	r1, r6
 8007fec:	bf28      	it	cs
 8007fee:	463a      	movcs	r2, r7
 8007ff0:	f7ff ffca 	bl	8007f88 <memcpy>
 8007ff4:	4631      	mov	r1, r6
 8007ff6:	4640      	mov	r0, r8
 8007ff8:	f7ff fbbc 	bl	8007774 <_free_r>
 8007ffc:	e7e1      	b.n	8007fc2 <_realloc_r+0x1e>
 8007ffe:	4635      	mov	r5, r6
 8008000:	e7df      	b.n	8007fc2 <_realloc_r+0x1e>

08008002 <_malloc_usable_size_r>:
 8008002:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008006:	1f18      	subs	r0, r3, #4
 8008008:	2b00      	cmp	r3, #0
 800800a:	bfbc      	itt	lt
 800800c:	580b      	ldrlt	r3, [r1, r0]
 800800e:	18c0      	addlt	r0, r0, r3
 8008010:	4770      	bx	lr
	...

08008014 <_init>:
 8008014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008016:	bf00      	nop
 8008018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800801a:	bc08      	pop	{r3}
 800801c:	469e      	mov	lr, r3
 800801e:	4770      	bx	lr

08008020 <_fini>:
 8008020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008022:	bf00      	nop
 8008024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008026:	bc08      	pop	{r3}
 8008028:	469e      	mov	lr, r3
 800802a:	4770      	bx	lr
